WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iECABU_c1320
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iECABU_c1320
----------------------------------
number of metabolites : 1942
number of reactions : 2731
number of genes : 1320

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 27
max_cuts = 14
(indicator, big_m) = (false, true)
BIG M ADDED
model with 2731 flux variables and 5071 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 2, 4, 2, 2, 2, 2, 2, 5, 3, 2, 10, 2, 2, 3]
length(C_list) = 14
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 4, 2, 2, 4, 3, 5, 17, 3, 8, 4, 3, 4, 4, 3, 2, 3, 3]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [5, 4, 2, 3, 2, 6, 4, 2, 125, 87, 4, 3, 137, 4, 3, 3, 2]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 67, 3, 4, 4, 4, 4, 4, 250, 4, 3, 3, 13, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [5, 4, 2, 4, 3, 2, 7, 24]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 19, 5, 74, 3, 4, 5, 3, 6, 4, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [2, 7, 12, 19, 12, 12, 3, 14, 14, 12, 6, 10, 10, 6, 8, 14, 11, 14, 10, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 5, 4, 6, 6, 3, 5, 10, 4, 4]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 3, 2, 2, 2, 3, 4, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [2, 12, 4, 6, 3, 2, 6, 7, 4, 5, 65, 7, 4, 29]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [2, 3, 10, 4, 7, 4, 4, 4, 11, 5, 4, 10, 4]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 7, 8, 7, 4, 6, 7, 5, 5, 36, 9, 8, 5, 9, 6, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [4, 5, 6]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 4, 7, 5, 10]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [6, 39, 9, 10, 38, 3]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [4, 7, 10, 5, 9, 8, 10, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 4, 4, 4, 3, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [5, 3, 4]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [3, 3, 31, 4]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [2, 7, 8, 8, 3, 16]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [2]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 22
termination = MathOptInterface.OPTIMAL
objective_value = 0.9824784386660073
thermo_feasible = true
