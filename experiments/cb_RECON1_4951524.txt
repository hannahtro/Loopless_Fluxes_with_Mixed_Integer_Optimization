┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
RECON1
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

RECON1
----------------------------------
number of metabolites : 2766
number of reactions : 3741
number of genes : 1905

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 19
max_cuts = 11
(indicator, big_m) = (false, true)
BIG M ADDED
model with 3741 flux variables and 7052 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 4, 2, 4, 4, 6, 8, 5, 9, 2, 5, 8]
length(C_list) = 11
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 6, 12, 4, 2, 9, 4, 2, 5, 6, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [7, 2, 2, 7, 9, 2, 4, 2, 2, 102, 3, 8, 6, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [2, 6, 5, 5, 6, 9, 5, 7, 7, 4, 4, 5, 2, 6, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [17, 5, 2, 9, 2, 5, 2, 4, 6, 5, 6, 5, 4, 4, 5, 5, 5, 11]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [17, 6, 6, 4, 4, 5, 6, 3, 11, 8, 8, 3, 6, 5, 7, 7, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [8, 5, 6, 3, 4, 5, 4, 5, 8, 5, 9, 5, 4, 5, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [7, 5, 12, 4, 6, 7, 4, 8, 5, 6, 4, 5, 5, 9, 5, 7, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 5, 5, 4, 3, 5, 17, 6, 5, 6, 4, 5, 10, 7, 5, 8, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [6, 8, 6, 4, 4, 3, 8, 7, 3, 3, 5, 6, 8, 2, 6, 281]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 7, 4, 6, 8, 6, 3, 5, 3, 3, 8, 6, 6, 4, 6, 567]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 5, 3, 5, 7, 4, 4, 7, 6, 6, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [7, 6, 6, 6, 8, 4, 7, 4, 6, 5, 4, 5, 5, 4, 5, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 4, 4, 4, 5, 8, 3, 6, 5, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 6, 4, 5, 5, 5, 4, 7, 7, 5, 7, 8, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [2, 5, 5, 4, 4, 4, 5, 5, 6, 3, 4, 4, 4, 5, 4, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 6, 5, 5, 5, 4, 5, 4, 34, 6, 7, 3, 5, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 6, 6, 4, 7, 4, 6, 8, 4, 4, 4, 7, 50, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 5, 6, 4, 4, 4, 6, 6, 4, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 6, 6, 4, 5, 7, 6, 4, 4, 7, 8, 6, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [2, 5, 4, 5, 6, 4, 4, 7, 7, 5, 4, 6, 4, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [3, 6, 5, 5, 4, 5, 5, 6, 6, 4, 6, 4, 17, 5, 4, 8, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 5, 4, 5, 6, 6, 7, 5, 3, 5, 4, 4, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 6, 6, 4, 4, 8, 6, 5, 4, 6, 5, 7, 3, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 4, 4, 6, 7, 6, 5, 4, 5, 5, 4, 6, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 4, 3, 4, 6, 6, 6, 6, 4, 4, 7, 4, 4, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [6, 5, 3, 6, 5, 4, 6, 5, 4, 4, 6, 6, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 6, 4, 4, 6, 5, 6, 7, 5, 5, 4, 5, 6, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 5, 5, 5, 8, 4, 5, 6, 5, 6, 3, 4, 6, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 4, 4, 5, 6, 6, 4, 6, 5, 6, 137, 5, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [5, 6, 4, 5, 5, 4, 6, 3, 4, 6, 4, 5, 4, 7, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 4, 6, 3, 3, 4, 4, 4, 6, 4, 5, 5, 4, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 6, 6, 5, 4, 5, 7, 5, 3, 5, 4, 6, 5, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [3, 6, 4, 5, 6, 3, 4, 4, 5, 4, 18, 5, 8, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 6, 4, 4, 5, 165, 6, 5, 4, 6, 6, 5, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 4, 6, 6, 7, 6, 5, 5, 5, 4, 4, 5, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [3, 6, 2, 4, 4, 4, 2]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [6, 7, 6, 4, 4, 5, 6, 6, 4, 345, 4, 5, 6, 3, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [5, 5, 6, 4, 4, 5, 4, 7, 5, 5, 5, 4, 7, 6, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 5, 6, 6, 6, 4, 4, 6, 5, 4, 4, 5, 4, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 3, 5, 5, 6, 4, 3, 4, 3, 5, 3, 4, 3, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [2, 4, 5, 4, 6, 7, 6, 6, 4, 130, 5, 5, 6, 5, 4, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [5, 6, 5, 6, 4, 4, 6, 6, 3, 7, 5, 5, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [5, 5, 5, 4, 6, 4, 6, 4, 5, 10, 6, 4, 6, 4, 5, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [5, 5, 5, 4, 4, 6, 5, 4, 2, 5, 6, 6, 7, 6, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 4, 3, 4, 5, 5, 5, 7, 4, 5, 6, 4, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 4, 7, 6, 4, 5, 5, 6, 6, 7, 4, 4, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 6, 5, 5, 5, 4, 5, 6, 4, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 5, 6, 4, 5, 6, 3, 4, 6, 5, 4, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [3, 7, 4, 7, 3, 4, 5, 4, 4, 4, 4, 4, 5, 291]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 4, 4, 4, 4, 4, 6, 4, 5, 3, 4, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 9, 4, 4, 4, 6, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 5, 5, 7, 103, 6, 6, 6, 299, 4, 21, 3, 4, 34]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [5, 3, 5, 2, 5, 3, 4, 5, 7, 5, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 5, 4, 5, 49, 7, 5, 5, 5, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [4, 5, 3, 4, 6, 4, 3, 3, 3, 4, 5, 4, 4, 5, 5, 46, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [5, 6, 7, 7, 4, 5, 6, 7, 4, 5, 5, 3, 6, 6, 5, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [5, 7, 6, 5, 5, 4, 5, 5, 15, 4, 4, 4, 5, 7, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [5, 5, 3, 6, 7, 7, 5, 5, 3, 5, 4, 2, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [3, 5, 3, 5, 4, 4, 4, 4, 5, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [4, 7, 3, 5, 4, 3, 6, 3, 5, 5, 3, 6, 3, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 2, 4, 3, 310, 3, 3, 2, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 4, 5, 4, 5, 4, 4, 4, 34, 4, 3, 2]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 4, 3, 5, 3, 4, 3, 3, 3, 3, 5, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [2, 3, 11, 97, 3, 5, 3, 3, 3, 3, 3, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 2, 4, 3, 3, 3]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [4, 3, 2, 3, 5, 4, 3, 4, 4, 3, 3, 3, 4, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 67
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
