[tree.c:829] ERROR: maximal depth level exceeded
[tree.c:1026] ERROR: Error <-16> in function call
[scip_branch.c:1028] ERROR: Error <-16> in function call
[cons_sos1.c:5963] ERROR: Error <-16> in function call
[cons_sos1.c:6097] ERROR: Error <-16> in function call
[cons_sos1.c:9415] ERROR: Error <-16> in function call
[cons.c:3454] ERROR: Error <-16> in function call
[solve.c:3406] ERROR: Error <-16> in function call
[solve.c:4314] ERROR: Error <-16> in function call
[solve.c:4996] ERROR: Error <-16> in function call
[scip_solve.c:2792] ERROR: Error <-16> in function call
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iCHOv1_DG44
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iCHOv1_DG44
----------------------------------
number of metabolites : 2751
number of reactions : 3942
number of genes : 1184

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 79
max_cuts = 39
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 3942 flux variables and 7297 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 4, 3, 3, 6, 4, 4, 6, 19, 2, 189, 4, 447, 4, 361, 4, 6, 4, 4, 6, 7, 4, 7, 6, 110, 4, 4, 4, 4, 5, 2, 5, 5, 10, 41, 7, 5, 8, 6, 8]
length(C_list) = 39
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 5, 2, 2, 5, 4, 5, 5, 382, 3, 5, 3, 3, 5, 5, 4, 4, 4, 4, 11, 23, 4, 10, 8, 5, 7, 4, 6, 5, 4, 5, 4, 30, 5, 4, 8, 6, 5, 9, 6]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 4, 30, 3, 4, 4, 5, 4, 156, 6, 5, 6, 5, 3, 3, 5, 258, 5, 4, 5, 4, 4, 5, 8, 6, 3, 95, 8, 6, 86, 6, 4, 7, 5, 15, 4, 4, 56, 6, 6, 7, 89]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 6, 4, 4, 6, 3, 4, 4, 4, 4, 345, 5, 7, 8, 4, 3, 6, 4, 4, 4, 59, 117, 5, 9, 8, 11, 13, 4, 4, 4, 3, 161, 4, 5, 14, 4, 4, 6, 63, 6, 7]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 5, 3, 3, 7, 6, 6, 4, 20, 3, 6, 4, 310, 5, 6, 11, 4, 70, 4, 6, 11, 3, 29, 5, 12, 10, 8, 11, 9, 5, 8, 5, 8, 4, 5, 5, 281, 7, 166, 34, 20, 8, 8, 5, 214, 6]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [6, 5, 5, 3, 4, 3, 9, 6, 8, 229, 6, 5, 4, 7, 3, 5, 5, 5, 5, 4, 4, 5, 6, 6, 8, 4, 7, 9, 5, 4, 3, 3, 4, 4, 11, 11, 11, 8, 3, 8, 13, 25, 5, 7, 5, 142, 8]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 6, 9, 5, 4, 4, 3, 3, 6, 5, 16, 306, 4, 8, 27, 8, 4, 4, 7, 6, 24, 4, 7, 3, 11, 6, 7, 7, 10, 144, 6, 5, 196, 9, 5, 8, 7]
length(C_list) = 37
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [5, 4, 7, 8, 3, 8, 6, 10, 4, 6, 4, 6, 4, 5, 10, 8, 4, 6, 10, 4, 9, 6, 10, 4, 4, 7, 8, 7, 9, 6, 4, 7, 4, 5, 3, 15, 3, 8, 4, 28, 6, 3, 9, 6, 5, 4]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 3, 3, 7, 4, 5, 428, 4, 4, 6, 6, 4, 4, 192, 7, 5, 4, 5, 3, 6, 9, 6, 5, 15, 6, 21, 5, 8, 5, 4, 5, 9, 4, 5, 4, 7, 382, 8, 5, 5, 8, 6]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 7, 7, 5, 9, 3, 4, 11, 6, 7, 4, 6, 8, 6, 4, 181, 4, 69, 5, 4, 7, 8, 38, 47, 4, 18, 9, 5, 6, 4, 6, 217, 7, 331, 7, 4, 9, 4, 4, 5, 6, 5, 6, 3]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 3, 3, 5, 142, 3, 4, 4, 4, 6, 4, 259, 16, 4, 4, 476, 12, 5, 4, 4, 6, 4, 3, 5, 12, 5, 5, 5, 6]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [5, 8, 5, 4, 4, 3, 7, 4, 3, 5, 9, 10, 11, 4, 4, 4, 6, 9, 4, 4, 8, 27, 21, 8, 7, 6, 9, 9, 5, 4]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 6, 4, 3, 8, 6, 10, 10, 9, 5, 13, 9, 4, 7, 87, 4, 557, 4, 7, 6, 5, 25, 3, 291, 4, 163, 6, 7, 5, 6, 5, 6, 4, 4, 5, 5, 4, 133, 6, 10, 19, 5, 27, 5]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [7, 8, 4, 4, 6, 4, 4, 6, 17, 6, 5, 4, 6, 7, 4, 8, 78, 8, 7, 4, 9, 5, 11, 5, 21, 5, 7, 4, 3, 12, 8, 5, 23, 3, 4, 5, 4, 6, 10, 10, 4, 12, 4, 4, 4, 5, 4, 5, 7, 174, 5, 16, 5]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [7, 6, 4, 3, 4, 5, 4, 5, 4, 5, 6, 6, 8, 4, 267, 15, 6, 5, 50, 8, 7, 4, 7, 5, 6, 4, 4, 4, 5, 5, 11, 3, 4, 6, 3]
length(C_list) = 35
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
ErrorException("SCIPsolve(o) yielded SCIP code SCIP_MAXDEPTHLEVEL")
