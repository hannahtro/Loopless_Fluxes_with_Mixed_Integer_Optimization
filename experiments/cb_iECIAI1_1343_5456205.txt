ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iECIAI1_1343
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iECIAI1_1343
----------------------------------
number of metabolites : 1968
number of reactions : 2765
number of genes : 1343

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 138
max_cuts = 14
(indicator, big_m) = (false, true)
BIG M ADDED
model with 2765 flux variables and 5139 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 2, 2, 2, 2, 3, 2, 2, 6, 2, 2, 35, 9, 2, 2, 2, 2, 3, 9, 7, 5, 3, 51, 98, 8, 5, 3, 3, 4, 3, 7, 3, 3, 3, 45, 4, 5]
length(C_list) = 14
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [5, 4, 6, 3, 3, 17, 3, 6, 5, 23, 2, 2, 3, 4, 4, 4, 58, 3, 4, 8, 7, 3, 4, 3, 4, 4, 3, 4, 125, 52, 2, 4, 5, 3, 3, 2, 8, 5, 4, 5, 4, 3, 5, 3, 50, 4, 4, 5, 3, 3, 6, 6, 3, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 7, 3, 3, 4, 5, 8, 3, 10, 11, 4, 6, 8, 3, 4, 5, 5, 5, 3, 5, 3, 6, 16, 4, 15, 7, 4, 4, 7, 9, 6, 87, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 3, 5, 5, 3, 4, 4, 4, 4, 3, 5, 18, 8, 5, 4, 169, 9, 4, 3, 8, 5, 6, 10, 8, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 6, 4, 4, 9, 3, 6, 4, 5, 4, 8, 223, 7, 6, 8, 6, 4, 8, 8, 2, 9, 164, 217, 8, 6, 10, 7, 6, 9, 5, 13, 9, 5, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 5, 3, 4, 5, 2, 4, 3, 4, 3, 4, 3, 5]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 5, 6, 4, 3, 178, 4, 87, 6, 4, 8, 6, 4, 13, 58, 8, 4, 46, 34, 7, 8, 208, 4, 11, 6, 7, 18, 15, 7, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [3, 2, 2, 4, 4, 13, 6, 39, 4, 2, 4, 2, 4]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [7, 7, 7, 10, 8, 7, 11, 7, 212, 11, 7, 12, 22, 7, 8, 16, 9, 10, 8, 9, 6, 18, 7, 11, 7, 17, 8, 12, 56, 16, 31, 7, 10, 8, 8, 7, 7, 8, 10, 8, 66, 13, 53, 7, 53, 9, 8, 8, 15, 12, 8, 16, 8, 11, 13, 7, 8, 11, 10, 7, 10, 7, 18, 9, 9, 21, 13, 16, 56, 7, 11, 9, 8, 283, 53, 6, 53, 10, 63, 14, 6, 22, 6, 7, 24, 10, 10, 52, 11, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [2, 90, 14]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 3, 4, 5, 9, 5, 17, 9, 6, 7, 7, 5, 24, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 4, 4, 7, 4, 5, 5, 4, 6, 4, 4, 4, 25, 3, 7, 5, 9, 7, 7, 4, 8, 9, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 11, 4, 142, 8, 9, 8, 6, 5, 3, 9, 16, 4, 9, 7, 6, 5, 9, 5, 7, 7, 45, 5, 4, 10, 4, 5, 166, 7, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 4, 6, 4, 4, 5, 5, 6, 6, 4, 3, 5, 4, 9, 5, 15, 5, 7, 5, 5, 7, 4, 10, 5, 8, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [5, 6, 6, 2, 3, 6, 6, 7, 120, 6, 4, 7, 8, 6, 6, 6, 16, 8, 233]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [7, 7, 16, 9, 8, 63, 7, 8, 199, 9, 11, 8, 9, 10, 9, 4, 8, 8, 6, 13, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [17, 11, 7, 15, 17, 8, 11, 9, 7, 8, 7, 43, 9, 10, 8, 11, 16, 9, 12, 13, 8, 44, 47, 13, 7, 18, 9, 9, 46, 10, 8, 7, 110, 47, 56, 8, 11, 8, 8, 17, 8, 7, 10, 8, 8, 18, 29, 8, 10, 11, 9, 21, 13, 16, 48, 9, 12, 8, 37, 15, 22, 14, 35, 23, 7, 34, 10, 9, 11, 10, 44]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 6, 4, 7, 8, 155, 6, 4, 28, 4, 4, 8, 6, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [4, 5]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 3, 4, 8, 6, 5, 8, 5, 4, 4, 4, 6, 7, 6, 12, 4, 8, 4, 4, 4, 56, 15, 73, 167, 5, 19, 7, 5, 6, 57, 8, 5, 14, 11, 14, 7, 5, 8, 4, 9, 7, 6, 18, 10, 4, 14, 56, 130, 6, 4, 4, 4, 5, 5, 4, 4, 4, 56, 4, 15, 11, 8, 4, 37, 5, 10, 17, 7, 8, 7, 128]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [5, 6, 19, 5, 5, 8, 3, 42, 5, 8, 4, 4, 13, 6, 7, 5, 6, 4, 12, 10, 4, 18, 4, 7, 10, 4, 5, 4, 7, 8, 5, 5, 15, 4, 4, 4, 4, 8, 6, 13, 5, 4, 8, 5, 13, 4, 16, 5, 4, 11, 4, 8, 6, 23, 10, 13, 6, 6, 14, 5, 5, 4, 5, 6, 6, 10, 10, 5, 4, 21, 9, 4, 4, 17, 7, 8, 8, 7, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [7, 5, 4, 5, 5, 7, 4, 5, 4, 5, 4, 4, 4, 13, 6, 7, 4, 6, 5, 13, 8, 4, 5, 14, 5, 5, 4, 7, 5, 4, 3, 4, 5, 4, 4, 8, 5, 6, 16, 5, 5, 4, 7, 4, 7, 6, 4, 5, 10, 6, 7, 5, 6, 22, 10, 13, 13, 6, 5, 5, 5, 5, 4, 5, 4, 14, 10, 5, 5, 5, 4, 4, 20, 7, 5, 6, 8, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 4, 4, 8, 5, 7, 6, 4, 5, 40, 3, 13, 121, 7, 53, 6, 6, 12, 4, 16, 4, 4, 4, 4, 4, 10, 5, 5, 4, 6, 4, 7, 7, 204, 35, 5, 4, 4, 4, 4, 5, 4, 5, 11, 5, 13, 216, 3, 10, 14, 10, 4, 6, 5, 63, 78, 6, 19, 10, 13, 4, 6, 5, 4, 4, 22, 5, 14, 14, 4, 4, 5, 5, 4, 22, 7, 5, 5, 8, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [5, 5, 6, 5, 8, 11, 10, 23, 10, 5, 4, 14, 6, 7, 5, 6, 5, 12, 5, 8, 5, 12, 4, 6, 5, 5, 16, 5, 5, 7, 5, 5, 32, 11, 5, 4, 10, 5, 6, 8, 5, 4, 13, 5, 102, 4, 9, 7, 7, 122, 7, 7, 11, 3, 4, 6, 18, 11, 5, 13, 39, 6, 7, 5, 5, 6, 16, 6, 5, 6, 33, 10, 11, 5, 5, 5, 4, 5, 4, 21, 114, 6, 9, 8, 7, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [7, 5, 4, 6, 4, 10, 7, 6, 3, 197, 5, 4, 16, 5, 8, 4, 5, 4, 11, 4, 9, 5, 4, 6, 5, 6, 4, 13, 4, 4, 8, 7, 7, 7, 6, 4, 71, 5, 4, 5, 24, 23, 5, 4, 29, 4, 4, 6, 8, 4, 3, 8, 4, 4, 9, 4, 4, 6, 5, 18, 9, 4, 12, 4, 27, 5, 4, 6, 7, 6, 4, 5, 5, 4, 5, 17, 9, 5, 3, 4, 3, 21, 6, 4, 12, 7, 6, 3]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [4, 6, 3, 10, 4, 6, 5, 5, 6, 3, 5, 17, 3, 5, 5, 4, 34, 6, 6, 9, 6, 14, 11, 4, 7, 20, 4, 7, 3, 5, 4, 13, 6, 6, 4, 16, 17, 6, 12, 3, 5, 6, 5, 102, 163, 4, 3, 12, 91, 4, 3, 8, 6, 4, 5, 3, 5, 5, 16, 4, 9, 7, 29, 8, 9, 4, 20, 5, 6, 6, 6, 71]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [12, 6, 4, 5, 5, 8, 15, 5, 7, 5, 6, 7, 4, 10, 5, 4, 4, 10, 7, 8, 28, 53, 52, 6, 2, 2, 7, 6, 4, 3, 8, 5, 6, 6, 5, 4, 4, 5, 6, 5, 6, 15, 15, 13, 4, 10, 5, 34, 5, 7, 6, 5, 8, 14, 6, 4, 9, 3, 4, 8, 5, 10, 4, 5, 4, 5, 6, 5, 4, 4, 5, 11, 10, 9, 3, 5, 6, 6, 7, 5, 15, 5, 6, 7, 5, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [5, 5, 5, 6, 7, 92, 5, 4, 4, 4, 3, 4, 5, 6, 6, 5, 5, 12, 4, 5, 5, 3, 31, 7, 5, 7, 4, 7, 5, 10, 6, 5, 7, 84, 4, 6, 4, 6, 6, 4, 6, 4, 19, 5, 9, 13, 4, 5, 7, 4, 39, 5, 11, 6, 12, 7, 7, 5, 5, 19, 10, 4, 13, 5, 11, 8, 6, 5, 6, 5, 6, 4, 6, 16, 12, 5, 9, 10, 32, 6, 8, 30, 18, 7, 8, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [6, 5, 6, 5, 10, 5, 4, 6, 6, 43, 6, 6, 4, 5, 15, 3, 7, 26, 5, 5, 11, 7, 13, 5, 8, 5, 4, 8, 8, 5, 10, 11, 5, 5, 5, 6, 4, 18, 5, 7, 25, 5, 4, 19, 17, 5, 13, 3, 7, 4, 4, 5, 5, 7, 3, 6, 5, 10, 8, 8, 6, 5, 21, 9, 5, 13, 6, 8, 5, 6, 7, 4, 47, 4, 6, 8, 5, 5, 17, 12, 9, 4, 5, 4, 60, 43, 6, 5, 5, 7, 10, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [6, 6, 3, 6, 5, 7, 3, 6, 7, 3, 8, 4, 11, 7, 6, 4, 5, 4, 10, 3, 4, 3, 4, 6, 6, 3, 5, 3, 7, 5, 6, 6, 4, 6, 6, 8, 6, 3, 6, 7, 6, 3, 6, 6, 51, 6, 6, 6, 10, 4, 8, 5, 5, 5, 6, 6, 5, 10, 6, 4, 6, 3, 9, 4, 5, 6, 5, 5, 4, 10, 4, 4, 6, 68, 7, 7, 3, 4, 10, 8, 8, 4, 5, 4, 3, 15, 5, 10, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 6, 4, 7, 39, 6, 7, 5, 6, 7, 6, 6, 5, 4, 6, 11, 3, 10, 4, 4, 3, 7, 31, 5, 4, 7, 4, 5, 34, 6, 4, 5, 4, 6, 6, 5, 4, 8, 17, 17, 6, 13, 5, 6, 7, 31, 3, 4, 7, 4, 6, 7, 17, 7, 5, 17, 9, 12, 5, 8, 8, 10, 4, 4, 4, 3, 3, 12, 8, 27, 4, 31, 4, 15, 9, 3, 98, 11, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [5, 5, 4, 5, 5, 4, 7, 3, 3, 6, 4, 8, 8, 7, 15, 11, 6, 3, 5, 5, 11, 5, 5, 5, 8, 5, 4, 5, 8, 15, 5, 7, 6, 6, 5, 6, 4, 4, 7, 6, 4, 5, 5, 4, 3, 3, 6, 7, 4, 6, 5, 12, 3, 3, 3, 7, 8, 4, 10, 9, 4, 7, 4, 10, 17, 9, 4, 5, 5, 6, 6, 5, 5, 5, 4, 10, 144, 4, 4, 10, 7, 5, 4, 29, 4, 4, 16, 4, 6, 5, 7, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [16, 5, 7, 5, 4, 6, 7, 7, 5, 4, 6, 4, 6, 8, 5, 10, 6, 5, 50, 7, 5, 13, 7, 6, 15, 5, 6, 5, 10, 3, 4, 5, 15, 3, 6, 4, 5, 3, 5, 4, 8, 8, 10, 41, 5, 18, 19, 9, 13, 7, 10, 5, 4, 8, 11, 15, 6, 8, 4, 16, 8, 6, 9, 6, 4, 3, 6, 4, 9, 8, 7, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [6, 7, 5, 4, 4, 4, 7, 4, 3, 4, 4, 7, 7, 10, 4, 6, 3, 4, 5, 5, 26, 54, 5, 12, 4, 7, 5, 13, 4, 5, 6, 6, 5, 8, 6, 7, 6, 5, 5, 6, 18, 19, 5, 12, 8, 6, 3, 4, 5, 9, 4, 4, 9, 7, 7, 3, 21, 9, 12, 5, 7, 8, 5, 5, 4, 13, 6, 4, 5, 5, 7, 24, 9, 7, 6, 11, 7, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [7, 5, 8, 4, 16, 5, 7, 4, 3, 6, 4, 3, 12, 12, 6, 7, 5, 3, 10, 56, 7, 3, 6, 6, 3, 9, 7, 8, 6, 5, 6, 6, 104, 8, 5, 6, 4, 5, 4, 5, 5, 7, 4, 8, 6, 14, 8, 3, 5, 14, 4, 6, 14, 4, 6, 10, 4, 6, 3, 5, 5, 9, 5, 13, 8, 22, 5, 6, 12, 4, 5, 5, 4, 4, 12, 5, 6, 10, 8, 7, 5, 3, 6, 26, 18, 5, 6, 11, 9, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [13, 6, 4, 5, 5, 8, 5, 7, 5, 5, 9, 4, 7, 5, 5, 5, 6, 19, 11, 4, 5, 5, 5, 7, 5, 8, 5, 7, 9, 5, 6, 9, 8, 3, 7, 6, 5, 7, 5, 4, 3, 196, 5, 8, 6, 5, 13, 8, 5, 43, 5, 12, 12, 9, 4, 6, 8, 3, 7, 7, 10, 13, 4, 5, 6, 11, 10, 7, 28, 3, 14, 6, 6, 5, 5, 28, 4, 9, 6, 5, 5, 7, 11, 7, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [5, 15, 9, 22, 4, 6, 9, 5, 7, 15, 17, 6, 4, 24, 5, 19, 6, 7, 8, 11, 6, 33, 6, 10, 31, 6, 4, 13, 13, 5, 5, 6, 5, 4, 29, 7, 3, 6, 5, 7, 6, 101, 7, 4, 6, 12, 6, 11, 7, 5, 13, 6, 4, 6, 8, 7, 6, 7, 10, 6, 10, 4, 6, 7, 6, 42, 10, 12, 14, 6, 10, 13, 6, 11, 5, 5, 8, 6, 5, 6, 9, 5, 6, 8, 9, 30, 8, 4, 29, 6, 18, 9, 5, 11, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [10, 5, 3, 4, 4, 7, 68, 4, 5, 6, 5, 9, 6, 6, 3, 18, 15, 34, 4, 12, 4, 14, 9, 5, 10, 8, 9, 6, 13, 4, 5, 6, 5, 6, 5, 6, 6, 4, 9, 5, 4, 5, 6, 5, 5, 5, 18, 18, 10, 3, 22, 6, 8, 5, 5, 4, 5, 40, 8, 5, 5, 12, 5, 6, 6, 5, 9, 13, 13, 5, 4, 6, 5, 5, 4, 5, 23, 10, 8, 6, 8, 7, 16, 6, 5, 6, 10, 7, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 9, 5, 8, 7, 14, 12, 9, 6, 5, 9, 5, 5, 10, 12, 10, 4, 6, 13, 7, 3, 4, 15, 4, 5, 6, 14, 12, 6, 6, 3, 4, 9, 4, 18, 17, 14, 3, 7, 5, 6, 7, 12, 8, 4, 5, 7, 18, 7, 65, 5, 6, 6, 11, 6, 11, 12, 6, 17, 4, 14, 13, 14, 11, 9, 5, 7, 6, 36, 18, 101, 5, 18, 12, 9, 33]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 6, 7, 7, 4, 6, 6, 6, 3, 4, 8, 29, 3, 4, 7, 11, 6, 6, 4, 6, 6, 6, 4, 4, 6, 6, 7, 6, 7, 7, 8, 12, 7, 8, 6, 6, 5, 7, 4, 6, 9, 3, 5, 5, 18, 7, 12, 7, 8, 5, 7, 4, 6, 11, 7, 8, 8, 5, 6, 4, 7, 7, 152, 8, 7, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [7, 11, 3, 17, 7, 7, 6, 10, 5, 4, 7, 7, 5, 101, 6, 20, 5, 9, 9, 12, 4, 4, 4, 6, 6, 4, 9, 7, 5, 9, 291, 14, 199, 5, 3, 11, 3, 5, 12, 7, 4, 4, 5, 6, 4, 28, 6, 22, 7, 7, 11, 4, 5, 6, 5, 13, 11, 5, 12, 13, 4, 8, 6, 30, 4, 6, 18, 7, 4, 69, 4, 5, 4, 8, 4, 11, 8, 8, 7, 4, 5, 4, 5, 12, 6, 6, 6, 6, 8, 17, 7, 6, 7, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [10, 4, 7, 8, 9, 7, 5, 6, 4, 5, 6, 17, 5, 5, 6, 10, 4, 8, 11, 6, 7, 4, 5, 12, 6, 5, 65, 9, 6, 4, 8, 4, 12, 115, 3, 8, 4, 11, 4, 6, 5, 4, 11, 6, 5, 5, 18, 9, 12, 6, 6, 8, 5, 4, 4, 5, 5, 5, 8, 8, 5, 5, 4, 6, 15, 9, 7, 11, 7, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [6, 4, 8, 6, 3, 8, 4, 5, 4, 13, 10, 4, 4, 17, 6, 7, 5, 6, 12, 14, 6, 16, 4, 8, 9, 4, 6, 4, 7, 5, 6, 7, 4, 18, 7, 6, 16, 4, 4, 7, 7, 4, 13, 6, 7, 10, 5, 6, 6, 6, 18, 10, 12, 4, 4, 8, 128, 6, 5, 7, 14, 6, 5, 10, 11, 4, 20, 6, 16, 9, 4, 11, 7, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 6, 5, 8, 11, 7, 4, 5, 8, 6, 6, 4, 9, 5, 6, 10, 8, 11, 4, 4, 6, 4, 4, 17, 5, 5, 5, 5, 6, 8, 5, 5, 5, 9, 4, 13, 8, 7, 15, 7, 9, 7, 8, 6, 12, 12, 5, 12, 5, 7, 12, 7, 11, 9, 8, 18, 6, 16, 6, 15, 7, 7, 9, 11, 6, 10, 13, 11, 6, 9, 6, 9, 11, 8, 7, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [7, 4, 6, 15, 5, 5, 7, 8, 4, 5, 4, 4, 10, 26, 26, 21, 10, 4, 14, 4, 5, 5, 4, 6, 6, 16, 4, 8, 13, 5, 3, 14, 8, 5, 6, 4, 9, 8, 4, 17, 17, 4, 88, 4, 4, 15, 7, 7, 8, 11, 11, 6, 6, 15, 6, 4, 4, 6, 12, 9, 12, 8, 6, 9, 5, 5, 8, 6, 5, 14, 7, 6, 7, 9, 10, 17, 18, 8, 5, 11, 7, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 7, 58, 9, 8, 8, 9, 4, 4, 7, 4, 10, 4, 13, 4, 12, 10, 11, 4, 4, 13, 7, 10, 7, 8, 6, 5, 5, 12, 9, 7, 4, 6, 13, 11, 5, 7, 4, 4, 9, 102, 8, 8, 4, 14, 7, 19, 13, 12, 10, 6, 4, 6, 11, 5, 10, 9, 7, 5, 13, 4, 5, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [6, 6, 11, 6, 6, 8, 4, 7, 3, 6, 11, 5, 29, 24, 4, 10, 5, 11, 4, 5, 21, 5, 14, 11, 7, 2, 7, 4, 10, 5, 4, 8, 7, 5, 6, 10, 6, 5, 6, 20, 6, 4, 24, 244, 6, 5, 13, 5, 14, 14, 30, 7, 6, 12, 4, 5, 54, 7, 6, 12, 6, 18, 7, 5, 12, 4, 14, 68, 8, 4, 13, 9, 34, 10, 6, 13, 4, 7, 8, 4, 3, 5, 21, 8, 8, 10, 7, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [7, 5, 6, 11, 5, 9, 8, 5, 4, 5, 12, 4, 16, 4, 24, 29, 19, 5, 6, 4, 11, 8, 61, 4, 35, 12, 4, 6, 5, 18, 8, 5, 5, 5, 49, 4, 13, 13, 8, 4, 20, 6, 14, 4, 4, 6, 3, 6, 5, 10, 7, 14, 6, 7, 6, 4, 19, 5, 13, 6, 4, 12, 7, 5, 11, 11, 5, 5, 14, 14, 19, 5, 27, 7, 25, 18, 5, 7, 7, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [37, 6, 4, 14, 8, 43, 9, 7, 4, 10, 8, 5, 8, 28, 9, 23, 13, 10, 11, 9, 8, 13, 11, 11, 39, 10, 25, 10, 7, 5, 6, 8, 9, 21, 21, 13, 12, 9, 13, 7, 15, 5, 4, 6, 6, 137, 6, 6, 6, 10, 10, 5, 18, 5, 12, 5, 12, 8, 10, 9, 14, 23, 5, 6, 34, 6, 9, 7, 25, 6, 12, 6, 23, 6, 15, 7, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [8, 4, 5, 4, 9, 4, 7, 4, 6, 8, 10, 3, 5, 26, 29, 266, 12, 13, 11, 112, 13, 7, 4, 17, 6, 7, 4, 6, 7, 7, 4, 4, 6, 6, 4, 4, 10, 7, 7, 4, 10, 4, 17, 4, 7, 13, 6, 4, 9, 14, 4, 11, 4, 13, 4, 8, 12, 5, 5, 10, 13, 5, 150, 6, 13, 10, 8, 4, 7, 16, 6, 4, 7, 10, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [12, 5, 3, 7, 9, 4, 15, 9, 5, 9, 12, 8, 30, 26, 4, 8, 16, 7, 6, 3, 8, 3, 5, 22, 7, 4, 10, 6, 8, 6, 6, 4, 4, 7, 8, 4, 35, 5, 8, 18, 6, 9, 14, 14, 5, 8, 7, 9, 9, 11, 4, 18, 8, 5, 7, 9, 4, 7, 3, 20, 4, 6, 13, 11, 5, 7, 9, 12, 28, 7, 8, 199, 6, 15, 8, 5, 6, 12, 24, 6, 6, 142, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [7, 6, 5, 4, 34, 9, 8, 7, 13, 4, 4, 7, 9, 24, 7, 11, 4, 14, 5, 10, 6, 9, 4, 4, 5, 14, 11, 6, 14, 8, 4, 4, 6, 6, 30, 18, 6, 14, 5, 7, 6, 9, 7, 6, 13, 7, 4, 5, 18, 15, 11, 6, 13, 8, 4, 6, 4, 7, 19, 11, 7, 13, 6, 16, 9, 18, 51, 4, 13, 13, 8, 6, 5, 4, 10, 10, 6, 6, 10, 17, 9, 5, 6, 10, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [13, 14, 12, 13, 30, 7, 16, 14, 13, 15, 6, 18, 12, 9, 5, 11, 27, 6, 9, 10, 13, 12, 11, 12, 7, 8, 12, 54, 21, 12, 13, 7, 9, 11, 5, 10, 12, 9, 7, 8, 13, 3, 54, 12, 11, 20, 20, 7, 65, 27, 11, 7, 8, 8, 7, 9, 14, 7, 6, 18, 7, 13, 8, 8, 20, 5, 15, 54, 13, 13, 7, 7, 14, 5, 27, 54, 18, 65, 14, 9, 7, 5, 21, 5, 6, 9, 16, 11, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [4, 5, 9, 8, 4, 4, 7, 12, 4, 4, 3, 6, 88, 4, 31, 3, 11, 5, 5, 4, 7, 4, 11, 5, 4, 7, 6, 5, 9, 5, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [6, 9, 11, 12, 6, 7, 9, 4, 4, 7, 3, 18, 8, 4, 6, 7, 7, 19, 13, 6, 6, 4, 30, 6, 7, 9, 13, 13, 6, 6, 10, 8, 8, 5, 11, 4, 9, 19, 7, 7, 14, 8, 6, 8, 11, 10, 7, 9, 11, 6, 20, 11, 7, 19, 11, 11, 13, 5, 162, 13, 10, 5, 7, 9, 6, 6, 5, 10, 8, 11, 8, 30, 10, 7, 13, 5, 10, 11, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [6, 17, 15, 8, 14, 28, 4, 5, 12, 7, 8, 31, 10, 22, 7, 16, 7, 20, 8, 21, 20, 7, 7, 10, 16, 27, 15, 8, 11, 4, 6, 26, 7, 88, 14, 10, 6, 19, 7, 16, 23, 15, 7, 10, 10, 9, 11, 15, 7, 8, 6, 8, 7, 10, 13, 11, 77, 108, 16, 56, 9, 9, 18, 11, 10, 11, 7, 6, 18, 23, 28, 19, 7, 20, 15, 19, 26, 16, 8, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [11, 4, 3, 15, 9, 4, 10, 4, 9, 4, 7, 7, 9, 57, 8, 4, 17, 8, 4, 4, 5, 5, 6, 7, 7, 190, 9, 7, 4, 6, 7, 4, 7, 10, 7, 25, 8, 5, 4, 8, 11, 12, 20, 7, 21, 7, 4, 17, 7, 6, 10, 15, 15, 4, 4, 22, 85, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [4, 6, 11, 41, 40, 18, 12, 4, 10, 4, 15, 6, 16, 15, 56, 4, 4, 27, 7, 4, 8, 55, 11, 14, 4, 4, 14, 12, 11, 5, 8, 14, 11, 16, 27, 26, 17, 82, 11, 144, 11, 11, 35, 15, 15, 17, 21, 15, 23, 14, 22, 29, 18, 15, 5, 36, 9, 29, 25, 56, 36, 17, 11, 9, 16, 25]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [4, 4, 34, 4, 9, 5, 4, 7, 14, 7, 30, 8, 7, 6, 14, 4, 7, 7, 5, 4, 7, 5, 18, 7, 5, 9, 6, 9, 4, 6, 8, 6, 6, 9, 6, 5, 7, 6, 4, 4, 6, 7, 7, 4, 5, 9, 4, 8, 5, 6, 4, 9, 6, 6, 5, 6, 6, 4, 7, 9, 15, 9, 7, 5, 8, 4, 5, 5, 6, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [8, 6, 10, 14, 11, 19, 10, 8, 13, 12, 8, 9, 8, 18, 14, 16, 11, 42, 3, 7, 6, 10, 13, 14, 58, 14, 13, 60, 13, 13, 11, 74, 12, 12, 46, 6, 13, 13, 13, 8, 6, 13, 10, 12, 20, 6, 10, 12, 24, 13, 8, 12, 14, 5, 12, 12, 8, 12, 55, 12, 8, 8, 12, 16, 11, 15, 12, 6, 35, 6, 17, 7, 12, 7, 14, 25, 10, 10, 13, 14, 15, 9, 21, 19, 10, 17, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [4, 3, 13, 9, 8, 42, 6, 8, 8, 6, 6, 4, 8, 7, 4, 15, 5, 4, 6, 16, 10, 6, 10, 38, 4, 18, 8, 5, 18, 5, 7, 11, 13, 9, 11, 4, 11, 4, 7, 8, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [4, 8, 11, 8, 8, 8, 7, 4, 8, 7, 8, 9, 12, 13, 8, 8, 4, 9, 14, 146, 25, 9, 6, 18, 22, 9, 42, 12, 5, 99, 5, 8, 9, 12, 289, 8, 20, 6, 9, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [4, 15, 4, 4, 4, 13, 5, 4, 7, 4, 35, 4, 6, 4, 88, 4, 4, 4, 8, 4, 32, 10, 6, 30, 13, 6, 6, 8, 9, 5, 33, 12, 5, 4, 31, 9, 16, 23, 9, 49, 9, 34]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [13, 7, 5, 50, 8, 4, 6, 4, 9, 7, 6, 33, 10, 19, 7, 6, 5, 11, 13, 11, 7, 5, 7, 6, 5, 5, 6, 12, 6, 7, 6, 7, 7, 5, 6, 4, 5, 9, 6, 13, 7, 5, 15, 6, 8, 8, 7, 13, 9, 6, 12, 6, 10, 6, 6, 12, 10, 13, 11, 11, 5, 81, 8, 12, 12, 12, 12, 20, 8, 10, 9, 8, 8, 5, 8, 16, 10, 12, 12, 9, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [5, 4, 9, 30, 5, 7, 6, 3, 4, 10, 21, 23, 11, 4, 11, 9, 6, 7, 25, 10, 10, 41, 149, 7, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [8, 16, 16, 13, 8, 15, 9, 4, 4, 9, 26, 12, 20, 30, 7, 8, 15, 14, 7, 18, 6, 15, 15, 16, 8, 8, 6, 17, 12, 10, 20, 20, 6, 16, 7, 10, 7, 8, 13, 7, 7, 12, 13, 7, 6, 9, 15, 6, 11, 12, 6, 10, 13, 16, 14, 12, 7, 10, 12, 16, 11, 30, 15, 18, 6, 15, 6, 8, 19, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [13, 5, 13, 4, 4, 9, 4, 5, 7, 3, 6, 8, 7, 6, 5, 8, 6, 36, 11, 4, 16, 5, 5, 6, 9, 6, 4, 14, 5, 5, 5, 5, 9, 6, 3, 14, 4, 3, 4, 7, 4, 10, 19, 6, 6, 7, 4, 7, 18, 5, 107, 4, 35, 13, 8, 12, 6, 15, 39, 4, 30, 21, 9, 18, 7, 39]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [12, 7, 7, 5, 12, 13, 7, 3, 10, 5, 10, 8, 27, 8, 21, 12, 11, 10, 9, 8, 41, 9, 3, 9, 9, 9, 17, 7, 4, 9, 7, 12, 8, 4, 8, 8, 7, 7, 4, 10, 7, 19, 13, 8, 6, 9, 13, 8, 9, 11, 10, 9, 12, 20, 15, 9, 7, 4, 7, 13, 9, 12, 8, 8, 10, 11, 5, 14, 8, 6, 7, 20, 7, 6, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [4, 9, 4, 6, 5, 3, 5, 4, 8, 5, 4, 61, 8, 4, 4, 4, 6, 7, 4, 19, 6, 13, 5, 13, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [17, 13, 17, 13, 10, 14, 16, 10, 86, 14, 13, 16, 25, 14, 40, 18, 49, 13, 12, 97, 14, 54, 11, 13, 15, 16, 32, 11, 16, 10, 18, 11, 16, 13, 14, 13, 14, 13, 12, 11, 10, 23, 14, 16, 14, 10, 13, 37, 13, 21, 13, 17, 14, 18, 32, 13, 13, 12, 12, 24, 14, 37, 10, 37, 12, 14, 19, 49, 13, 15, 11, 67, 28, 31, 16, 14, 20, 14, 12, 14, 15, 50, 14, 23, 49, 16, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [17, 4, 9, 7, 6, 13, 6, 13, 12, 15, 7, 13, 18, 15, 9, 12, 14, 17, 16, 11, 16, 9, 11, 9, 56, 9, 5, 8, 14, 17, 13, 25, 13, 20, 13, 8, 7, 13, 7, 10, 11, 32, 16, 18, 13, 17, 13, 14, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [8, 20, 4, 9, 15, 26, 5, 12, 5, 26, 5, 13, 39, 14, 7, 12, 24, 7, 5, 12, 28, 14, 13, 17, 11, 9, 37, 6, 18, 16, 11, 17, 6, 16, 23, 15, 22, 25, 9, 12, 61, 10, 25, 15, 11, 22, 16, 5, 8, 8, 21, 17, 17, 45, 25, 5, 9, 7, 14, 21, 26, 5, 16, 5, 16, 5, 20, 6, 5, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 13, 7, 66, 32, 6, 6, 28, 67, 5, 11, 4, 5, 66, 64, 15, 5, 33, 4, 30, 14, 30, 22, 8, 6, 5, 6, 28, 4, 63, 52, 6, 6, 33, 6, 34, 30, 16, 63, 6, 40, 6, 5, 39, 16, 33, 74, 10, 29, 6, 33, 8, 14, 16, 16, 16, 59, 17, 4, 15, 30, 52]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [14, 11, 15, 24, 5, 36, 18, 3, 27, 23, 14, 16, 9, 20, 19, 33, 15, 12, 14, 66, 12, 38, 4, 12, 181, 17, 25, 24, 6, 12, 39, 21, 51, 36, 21, 13, 118, 5, 92, 8, 21, 13, 26, 9, 35, 7, 16, 28, 6, 13, 20, 13, 13, 6, 14, 7, 7, 20, 34, 27, 25, 21, 32, 11, 38, 231, 16, 40, 17, 37]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [6, 26, 6, 13, 15, 9, 25, 4, 7, 11, 7, 17, 16, 37, 34, 11, 6, 13, 6, 6, 11, 17, 12, 97, 16, 26, 7, 12, 25, 13, 16, 31, 11, 6, 7, 24, 12, 14, 6, 14, 23, 12, 24, 18, 18, 22, 13, 10, 14, 27, 19, 10, 18, 44, 19, 13, 8, 7, 7, 17, 41, 16, 13, 13, 11, 7, 4, 5, 6, 24, 16, 14, 9, 13, 13, 14, 8, 6, 11, 16, 11, 8, 4, 16, 10, 17, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [13, 5, 4, 34, 10, 6, 9, 14, 13, 5, 5, 21, 15, 6, 7, 6, 5, 8, 7, 13, 6, 20, 7, 12, 8, 4, 5, 5, 40, 94, 5, 9, 11, 5, 22, 16, 13, 13, 5, 5, 4, 7, 90, 14, 25, 11, 24, 11, 6, 3, 73, 10, 5, 12, 7, 21, 13, 23, 14, 7, 14, 7, 5, 80, 25, 38, 8, 15, 15, 11, 9, 13, 15, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [19, 4, 4, 4, 4, 23, 7, 4, 6, 4, 14, 4, 12, 3, 3, 10, 11, 4, 12, 12, 4, 15, 7, 5, 4, 4, 15, 108, 25, 4, 23, 14, 4, 9, 8, 9, 9, 5, 5, 4, 19, 3, 7, 5, 8, 12, 14, 4, 11, 42, 10, 11, 10, 8, 11, 11, 12, 8, 75, 11, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [12, 20, 8, 4, 22, 7, 5, 4, 5, 4, 11, 4, 5, 16, 5, 5, 14, 9, 4, 4, 3, 8, 4, 6, 5, 6, 13, 7, 4, 11, 8, 138, 7, 9, 15, 5, 15, 7, 21, 7, 23, 20, 5, 8, 11, 8, 13, 28]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [8, 9, 10, 13, 29, 35, 18, 4, 4, 9, 6, 10, 26, 9, 37, 169, 6, 60, 8, 10, 10, 5, 10, 47, 7, 11, 9, 6, 18, 8, 36, 5, 13, 32, 6, 9, 11, 5, 10, 27, 9, 12, 13, 11, 10, 15, 8, 41, 9, 16, 27, 9, 7, 8, 7, 10, 12, 37, 42, 9, 10, 8, 9, 9, 43, 27, 15, 29]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [17, 6, 4, 4, 11, 5, 8, 4, 6, 5, 7, 7, 4, 15, 4, 36, 6, 4, 30, 7, 4, 5, 4, 7, 5, 6, 6, 6, 19, 6, 4, 35, 7, 17, 17, 12, 7, 14, 3, 4, 3, 8, 12, 14, 11, 6, 87, 4, 26, 6, 196, 4, 10, 6, 10, 6, 6, 13, 105, 8, 5, 88, 30, 9, 13, 6, 12, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 4, 4, 5, 4, 4, 11, 12, 16, 19, 9, 40, 11, 45, 12, 10, 7, 15, 4, 9, 8, 10, 10, 4, 4, 12, 9, 13, 15, 9, 6, 21, 13, 12, 16, 16, 7, 12, 10, 5, 32, 11, 17, 10, 11, 10, 17, 14, 9, 9, 11, 9, 6, 9, 11, 16, 17, 6, 11, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [10, 24, 13, 27, 15, 38, 12, 11, 61, 10, 37, 13, 17, 8, 44, 16, 26, 10, 14, 13, 16, 32, 14, 38, 13, 13, 25, 18, 16, 23, 13, 10, 14, 15, 24, 48, 48, 32, 14, 42, 48, 4, 28, 12, 13, 10, 20, 35, 18, 47, 45, 39, 33, 35, 31, 13, 43, 29, 13, 33, 13, 34, 10, 11, 25, 25, 26, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [14, 6, 8, 9, 64, 14, 6, 24, 10, 16, 11, 30, 3, 17, 7, 8, 16, 11, 6, 17, 12, 8, 12, 10, 18, 8, 11, 17, 11, 7, 8, 18, 12, 8, 15, 12, 28, 21, 7, 9, 7, 19, 6, 26, 82, 12, 15, 153, 12, 24, 7, 16, 12, 20, 223, 10, 20, 4, 17, 19, 13, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [11, 13, 14, 16, 15, 29, 21, 15, 15, 3, 20, 20, 15, 10, 16, 9, 12, 15, 11, 16, 16, 17, 89, 16, 16, 3, 11, 9, 9, 9, 7, 11, 15, 21, 17, 15, 7, 16, 13, 23, 18, 11, 17, 20, 17, 28, 15, 14, 16, 4, 15, 11, 24, 16, 10, 21, 33, 38, 28, 17, 52, 16, 15, 19, 14, 8, 13, 18, 17, 15, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [5, 8, 5, 7, 6, 6, 5, 3, 9, 4, 4, 2, 26, 7, 24, 7, 4, 29, 5, 4, 59, 6, 3, 7, 7, 4, 26, 6, 5, 4, 8, 3, 6, 6, 6, 4, 7, 6, 16, 16, 11, 9, 3, 5, 6, 25, 4, 5, 4, 10, 7, 4, 8, 5, 7, 46, 29, 5, 7, 12, 7, 4, 5, 8, 4, 6, 5, 9, 6, 6, 4, 19, 20, 5, 5, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [4, 5, 9, 4, 3, 9, 6, 6, 4, 9, 6, 4, 6, 43, 42, 36, 6, 6, 8, 6, 12, 6, 38, 7, 6, 9, 4, 5, 5, 12, 7, 8, 14, 6, 4, 6, 4, 4, 9, 7, 4, 19, 18, 6, 6, 14, 6, 8, 6, 9, 10, 22, 7, 5, 5, 11, 8, 6, 6, 30, 18, 13, 13, 6, 5, 9, 8, 6, 7, 15, 5, 15, 3, 6, 4, 15, 25, 14, 6, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [24, 19, 13, 10, 31, 17, 10, 6, 9, 13, 9, 7, 31, 31, 21, 37, 7, 9, 28, 8, 51, 19, 99, 26, 22, 9, 15, 65, 8, 12, 14, 8, 8, 31, 6, 8, 21, 50, 19, 42, 10, 4, 3, 8, 9, 14, 19, 6, 10, 28, 8, 6, 11, 7, 15, 9, 11, 11, 27, 5, 7, 7, 7, 17, 9, 17, 11, 10, 7, 9, 6, 13, 6, 28, 32, 14, 5, 17, 8, 14, 12, 7, 5, 12, 11, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [4, 18, 11, 4, 8, 16, 4, 47, 4, 8, 61, 29, 25, 21, 21, 3, 16, 22, 20, 13, 19, 4, 12, 21, 92, 10, 15, 8, 30, 20, 12, 5, 10, 13, 13, 21, 16, 9, 19, 6, 83, 12, 35, 84, 12, 4, 4, 26, 21, 22, 4, 15, 9, 12, 23, 18, 20, 17, 20, 12, 7, 19, 10, 18, 22]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [14, 4, 11, 8, 4, 9, 6, 9, 6, 4, 20, 15, 10, 7, 4, 7, 21, 32, 7, 12, 26, 8, 4, 10, 3, 10, 9, 8, 6, 5, 8, 15, 26, 20, 7, 12, 23, 6, 14, 12, 10, 9, 7, 26, 30, 6, 30, 99, 5, 48, 6, 22, 17, 4, 7, 10, 9, 27, 4, 6, 6, 21, 8, 7, 13, 20, 5, 25, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [14, 20, 7, 20, 9, 16, 4, 10, 4, 25, 5, 42, 7, 8, 11, 7, 8, 167, 16, 5, 33, 41, 11, 47, 4, 25, 12, 5, 21, 165, 4, 36, 20, 47, 4, 20, 20, 14, 5, 18, 6, 21, 21, 27, 221, 12, 4, 32, 17, 17, 47, 7, 12, 8, 47, 9, 19, 8, 35, 6, 4, 38, 25, 20, 21, 25, 5, 57, 40, 6, 36, 16, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [10, 24, 6, 21, 5, 12, 13, 30, 6, 8, 6, 10, 6, 4, 35, 22, 5, 14, 24, 8, 8, 8, 10, 46, 6, 5, 72, 24, 17, 78, 6, 26, 7, 27, 7, 8, 16, 72, 5, 5, 19, 19, 8, 25, 7, 38, 25, 18, 25, 11, 6, 29, 33, 35, 34, 34, 9, 18, 23, 72, 8, 28, 13, 34, 80, 26, 78, 25, 81, 23, 36, 15, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [33, 7, 12, 8, 6, 4, 9, 6, 8, 4, 4, 6, 10, 14, 8, 7, 7, 7, 8, 7, 8, 16, 9, 16, 5, 5, 8, 11, 11, 10, 7, 24, 16, 19, 18, 10, 13, 7, 9, 8, 19, 9, 6, 19, 8, 7, 7, 12, 8, 19, 13, 9, 4, 9, 20, 26, 5, 6, 6, 8, 6, 10, 10, 7, 8, 20, 7, 6, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [9, 18, 7, 7, 4, 13, 13, 11, 6, 4, 10, 9, 26, 23, 4, 26, 6, 8, 21, 15, 6, 13, 22, 16, 14, 6, 8, 16, 6, 31, 13, 15, 27, 13, 16, 4, 12, 6, 21, 11, 12, 7, 12, 14, 29, 11, 18, 21, 21, 23, 23, 28, 7, 19, 4, 15, 23, 5, 7, 10, 12, 13, 6, 5, 9, 9, 6, 23, 21, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [43, 6, 10, 11, 6, 30, 9, 9, 8, 6, 11, 6, 15, 19, 10, 7, 8, 21, 10, 8, 19, 8, 8, 49, 8, 13, 5, 12, 9, 7, 10, 6, 33, 50, 8, 61, 7, 49, 7, 8, 9, 21, 21, 16, 11, 16, 7, 15, 18, 8, 73, 8, 12, 3, 7, 4, 4, 5, 20, 6, 14, 49, 16, 8, 14, 15, 6, 11, 49, 17, 23, 49, 22, 50, 12, 10, 21, 23, 9, 33, 33, 10, 8, 24, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [5, 10, 11, 18, 8, 7, 14, 4, 4, 13, 9, 20, 12, 145, 29, 22, 8, 7, 11, 35, 22, 7, 8, 18, 8, 8, 9, 7, 5, 12, 6, 32, 7, 14, 18, 17, 15, 6, 41, 21, 11, 14, 9, 6, 24, 17, 18, 6, 9, 3, 11, 18, 10, 10, 33, 14, 17, 7, 20, 6, 14, 7, 8, 15, 14, 6, 27, 21, 18, 19, 28, 17, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [8, 10, 8, 9, 11, 9, 16, 27, 24, 9, 8, 13, 14, 26, 32, 9, 7, 10, 30, 19, 42, 9, 53, 6, 211, 8, 5, 47, 8, 8, 42, 16, 30, 14, 51, 8, 50, 11, 50, 12, 16, 20, 7, 10, 17, 95, 13, 11, 11, 8, 10, 9, 24, 31, 22, 23, 26, 22, 7, 17, 50, 24, 7, 9, 12, 50, 13, 66, 9, 86, 6, 8, 35, 20, 104, 14, 18, 6, 19, 5, 8, 13, 12, 7, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [58, 7, 6, 9, 55, 6, 31, 9, 9, 6, 34, 8, 26, 36, 57, 7, 26, 42, 7, 25, 71, 54, 48, 13, 6, 7, 18, 41, 53, 6, 42, 7, 43, 9, 42, 8, 18, 9, 32, 13, 6, 25, 8, 8, 28, 6, 45, 50, 31, 26, 19, 20, 20, 20, 7, 18, 26, 17, 43, 29, 9, 7, 8, 18, 14, 7, 16, 7, 49, 38, 14, 6, 14, 28, 8, 19, 18, 10, 36, 23, 90, 10, 16, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [18, 37, 37, 10, 36, 30, 11, 27, 26, 7, 11, 8, 46, 22, 23, 14, 23, 9, 7, 44, 25, 35, 45, 41, 12, 13, 36, 79, 31, 10, 22, 23, 29, 27, 20, 8, 4, 17, 146, 24, 9, 23, 104, 37, 24, 25, 23, 27, 15, 31, 8, 16, 44, 21, 9, 19, 27, 8, 9, 21, 12, 25, 26, 23, 7, 40, 20, 27, 44, 23, 21, 13, 10, 23, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [48, 7, 31, 6, 8, 9, 10, 42, 10, 6, 10, 9, 9, 16, 8, 7, 31, 14, 16, 8, 13, 6, 7, 13, 9, 37, 13, 25, 9, 6, 17, 12, 11, 23, 7, 9, 26, 12, 11, 8, 7, 14, 10, 14, 18, 6, 22, 13, 6, 31, 27, 10, 11, 6, 8, 9, 35, 10, 36, 6, 18, 16, 13, 7, 19, 8, 7, 24, 10, 9, 37, 9, 7, 14, 12, 32, 6, 24, 12, 11, 21, 8, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [8, 8, 12, 29, 17, 10, 9, 7, 9, 26, 7, 23, 19, 10, 11, 16, 17, 21, 7, 4, 6, 5, 12, 5, 10, 13, 12, 27, 9, 5, 7, 20, 34, 8, 66, 7, 11, 7, 14, 21, 8, 19, 24, 9, 23, 21, 7, 17, 24, 13, 6, 4, 17, 11, 25, 10, 16, 4, 31, 20, 21, 23, 23, 14, 18, 8, 26, 6, 10, 6, 7, 9, 12, 7, 9, 13, 21, 13, 25, 29, 8, 11, 18, 6, 7, 12, 21, 10, 20, 7, 23, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [30, 6, 7, 10, 18, 9, 9, 25, 5, 8, 9, 46, 6, 9, 27, 21, 6, 13, 5, 4, 6, 24, 7, 27, 6, 5, 5, 14, 5, 5, 19, 21, 8, 18, 19, 13, 19, 7, 112, 19, 12, 19, 17, 5, 17, 5, 27, 20, 23, 4, 13, 6, 5, 11, 9, 17, 5, 6, 6, 6, 8, 24, 18, 5, 11, 21, 17, 5, 6, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [18, 15, 14, 23, 8, 22, 19, 20, 159, 23, 4, 22, 31, 26, 24, 16, 6, 37, 5, 18, 30, 11, 13, 15, 25, 6, 14, 13, 14, 14, 13, 5, 10, 23, 19, 5, 24, 16, 10, 14, 7, 16, 13, 28, 4, 11, 15, 14, 36, 21, 22, 24, 10, 16, 18, 14, 23, 7, 10, 11, 17, 12, 26, 22, 14, 21, 11, 13, 60, 13, 31, 16, 19, 15, 16, 12, 17, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [10, 31, 6, 6, 6, 9, 7, 10, 29, 7, 10, 8, 8, 10, 24, 21, 38, 7, 35, 10, 9, 9, 8, 7, 11, 19, 4, 7, 10, 6, 20, 8, 8, 7, 6, 11, 9, 26, 60, 27, 6, 6, 7, 20, 7, 25, 6, 9, 22, 7, 17, 9, 11, 34, 10, 20, 7, 28, 20, 8, 8, 14, 25, 37, 7, 38, 24, 22, 10, 25, 21, 17, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [7, 13, 15, 11, 8, 3, 12, 6, 5, 6, 4, 10, 18, 3, 10, 14, 39, 4, 11, 10, 16, 6, 40, 7, 4, 10, 9, 7, 13, 53, 4, 7, 6, 11, 17, 18, 31, 11, 11, 20, 47, 18, 10, 5, 23, 43, 31, 8, 9, 10, 9, 10, 17, 12, 24, 57, 11, 123, 15, 13, 20, 30, 36, 10, 18, 12, 12, 21, 33, 10, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [23, 21, 19, 21, 14, 14, 60, 9, 25, 73, 28, 21, 21, 19, 21, 15, 24, 22, 19, 21, 10, 21, 18, 30, 14, 14, 31, 96, 8, 18, 21, 20, 20, 27, 24, 20, 26, 7, 23, 21, 19, 28, 10, 38, 11, 25, 19, 5, 18, 5, 28, 29, 17, 20, 25, 22, 21, 88, 18, 9, 22, 41, 80, 43, 42, 16, 19, 19, 21, 34, 6, 23, 8, 11, 31, 23, 12, 22, 38, 74, 29, 17, 22, 18, 30, 32, 48, 11, 20, 36, 20, 33, 14, 12, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [38, 21, 8, 38, 24, 4, 4, 29, 31, 28, 21, 23, 29, 11, 29, 4, 21, 21, 24, 23, 22, 21, 29, 26, 22, 21, 21, 24, 10, 22, 19, 20, 20, 6, 24, 21, 10, 33, 22, 20, 26, 33, 28, 32, 19, 17, 9, 20, 22, 24, 21, 24, 45, 24, 27, 23, 26, 29, 22, 5, 5, 23, 27, 18, 26, 24, 30, 20, 24, 23, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [30, 9, 28, 12, 13, 10, 30, 7, 12, 26, 20, 9, 8, 15, 14, 8, 27, 7, 9, 36, 14, 10, 37, 17, 14, 11, 9, 20, 8, 30, 8, 30, 10, 8, 9, 9, 29, 18, 25, 9, 9, 10, 32, 11, 41, 12, 10, 30, 25, 11, 51, 22, 20, 11, 11, 8, 112, 8, 11, 10, 13, 12, 74, 29, 7, 6, 9, 12, 11, 86, 11, 9, 27, 39, 25, 29, 116, 42, 10, 10, 13, 159, 12, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [8, 20, 16, 9, 30, 7, 7, 14, 9, 88, 7, 7, 22, 7, 19, 7, 14, 4, 8, 29, 31, 20, 5, 10, 29, 37, 10, 16, 5, 18, 9, 4, 8, 4, 31, 21, 9, 15, 15, 22, 165, 8, 9, 7, 15, 30, 25, 21, 7, 20, 13, 10, 12, 11, 24, 23, 13, 19, 13, 8, 9, 14, 13, 16, 8, 37, 8, 25, 11, 4, 17, 4, 15, 10, 28, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [23, 16, 16, 4, 30, 31, 134, 19, 15, 17, 13, 44, 11, 15, 19, 27, 8, 9, 6, 31, 18, 30, 32, 7, 4, 25, 23, 20, 32, 9, 29, 33, 6, 23, 14, 90, 14, 4, 6, 14, 19, 7, 4, 17, 18, 18, 16, 17, 18, 12, 14, 4, 21, 34, 35, 32, 34, 28, 20, 16, 19, 31, 7, 8, 10, 12, 81, 14, 22, 16, 26, 20, 20, 7, 20, 36, 6, 6, 28, 17, 20, 7, 26, 24]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [3, 19, 16, 9, 16, 8, 18, 21, 45, 18, 10, 11, 41, 6, 26, 12, 8, 21, 8, 30, 17, 11, 47, 20, 15, 25, 6, 4, 17, 5, 27, 8, 40, 17, 5, 18, 4, 45, 10, 140, 9, 18, 18, 4, 18, 13, 18, 14, 15, 4, 7, 8, 25, 3, 4, 82, 6, 19, 17, 13, 45, 7, 22, 9, 20, 10, 45, 16, 54, 139, 12, 20, 18, 12, 24, 7, 20, 23, 8, 19, 8, 7, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [39, 28, 41, 32, 30, 3, 4, 27, 36, 34, 31, 32, 31, 32, 24, 33, 11, 22, 15, 37, 31, 25, 31, 34, 29, 135, 30, 28, 13, 27, 39, 26, 35, 38, 24, 74, 8, 27, 28, 25, 5, 32, 26, 34, 43, 28, 28, 11, 10, 41, 30, 26, 28, 31, 27, 40, 49, 16, 35, 39, 39, 27, 27, 35, 27, 32, 34, 29]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [4, 13, 14, 12, 8, 9, 11, 13, 4, 6, 13, 10, 22, 11, 8, 22, 4, 7, 16, 7, 11, 17, 14, 54, 14, 188, 30, 7, 11, 12, 7, 7, 54, 6, 54, 5, 54, 11, 23, 23, 9, 15, 4, 8, 12, 4, 4, 12, 8, 11, 28, 27, 27, 29, 11, 22, 12, 14, 55, 9, 7, 10, 6, 54, 5, 54, 11, 28, 12, 38, 25, 4, 7, 13, 6, 6, 8, 7, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [37, 9, 4, 13, 12, 11, 21, 5, 16, 16, 21, 15, 19, 15, 23, 19, 27, 13, 18, 24, 18, 21, 166, 6, 21, 127, 25, 17, 4, 11, 17, 18, 15, 15, 17, 19, 18, 17, 11, 21, 18, 40, 27, 18, 16, 319, 14, 309, 16, 17, 22, 14, 5, 17, 15, 32, 26, 16, 191, 22, 8, 11, 12, 23, 17, 27, 5, 15, 17, 6, 21, 15, 20, 13, 7, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [23, 5, 3, 17, 14, 13, 7, 20, 14, 10, 4, 20, 12, 22, 8, 15, 30, 8, 25, 12, 4, 6, 4, 36, 6, 7, 29, 32, 11, 4, 7, 4, 33, 20, 20, 17, 10, 15, 14, 6, 30, 7, 199, 22, 19, 17, 20, 9, 8, 10, 11, 7, 9, 6, 9, 18, 8, 11, 3, 11, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [11, 5, 5, 4, 5, 6, 5, 18, 10, 11, 6, 14, 31, 5, 8, 20, 4, 10, 41, 7, 5, 16, 21, 4, 21, 5, 21, 14, 5, 6, 6, 7, 14, 17, 14, 28, 21, 13, 8, 9, 5, 37, 21, 20, 97, 16, 6, 24, 6, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [44, 41, 38, 24, 25, 39, 35, 16, 36, 54, 13, 14, 29, 13, 33, 81, 63, 25, 40, 9, 18, 41, 24, 49, 39, 10, 14, 38, 37, 63, 17, 35, 20, 14, 16, 57, 12, 39, 11, 131, 13, 15, 64, 90, 111, 8, 31, 36, 16, 35, 6, 50, 27, 62, 32, 35, 25, 27, 26, 49, 40, 22, 46, 25, 38, 14, 8, 9, 38, 11, 37, 14, 31, 16, 24, 14, 5, 38, 49, 34, 16, 16, 36, 39, 39, 27, 8, 15, 50]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [38, 6, 41, 38, 4, 31, 38, 34, 8, 45, 12, 41, 35, 22, 4, 6, 122, 36, 9, 38, 42, 35, 11, 10, 33, 36, 34, 6, 14, 37, 51, 23, 4, 25, 22, 39, 4, 19, 19, 4, 13, 5, 4, 15, 33, 29, 32, 34, 38, 36, 31, 9, 14, 5, 39, 32, 39, 15, 6, 42, 36, 32, 9, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [15, 4, 6, 30, 26, 6, 16, 4, 37, 36, 4, 29, 15, 30, 23, 7, 6, 13, 21, 7, 26, 8, 7, 23, 23, 12, 37, 14, 33, 37, 39, 40, 42, 19, 27, 27, 9, 13, 32, 36, 36, 34, 45, 16, 33, 4, 40, 26, 15, 33, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [30, 5, 6, 7, 5, 6, 9, 4, 8, 7, 4, 7, 13, 14, 6, 4, 16, 8, 15, 13, 4, 18, 11, 29, 4, 9, 8, 6, 14, 14, 24, 19, 5, 16, 5, 7, 8, 5, 6, 10, 6, 9, 18, 6, 21, 22, 24, 26, 7, 7, 6, 6, 7, 5, 14, 5, 6, 6, 5, 11, 241, 14, 25, 21, 16, 9, 8, 71]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [8, 48, 23, 30, 24, 28, 101, 31, 9, 46, 10, 45, 23, 52, 41, 33, 10, 42, 37, 12, 24, 60, 11, 16, 21, 28, 23, 40, 41, 9, 40, 21, 38, 29, 41, 29, 30, 20, 158, 175, 20, 8, 55, 11, 17, 28, 5, 48, 8, 43, 38, 29, 20, 26, 22, 9, 18, 23, 21, 41, 42, 9, 11, 12, 10, 28, 13, 26, 25, 23, 23, 32, 30, 23, 31, 33, 23, 7, 47, 11, 26, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [4, 30, 4, 7, 6, 14, 10, 6, 20, 34, 6, 9, 4, 5, 7, 18, 3, 15, 23, 9, 9, 4, 6, 9, 9, 40, 7, 15, 22, 4, 6, 4, 9, 8, 11, 8, 173, 17, 7, 4, 15, 8, 10, 7, 47, 9, 26, 9, 9, 7, 6, 11, 8, 10, 7, 6, 11, 11, 9, 14, 13, 6, 37, 5, 7, 8, 11, 11, 8, 10, 18, 9, 4, 4, 12, 18, 10, 9, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [20, 19, 9, 14, 8, 5, 10, 11, 11, 33, 10, 10, 10, 63, 71, 9, 9, 14, 8, 27, 4, 6, 25, 9, 22, 19, 11, 24, 14, 31, 10, 13, 68, 22, 9, 50, 9, 11, 12, 10, 12, 10, 13, 11, 12, 10, 20, 12, 103, 18, 22, 7, 16, 6, 10, 13, 12, 20, 9, 16, 4, 4, 5, 4, 11, 18, 22, 10, 11, 12, 14, 24, 9, 10, 12, 12, 23, 7, 11, 39, 8, 11, 10, 17, 41, 16, 18, 15, 13, 27, 98, 19]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [13, 10, 26, 10, 15, 21, 8, 14, 4, 37, 15, 43, 9, 10, 12, 20, 9, 13, 8, 8, 27, 15, 16, 4, 8, 32, 19, 14, 4, 12, 9, 10, 10, 12, 10, 7, 12, 8, 24, 7, 8, 34, 18, 9, 11, 8, 16, 15, 8, 15, 12, 73, 9, 9, 24, 7, 12, 12, 11, 12, 130, 7, 19, 10, 15, 17, 7, 124, 17, 42, 17, 10, 23, 21, 8, 8, 9, 34, 12, 9, 12, 9, 8, 22, 8, 8, 11, 8, 12, 10, 8, 17, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [18, 19, 19, 8, 12, 24, 20, 17, 15, 4, 11, 97, 13, 19, 20, 7, 7, 16, 29, 6, 25, 15, 11, 26, 16, 18, 8, 17, 26, 30, 17, 20, 10, 13, 15, 20, 21, 16, 19, 21, 18, 17, 112, 11, 16, 6, 13, 9, 20, 27, 8, 19, 15, 19, 21, 19, 19, 11, 20, 17, 15, 17, 13, 9, 39, 19, 8, 17, 8, 8, 15, 15, 7, 15, 17, 4, 8, 19, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [43, 5, 6, 5, 6, 7, 6, 6, 6, 8, 5, 4, 6, 7, 5, 4, 7, 7, 20, 25, 14, 6, 6, 7, 6, 6, 5, 6, 7, 6, 6, 7, 3, 6, 38, 8, 6, 6, 5, 6, 19, 19, 8, 21, 7, 7, 7, 7, 3, 4, 5, 18, 4, 7, 6, 22, 8, 22, 4, 6, 7, 7, 18, 7, 7, 5, 7, 9, 6, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [12, 6, 7, 6, 10, 7, 77, 11, 37, 6, 47, 9, 16, 6, 34, 6, 11, 6, 48, 8, 59, 33, 9, 34, 12, 8, 11, 145, 10, 9, 6, 9, 15, 18, 8, 12, 11, 8, 12, 11, 12, 12, 19, 16, 29, 13, 12, 6, 53, 10, 8, 21, 18, 28, 32, 13, 9, 13, 37, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [36, 8, 10, 10, 6, 11, 4, 6, 6, 6, 9, 7, 30, 90, 57, 9, 17, 4, 13, 10, 12, 6, 22, 44, 44, 20, 7, 7, 11, 40, 11, 8, 10, 44, 12, 46, 44, 5, 10, 20, 26, 25, 8, 11, 14, 8, 5, 6, 6, 22, 12, 12, 6, 4, 11, 7, 9, 20, 63, 24, 45, 9, 11, 12, 8, 44, 9, 23, 10, 49, 20, 28, 22, 6, 21, 9, 6, 12, 10, 4, 16, 11, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [9, 9, 7, 6, 18, 4, 9, 5, 10, 6, 12, 12, 7, 5, 5, 5, 30, 8, 9, 10, 11, 9, 5, 6, 10, 4, 6, 7, 7, 8, 12, 8, 15, 11, 8, 24, 22, 16, 121, 9, 17, 12, 10, 8, 32, 26, 4, 6, 7, 22, 7, 7, 6, 10, 11, 14, 7, 7, 12, 5, 7, 10, 7, 8, 12, 7, 10, 4, 11, 10, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [11, 9, 10, 8, 14, 9, 9, 10, 8, 9, 9, 10, 17, 13, 7, 7, 6, 12, 5, 7, 8, 7, 48, 60, 9, 4, 6, 14, 17, 6, 10, 9, 49, 10, 50, 7, 50, 8, 20, 21, 9, 21, 14, 8, 15, 9, 9, 8, 18, 9, 14, 12, 13, 11, 12, 27, 31, 22, 50, 11, 26, 8, 7, 10, 12, 11, 49, 30, 8, 6, 49, 62, 50, 54, 8, 22, 22, 9, 6, 66, 16, 8, 10, 49]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [26, 33, 11, 11, 10, 12, 8, 17, 34, 11, 19, 14, 10, 17, 20, 15, 18, 16, 11, 13, 18, 181, 42, 13, 17, 47, 13, 128, 9, 18, 4, 23, 10, 19, 16, 49, 9, 11, 16, 43, 14, 45, 50, 43, 170, 22, 15, 13, 22, 33, 21, 10, 11, 16, 11, 76, 13, 92, 15, 16, 10, 19, 19, 14, 22, 11, 43, 14, 9, 18, 10, 9, 43, 9, 86, 44, 34, 23, 21, 10, 18, 12, 119, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [31, 35, 10, 8, 5, 31, 42, 34, 27, 16, 12, 122, 7, 14, 31, 6, 103, 11, 8, 42, 28, 24, 15, 10, 17, 15, 21, 45, 40, 43, 40, 25, 40, 12, 40, 37, 19, 18, 47, 14, 7, 10, 10, 35, 28, 8, 7, 38, 32, 8, 17, 31, 15, 43, 48, 10, 9, 8, 9, 7, 7, 47, 12, 27, 31, 39, 14, 23, 17, 11, 9, 10, 7, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [3, 43, 38, 33, 5, 4, 26, 7, 44, 37, 32, 37, 51, 12, 28, 8, 9, 49, 23, 9, 14, 12, 38, 11, 13, 34, 42, 9, 44, 73, 54, 6, 32, 24, 32, 20, 10, 12, 18, 7, 39, 26, 12, 37, 12, 20, 12, 22, 22, 22, 41, 8, 26, 72, 8, 10, 7, 36, 27, 14, 14, 11, 27, 33, 9, 7, 23, 16, 9, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [4, 7, 9, 3, 11, 8, 7, 27, 8, 125, 8, 4, 10, 6, 10, 12, 14, 7, 10, 7, 5, 9, 15, 12, 7, 9, 8, 5, 4, 45, 26, 8, 12, 18, 18, 12, 18, 43, 5, 15, 18, 42, 10, 10, 14, 41, 9, 57, 11, 10, 16, 10, 9, 8, 16, 7, 24, 4, 17, 7, 11, 6, 16, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [24, 30, 20, 21, 7, 23, 248, 24, 23, 11, 19, 24, 13, 10, 24, 9, 24, 20, 31, 19, 21, 28, 12, 22, 24, 25, 10, 19, 22, 10, 36, 23, 20, 19, 65, 8, 19, 8, 13, 18, 38, 13, 21, 22, 32, 16, 9, 12, 18, 330, 13, 10, 22, 32, 18, 22, 24, 22, 11, 15, 20, 22, 9, 20, 19, 20, 24, 19, 20, 24, 20, 19, 21, 10, 20, 8, 24, 14, 21, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [9, 20, 16, 19, 19, 18, 12, 14, 28, 8, 6, 12, 63, 26, 7, 8, 17, 28, 60, 87, 23, 6, 17, 35, 20, 19, 28, 60, 58, 8, 13, 18, 32, 30, 18, 6, 26, 97, 26, 5, 18, 18, 100, 4, 21, 36, 26, 12, 19, 11, 8, 21, 28, 38, 39, 39, 35, 38, 17, 20, 8, 12, 7, 10, 6, 19, 34, 37, 8, 33, 23, 40, 27, 36, 52, 9, 26, 40, 6, 34, 42, 29, 33]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [36, 11, 8, 11, 223, 27, 11, 12, 9, 21, 10, 9, 11, 22, 22, 7, 10, 19, 71, 12, 12, 4, 53, 20, 16, 13, 9, 9, 11, 8, 49, 10, 9, 16, 5, 169, 9, 12, 8, 9, 11, 29, 28, 25, 18, 12, 27, 11, 11, 9, 11, 15, 22, 13, 11, 9, 8, 9, 20, 17, 10, 27, 11, 9, 10, 10, 9, 20, 13, 9, 28, 11, 22, 10, 38, 8, 11, 33, 23, 11, 15, 12, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [39, 4, 5, 5, 18, 4, 25, 14, 17, 22, 12, 8, 10, 18, 8, 10, 10, 10, 15, 5, 20, 4, 4, 21, 10, 21, 68, 8, 8, 82, 18, 18, 13, 21, 7, 25, 20, 26, 21, 13, 28, 28, 28, 27, 17, 24, 18, 19, 24, 13, 10, 24, 22, 13, 30, 25, 24, 34, 108, 13, 18, 13, 35]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [18, 12, 8, 9, 8, 19, 16, 30, 8, 19, 6, 11, 14, 7, 30, 7, 13, 8, 8, 18, 47, 12, 14, 11, 17, 8, 13, 10, 47, 16, 61, 24, 48, 19, 23, 67, 66, 18, 57, 9, 7, 11, 19, 19, 18, 18, 18, 66, 14, 49, 33, 12, 24, 13, 47, 97, 13, 58, 50, 10, 136, 26, 8, 7, 14, 23, 11, 147, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [40, 25, 4, 4, 4, 6, 4, 275, 7, 4, 4, 7, 8, 5, 8, 8, 37, 13, 4, 6, 9, 8, 7, 37, 7, 13, 5, 6, 9, 20, 101, 4, 8, 19, 19, 9, 25, 14, 6, 37, 4, 14, 13, 4, 7, 21, 18, 18, 6, 9, 15, 25, 22, 12, 8, 40, 12, 7, 4, 6, 5, 7, 7, 6, 7, 6, 11, 18, 10, 11, 16, 5, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [8, 15, 9, 5, 10, 4, 4, 4, 10, 4, 6, 32, 14, 11, 11, 8, 25, 9, 12, 11, 6, 14, 7, 50, 6, 17, 5, 43, 4, 13, 4, 16, 5, 9, 6, 4, 50, 10, 11, 20, 21, 5, 21, 81, 8, 11, 23, 5, 4, 9, 6, 26, 24, 19, 20, 19, 20, 18, 50, 5, 11, 8, 12, 52, 7, 10, 9, 8, 67, 10, 15, 14, 32, 22, 27, 4, 10, 5, 55, 8, 6, 7, 54]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [15, 31, 17, 21, 7, 4, 10, 23, 15, 15, 42, 14, 22, 23, 23, 15, 13, 8, 22, 13, 24, 21, 12, 22, 4, 33, 49, 12, 31, 24, 5, 18, 27, 20, 25, 9, 17, 4, 12, 22, 22, 11, 17, 15, 24, 17, 30, 9, 22, 24, 5, 9, 18, 16, 18, 16, 21, 22, 11, 16, 54, 24, 13, 165, 35, 13, 12, 56, 17, 8, 20, 18, 28, 26, 23, 21, 22, 5, 29, 22, 20, 26, 12, 24, 36]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [43, 23, 20, 19, 18, 21, 22, 19, 20, 17, 18, 19, 25, 29, 20, 43, 41, 18, 23, 21, 17, 25, 21, 22, 121, 19, 21, 20, 25, 19, 21, 29, 19, 20, 27, 19, 20, 21, 23, 18, 20, 22, 15, 22, 20, 22, 17, 23, 22, 39, 23, 17, 18, 18, 17, 23, 22, 16, 19, 19, 22, 23, 20, 24, 35, 23, 27, 19, 42, 20, 25, 22, 32, 40, 21, 54, 20, 21, 23, 41, 38, 20, 23, 21, 20, 25, 23, 45, 22, 22, 19, 42, 41, 22]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [18, 7, 13, 9, 6, 6, 26, 11, 46, 26, 10, 21, 4, 35, 4, 20, 21, 12, 9, 10, 9, 7, 23, 11, 20, 24, 14, 11, 26, 4, 29, 26, 13, 13, 23, 25, 8, 11, 9, 331, 16, 8, 10, 7, 39, 14, 39, 12, 32, 24, 9, 15, 15, 11, 11, 13, 19, 56, 12, 9, 6, 34, 17, 41, 8, 17, 30, 26, 11, 10, 13, 23, 28]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [17, 9, 26, 11, 5, 6, 9, 7, 6, 11, 9, 7, 32, 21, 6, 10, 6, 20, 18, 7, 14, 6, 10, 17, 4, 18, 6, 10, 10, 10, 8, 11, 9, 34, 8, 8, 6, 7, 5, 10, 5, 22, 22, 11, 25, 14, 7, 10, 32, 8, 107, 6, 6, 7, 10, 57, 6, 26, 8, 8, 7, 10, 17, 9, 6, 11, 5, 16, 25, 5, 15, 16, 12, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [8, 14, 16, 11, 13, 11, 15, 11, 13, 12, 21, 8, 8, 25, 28, 17, 9, 11, 12, 13, 20, 22, 52, 22, 14, 23, 11, 9, 10, 16, 18, 52, 32, 52, 8, 16, 12, 22, 22, 12, 21, 18, 8, 15, 8, 8, 4, 14, 34, 10, 16, 12, 11, 22, 18, 26, 18, 22, 53, 22, 10, 13, 52, 11, 56, 9, 7, 14, 20, 23, 14, 17, 8, 17, 8, 26, 42]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [12, 30, 19, 8, 21, 30, 12, 35, 12, 17, 29, 4, 6, 24, 26, 24, 10, 31, 9, 26, 12, 27, 23, 23, 30, 5, 24, 22, 51, 20, 21, 15, 17, 22, 12, 27, 18, 34, 21, 21, 24, 16, 25, 54, 17, 8, 12, 17, 8, 31, 24, 8, 7, 8, 6, 21, 24, 16, 20, 17, 43, 9, 27, 11, 8, 17, 26, 20, 10, 30, 9, 40, 29, 35, 22, 41, 24, 6, 26, 22, 24, 33]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [9, 4, 4, 4, 10, 10, 4, 5, 21, 8, 15, 4, 8, 212, 4, 58, 7, 4, 13, 12, 5, 8, 11, 7, 8, 4, 5, 9, 4, 4, 5, 4, 25, 21, 7, 7, 7, 15, 7, 7, 6, 4, 7, 3, 7, 16, 9, 11, 10, 11, 12, 8, 23, 18, 13, 7, 19, 8, 7, 12, 7, 9, 81, 13, 13, 29, 17, 6, 17, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [7, 8, 11, 15, 11, 9, 4, 5, 10, 9, 6, 15, 4, 4, 5, 7, 24, 4, 12, 4, 5, 26, 19, 17, 18, 5, 46, 13, 9, 4, 11, 5, 7, 6, 10, 43, 12, 42, 7, 42, 5, 7, 11, 61, 61, 4, 50, 6, 8, 8, 4, 24, 15, 15, 5, 4, 7, 8, 61, 35, 8, 57, 42, 6, 7, 7, 14, 18, 6, 7, 42, 42, 7, 57, 10, 8, 6, 22, 5, 12, 19, 9, 6, 67, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [7, 12, 5, 18, 18, 39, 5, 21, 4, 11, 27, 17, 23, 15, 16, 6, 15, 27, 18, 20, 16, 87, 14, 12, 16, 16, 7, 18, 15, 14, 21, 13, 25, 4, 18, 8, 18, 26, 13, 12, 12, 12, 5, 42, 18, 9, 18, 47, 18, 18, 10, 19, 18, 27, 44, 24, 4, 15, 38, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [4, 9, 9, 6, 6, 9, 10, 8, 11, 13, 7, 9, 7, 10, 9, 5, 7, 16, 29, 21, 6, 5, 8, 19, 20, 17, 6, 7, 7, 8, 4, 12, 5, 7, 11, 9, 7, 9, 6, 8, 14, 13, 12, 12, 7, 185, 9, 13, 9, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [10, 29, 11, 14, 12, 31, 29, 21, 11, 11, 11, 9, 21, 9, 17, 37, 9, 11, 31, 6, 4, 36, 7, 7, 6, 10, 28, 31, 7, 15, 7, 8, 29, 9, 14, 16, 9, 25, 27, 41, 14, 24, 6, 26, 19, 13, 9, 48, 9, 46, 6, 17, 120, 67, 17, 6, 14, 27, 17, 6, 28, 10, 9, 32, 21, 11, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [12, 18, 9, 18, 10, 16, 14, 27, 31, 13, 34, 25, 79, 16, 13, 49, 48, 29, 15, 21, 19, 26, 16, 13, 24, 16, 27, 15, 12, 18, 18, 13, 23, 22, 17, 13, 18, 19, 25, 82, 78, 43, 16, 18, 7, 11, 15, 32, 36, 23, 13, 22, 22, 23, 42, 16, 27, 22, 14, 22, 72, 26, 2, 16, 28, 28, 16, 15, 33, 26, 14, 28, 13, 32]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [8, 11, 12, 12, 16, 11, 9, 14, 19, 10, 14, 12, 28, 28, 18, 10, 9, 9, 10, 11, 27, 15, 14, 61, 11, 20, 9, 8, 16, 13, 12, 11, 18, 10, 8, 9, 19, 18, 58, 20, 61, 9, 60, 14, 12, 10, 8, 11, 16, 11, 13, 25, 3, 4, 15, 15, 11, 14, 20, 16, 14, 16, 14, 16, 60, 11, 9, 11, 245, 59, 11, 9, 59, 14, 13, 10, 7, 12, 14, 64, 17, 9, 8, 15, 10, 14, 9, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [4, 26, 8, 4, 6, 10, 11, 8, 8, 22, 9, 8, 7, 8, 13, 12, 198, 9, 12, 44, 18, 27, 52, 5, 17, 26, 21, 24, 64, 13, 10, 9, 16, 8, 51, 15, 21, 51, 7, 8, 10, 20, 20, 4, 19, 8, 9, 258, 6, 7, 10, 7, 8, 7, 9, 6, 7, 5, 13, 29, 15, 20, 53, 29, 22, 10, 31, 51, 51, 7, 26, 11, 21, 21, 16, 22, 13, 93, 25, 18, 13, 20, 10, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [3, 2, 4, 4, 13, 14, 11, 225, 4, 5, 3, 3, 5, 4, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [7, 7, 6, 8, 10, 8, 40, 32, 11, 7, 30, 9, 10, 11, 12, 7, 6, 7, 21, 6, 9, 10, 6, 4, 48, 115, 6, 10, 10, 47, 6, 13, 7, 42, 7, 39, 30, 8, 6, 24, 40, 9, 25, 15, 8, 15, 7, 12, 10, 10, 13, 10, 5, 13, 22, 11, 13, 47, 21, 28, 8, 10, 30, 12, 7, 10, 11, 10, 38, 30, 19, 11, 32, 12, 9, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [3, 19, 22, 20, 20, 6, 19, 17, 23, 12, 37, 82, 4, 10, 22, 20, 6, 11, 11, 20, 20, 19, 20, 20, 20, 8, 17, 10, 12, 9, 19, 39, 20, 22, 20, 4, 83, 23, 20, 17, 19, 19, 12, 13, 12, 16, 19, 19, 17, 9, 17, 18, 21, 17, 13, 19, 6, 20, 20, 34, 18, 22, 4, 6, 17, 10, 10, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [3, 9, 8, 4, 5, 9, 64, 66, 6, 67, 60, 6, 5, 11, 7, 8, 8, 7, 7, 14, 9, 79, 21, 8, 6, 62, 7, 16, 6, 9, 8, 76, 5, 8, 62, 62, 11, 62, 9, 77, 77, 9, 58, 9, 6, 20, 13, 7, 16, 54, 76, 17, 9, 11, 10, 7, 68, 6, 7, 78, 62, 9, 7, 12, 9, 10, 6, 62, 49, 9, 55, 75, 77, 12, 11, 78, 8, 28, 4, 8, 8, 8, 6, 79]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [17, 4, 3, 4, 15, 11, 15, 4, 14, 20, 13, 12, 14, 13, 31, 26, 17, 160, 4, 4, 16, 12, 13, 13, 16, 45, 12, 17, 12, 23, 14, 11, 18, 14, 13, 14, 26, 47, 45, 15, 14, 12, 23, 24, 27, 16, 5, 14, 4, 19, 28, 25, 24, 44, 22, 24, 45, 5, 13, 16, 23, 11, 13, 13, 14, 10, 24, 13, 4, 14, 193, 121, 25, 15, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [17, 12, 11, 8, 13, 14, 8, 7, 15, 12, 15, 10, 18, 13, 13, 13, 29, 6, 8, 9, 18, 15, 148, 12, 12, 13, 66, 13, 4, 12, 14, 13, 18, 22, 24, 13, 12, 25, 13, 14, 128, 15, 14, 12, 18, 13, 15, 17, 12, 12, 21, 14, 22, 13, 11, 5, 10, 12, 15, 12, 15, 15, 11, 20, 26, 8, 24, 17, 18, 6, 14, 24]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [10, 8, 6, 5, 10, 12, 4, 6, 3, 7, 4, 11, 36, 22, 6, 16, 9, 22, 19, 7, 4, 18, 6, 4, 44, 8, 7, 10, 17, 6, 20, 13, 8, 6, 19, 43, 62, 86, 9, 45, 14, 9, 21, 22, 17, 7, 8, 6, 4, 14, 9, 47, 7, 14, 12, 13, 14, 7, 43, 13, 9, 7, 12, 23, 288, 44, 5, 5, 8, 10, 16, 53, 20, 19, 23, 6, 9, 20, 28]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [3, 4, 5, 11, 46, 10, 32, 5, 151, 4, 4, 9, 10, 13, 118, 11, 5, 10, 7, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [4, 11, 17, 17, 49, 10, 14, 20, 17, 25, 21, 14, 16, 21, 8, 13, 17, 8, 32, 12, 12, 12, 14, 4, 11, 14, 16, 13, 10, 16, 16, 15, 30, 10, 14, 34, 15, 11, 19, 27, 34, 14, 13, 11, 12, 23, 11, 15, 14, 11, 6, 18, 16, 24, 8, 4, 10, 13, 11, 20, 11, 13, 243, 27, 27, 23, 9, 26, 13, 20, 12, 16, 12, 18, 15, 12, 13, 16, 13, 22, 14, 22, 12, 13, 23, 16, 10, 34, 11, 4, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [6, 6, 58, 13, 12, 34, 4, 11, 13, 35, 13, 34, 22, 8, 10, 7, 4, 8, 4, 8, 85, 10, 23, 7, 17, 42, 14, 26, 13, 7, 14, 14, 16, 7, 6, 191, 228, 16, 4, 6, 13, 37, 18, 22, 22, 4, 6, 11, 13, 4, 38, 10, 10, 34, 13, 11, 44, 17, 4, 37, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [27, 6, 7, 8, 16, 129, 11, 25, 7, 113, 17, 8, 9, 21, 11, 7, 15, 15, 23, 7, 26, 20, 31, 16, 4, 13, 9, 31, 7, 27, 8, 18, 31, 24, 8, 16, 10, 20, 20, 15, 7, 15, 37, 9, 5, 12, 8, 6, 9, 16, 5, 13, 11, 11, 15, 20, 20, 23, 13, 10, 10, 15, 16, 41, 5, 16, 8, 15, 32, 40, 21, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [12, 25, 21, 11, 22, 13, 11, 8, 8, 10, 11, 8, 17, 30, 11, 21, 11, 10, 10, 26, 11, 10, 19, 25, 10, 19, 33, 14, 22, 15, 10, 25, 10, 10, 26, 9, 37, 23, 7, 86, 17, 9, 9, 19, 19, 30, 11, 24, 36, 13, 15, 17, 180, 12, 29, 18, 10, 23, 30, 11, 14, 7, 14, 18, 4, 18, 13, 12, 14, 11, 8, 8, 26, 26, 21, 13, 7, 13, 24, 11, 12, 21, 9, 31]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [3, 4, 11, 4, 8, 5, 48, 12, 5, 12, 4, 10, 15, 8, 7, 10, 10, 6, 14, 14, 10, 11, 6, 12, 6, 6, 7, 8, 8, 12, 38, 13, 5, 12, 14, 12, 19, 20, 17, 12, 11, 15, 15, 12, 101, 12, 17, 6, 5, 7, 16, 7, 11, 6, 9, 4, 13, 5, 5, 22, 6, 12, 8, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [8, 22, 20, 10, 18, 32, 22, 26, 25, 39, 20, 8, 24, 71, 10, 16, 32, 9, 29, 32, 9, 21, 10, 12, 19, 23, 10, 18, 49, 19, 18, 16, 11, 18, 45, 24, 36, 10, 18, 21, 15, 49, 19, 21, 49, 15, 7, 11, 8, 9, 16, 58, 24, 18, 10, 16, 10, 16, 25, 11, 22, 23, 11, 13, 17, 29, 13, 11, 67, 49, 9, 32, 13, 32, 24, 50, 15, 21, 50, 26, 67, 13, 12, 30, 29, 37, 25, 25, 23, 18, 28, 24, 22]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [45, 15, 41, 3, 13, 21, 12, 39, 25, 21, 15, 19, 23, 68, 13, 24, 22, 37, 14, 28, 18, 102, 18, 25, 21, 19, 12, 22, 99, 7, 25, 16, 32, 21, 151, 16, 32, 22, 6, 19, 18, 4, 23, 22, 25, 14, 25, 22, 14, 19, 23, 15, 33, 41, 18, 20, 15, 22, 18, 13, 24, 22, 30, 31, 21, 20, 25, 22, 36, 14, 30, 24, 22, 27]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [26, 30, 3, 4, 23, 4, 4, 4, 13, 29, 6, 14, 13, 21, 15, 6, 154, 44, 7, 5, 6, 20, 30, 6, 118, 122, 164, 14, 14, 4, 7, 11, 40, 9, 270, 11, 6, 19, 11, 16, 12, 12, 33, 5, 15, 6, 6, 19, 12, 13, 12, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [7, 40, 16, 21, 7, 14, 22, 13, 19, 11, 15, 13, 10, 20, 35, 37, 50, 13, 16, 11, 48, 9, 4, 22, 51, 25, 20, 20, 25, 50, 16, 48, 12, 50, 22, 10, 22, 21, 23, 20, 25, 21, 17, 11, 9, 10, 19, 9, 15, 10, 12, 8, 8, 20, 50, 13, 11, 16, 19, 17, 8, 16, 21, 23, 10, 21, 15, 10, 11, 25, 26, 19, 16, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [9, 11, 7, 6, 6, 10, 7, 7, 6, 6, 18, 9, 7, 27, 25, 20, 6, 5, 8, 13, 10, 6, 6, 18, 7, 5, 7, 18, 7, 6, 12, 7, 72, 5, 7, 8, 6, 7, 8, 7, 14, 7, 7, 6, 8, 4, 9, 7, 17, 14, 4, 7, 27, 6, 81, 72, 7, 5, 9, 9, 7, 16, 8, 5, 8, 7, 4, 5, 4, 7, 9, 4, 9, 9, 8, 8, 7, 7, 18, 6, 10, 4, 6, 11, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [3, 5, 25, 7, 4, 17, 5, 5, 15, 28, 27, 28, 13, 23, 13, 29, 23, 25, 34, 26, 25, 23, 14, 14, 12, 25, 28, 9, 23, 6, 25, 9, 25, 12, 7, 27, 18, 4, 18, 12, 13, 12, 18, 7, 13, 13, 15, 12, 23, 5, 14, 23, 26, 26, 24, 42, 20, 22, 23, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [23, 23, 34, 33, 16, 10, 38, 12, 15, 15, 8, 33, 43, 19, 42, 39, 24, 25, 14, 21, 22, 32, 86, 17, 6, 45, 59, 28, 13, 11, 38, 13, 15, 22, 27, 7, 7, 12, 10, 15, 15, 21, 47, 11, 53, 25, 62, 19, 7, 19, 74, 36, 134, 12, 14, 23, 52, 24, 18, 12, 16, 9, 10, 10, 40, 19, 16, 22, 47, 21, 12, 15, 28, 47, 45, 64, 15, 13, 15, 18, 18, 35, 29, 18, 20, 15, 22, 17, 19]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [11, 6, 36, 10, 29, 8, 13, 10, 8, 16, 10, 8, 6, 9, 32, 8, 9, 14, 33, 9, 14, 8, 12, 13, 12, 12, 23, 17, 11, 13, 14, 18, 22, 8, 11, 33, 8, 8, 75, 14, 14, 10, 10, 16, 14, 74, 8, 13, 14, 7, 12, 16, 15, 11, 12, 9, 74, 17, 14, 30, 14, 14, 118, 8, 6, 9, 6, 10, 8, 22, 8, 8, 20, 10, 13, 23, 13, 12, 20, 7, 12, 31, 11, 7, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [17, 17, 6, 9, 17, 13, 8, 7, 5, 14, 14, 27, 8, 17, 8, 87, 7, 18, 20, 52, 27, 19, 17, 8, 7, 17, 12, 50, 7, 20, 20, 16, 12, 4, 9, 16, 12, 13, 18, 14, 12, 14, 8, 26, 51, 8, 10, 7, 17, 54, 4, 50, 66, 7, 12, 18, 29, 24, 18, 191, 16, 9, 13, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 18, 19, 8, 3, 6, 8, 19, 4, 9, 5, 10, 7, 6, 9, 7, 9, 11, 15, 18, 10, 8, 9, 8, 7, 12, 9, 22, 5, 21, 7, 10, 11, 7, 6, 10, 10, 7, 3, 20, 17, 173, 6, 4, 25, 19, 9, 8, 20, 6, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 177
[length(mis) for mis = unique(C_list)] = [10, 11, 18, 7, 12, 31, 13, 29, 25, 28, 23, 13, 17, 21, 43, 8, 7, 10, 7, 10, 7, 20, 13, 6, 10, 18, 9, 7, 12, 8, 11, 28, 23, 6, 10, 10, 12, 14, 11, 7, 21, 13, 9, 21, 7, 13, 34, 10, 12, 8, 44, 12, 19, 13, 23, 7, 7, 7, 7, 24, 10, 34, 29, 28, 8, 9, 11, 12, 17, 12, 26, 37, 16, 9, 7, 9, 21, 25, 9, 7, 42, 13, 25, 8, 23, 10]
length(C_list) = 14
termination_sub = WARNING: Dual bound 20.5222 is smaller than the objective of the primal solution 20.5222. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
WARNING: Dual bound 20.5222 is smaller than the objective of the primal solution 20.5222. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
MathOptInterface.INFEASIBLE
iter = 178
[length(mis) for mis = unique(C_list)] = [8, 11, 13, 10, 3, 9, 52, 217, 9, 9, 11, 9, 10, 17, 14, 17, 15, 11, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 179
[length(mis) for mis = unique(C_list)] = [4, 5, 30, 27, 79, 64, 14, 3, 80, 73, 23, 17, 19, 10, 19, 4, 18, 44, 19, 9, 7, 8, 79, 7, 9, 45, 8, 45, 27, 44, 30, 23, 25, 23, 92, 48, 52, 13, 5, 72, 94, 83, 22, 22, 22, 21, 286, 295, 20, 7, 26, 49, 63, 23, 45, 45, 99, 45, 80, 59, 23, 48, 41, 19, 19, 57, 41, 46, 19, 58]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 180
[length(mis) for mis = unique(C_list)] = [57, 6, 7, 4, 6, 24, 7, 6, 12, 7, 88, 17, 20, 15, 10, 5, 20, 9, 14, 6, 7, 6, 24, 7, 7, 17, 8, 8, 8, 10, 29, 17, 22, 6, 24, 24, 19, 8, 18, 6, 5, 22, 6, 7, 21, 55, 21, 19, 7, 54, 35, 12, 7, 7, 14, 7, 7, 27, 17, 6, 11, 20, 24, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 181
[length(mis) for mis = unique(C_list)] = [15, 15, 15, 15, 15, 14, 26, 9, 11, 13, 14, 13, 19, 18, 21, 31, 132, 8, 10, 18, 82, 8, 51, 15, 12, 25, 14, 19, 24, 22, 10, 18, 20, 15, 370, 43, 12, 12, 19, 12, 18, 16, 19, 30, 11, 14, 24, 14, 21, 53, 9, 14, 11, 258, 13, 7, 11, 26, 43, 15, 16, 14, 31, 44, 19, 43, 12, 44, 14, 16, 16, 27, 8, 46, 8, 38, 62, 107, 15, 44, 29, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 182
[length(mis) for mis = unique(C_list)] = [24, 22, 4, 26, 14, 18, 4, 5, 5, 4, 40, 34, 4, 34, 14, 39, 87, 39, 20, 14, 14, 18, 4, 13, 39, 19, 6, 35, 21, 21, 7, 16, 28, 6, 5, 4, 6, 5, 36, 37, 23, 8, 8, 23, 23, 32, 8, 16, 12, 15, 20, 15, 4, 16, 16, 18, 30, 29, 40, 26, 10, 5, 14, 7, 14, 17, 18, 5, 11, 21, 52, 49, 22, 22, 10, 32, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 183
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 5, 5, 5, 6, 5, 5, 7, 5, 6, 5, 24, 8, 5, 6, 5, 10, 12, 51, 4, 6, 7, 39, 49, 14, 51, 5, 5, 7, 56, 9, 74, 12, 8, 10, 6, 9, 6, 5, 164, 29, 7, 6, 6, 10, 49, 49, 50, 4, 62, 4, 6, 23, 6, 8, 5, 5, 50, 9, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 184
[length(mis) for mis = unique(C_list)] = [7, 5, 27, 47, 32, 14, 30, 7, 46, 16, 29, 4, 26, 28, 12, 25, 35, 20, 13, 37, 43, 16, 27, 27, 47, 25, 24, 5, 17, 44, 6, 32, 9, 26, 30, 30, 47, 48, 14, 34, 11, 29, 8, 37, 11, 10, 27, 14, 22, 60, 7, 7, 40, 28, 36, 17, 8, 47, 36, 18, 13, 32, 60, 26, 32, 26, 21, 31, 38, 22, 17, 21, 26, 18, 14, 29, 31]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 185
[length(mis) for mis = unique(C_list)] = [3, 11, 8, 8, 38, 19, 11, 32, 25, 14, 21, 139, 19, 13, 78, 76, 19, 21, 27, 8, 17, 32, 36, 9, 20, 10, 41, 7, 33, 23, 6, 10, 32, 30, 47, 74, 20, 74, 76, 62, 50, 10, 52, 21, 45, 26, 8, 73, 73, 19, 28, 28, 18, 30, 8, 23, 86, 11, 74, 74, 76, 75, 76, 6, 8, 9, 11, 74, 42, 10, 45, 17, 28, 77, 51, 45, 10, 41, 7, 76, 10, 29, 10, 4, 23, 20, 87, 32, 17, 95, 20, 8, 78, 37, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 186
[length(mis) for mis = unique(C_list)] = [4, 9, 5, 31, 14, 7, 5, 5, 5, 5, 7, 5]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 187
[length(mis) for mis = unique(C_list)] = [20, 6, 4, 8, 8, 4, 23, 4, 7, 6, 18, 9, 6, 6, 4, 4, 7, 10, 10, 9, 12, 9, 43, 8, 8, 14, 13, 10, 18, 10, 12, 43, 46, 43, 9, 8, 23, 50, 9, 8, 56, 9, 10, 8, 10, 81, 32, 10, 11, 12, 43, 5, 11, 9, 43, 8, 44, 6, 43, 8, 8, 23, 6, 11, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 188
[length(mis) for mis = unique(C_list)] = [8, 8, 26, 8, 9, 14, 8, 10, 32, 23, 29, 17, 15, 12, 9, 12, 7, 12, 9, 57, 25, 25, 25, 27, 5, 10, 16, 25, 15, 9, 12, 10, 16, 23, 9, 71, 26, 12, 29, 9, 18, 11, 13, 24, 27, 14, 6, 10, 26, 7, 27, 29, 7, 13, 23, 29, 24, 15, 15, 19, 9, 25, 17, 7, 237, 21, 24, 8, 24, 28, 22, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 189
[length(mis) for mis = unique(C_list)] = [6, 4, 11, 8, 7, 7, 3, 10, 6, 6, 13, 4, 15, 21, 4, 7, 7, 7, 11, 7, 8, 5, 12, 12, 12, 77, 8, 8, 13, 9, 8, 8, 8, 8, 4, 7, 4, 6, 7, 8, 7, 14, 18, 7, 18, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 190
[length(mis) for mis = unique(C_list)] = [16, 6, 9, 24, 29, 4, 12, 3, 21, 26, 8, 22, 9, 7, 4, 10, 21, 11, 14, 25, 21, 28, 28, 25, 12, 22, 28, 22, 4, 12, 25, 32, 30, 10, 10, 27, 12, 25, 22, 5, 24, 22, 35, 26, 38, 336, 31, 40, 27, 23, 40, 24, 21, 32, 5, 9, 24, 11, 28, 5, 26, 5, 25, 9, 23, 24, 20, 24, 28, 30, 5, 28, 19, 22, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 191
[length(mis) for mis = unique(C_list)] = [3, 27, 27, 55, 26, 3, 4, 14, 39, 22, 36, 39, 13, 17, 10, 15, 35, 15, 23, 28, 6, 45, 24, 6, 7, 14, 11, 42, 24, 21, 11, 11, 5, 8, 51, 22, 23, 38, 12, 37, 42, 18, 17, 22, 4, 4, 15, 21, 12, 17, 10, 12, 38, 388, 21, 36, 53, 14, 39, 368, 78, 4, 6, 21, 39, 39, 14, 20, 38, 38, 10, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 192
[length(mis) for mis = unique(C_list)] = [12, 5, 20, 8, 21, 8, 21, 10, 11, 25, 9, 4, 23, 10, 22, 7, 9, 156, 8, 21, 17, 26, 24, 9, 8, 22, 9, 26, 9, 21, 4, 19, 24, 18, 28, 9, 13, 10, 21, 11, 10, 4, 7, 9, 24, 21, 11, 20, 13, 20, 27, 22, 25, 21, 18, 19, 8, 22, 11, 8, 15, 8, 11, 10, 7, 7, 21, 21, 21, 11, 24, 20, 19, 20, 20, 23, 29, 28, 25, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 193
[length(mis) for mis = unique(C_list)] = [9, 12, 9, 73, 11, 22, 10, 16, 9, 7, 10, 14, 20, 10, 8, 10, 9, 16, 11, 9, 10, 7, 6, 11, 32, 14, 10, 7, 6, 6, 3, 22, 12, 28, 7, 10, 16, 9, 13, 13, 15, 26, 19, 10, 12, 17, 4, 11, 9, 4, 13, 27, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 194
[length(mis) for mis = unique(C_list)] = [12, 6, 6, 6, 10, 13, 9, 4, 9, 4, 6, 14, 8, 4, 5, 5, 8, 7, 9, 9, 5, 13, 12, 7, 5, 7, 4, 17, 12, 69, 11, 6, 8, 8, 5, 10, 4, 6, 7, 7, 4, 3, 6, 12, 3, 4, 12, 6, 5, 4, 5, 6, 4, 8, 4, 4, 5, 4, 12, 6, 9, 8, 7, 4, 4, 8, 6, 5, 17, 8, 10, 5, 5, 8, 7, 16, 7, 4, 24, 9, 10, 17, 4, 6, 15, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 195
[length(mis) for mis = unique(C_list)] = [27, 35, 4, 16, 19, 13, 26, 5, 25, 16, 6, 6, 16, 46, 26, 21, 57, 19, 12, 5, 13, 244, 13, 6, 21, 12, 22, 22, 18, 8, 12, 19, 12, 31, 212, 6, 47, 21, 18, 22, 23, 12, 18, 17, 5, 17, 6, 11, 19, 16, 28, 19, 24, 22, 5, 6, 17, 7, 21, 17, 41, 18, 26, 28, 22, 25]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 196
[length(mis) for mis = unique(C_list)] = [15, 32, 6, 6, 16, 10, 12, 4, 9, 37, 12, 6, 16, 20, 8, 21, 6, 6, 14, 6, 15, 55, 7, 8, 7, 30, 7, 8, 8, 7, 22, 8, 8, 6, 10, 9, 40, 11, 6, 6, 8, 109, 8, 16, 8, 7, 7, 7, 10, 8, 7, 6, 16, 8, 6, 13, 9, 17, 20, 27, 9, 7, 19, 22, 16, 131, 8, 14, 6, 82, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 197
[length(mis) for mis = unique(C_list)] = [7, 10, 9, 8, 6, 6, 6, 5, 5, 8, 9, 6, 8, 23, 6, 6, 6, 14, 14, 5, 9, 7, 6, 6, 5, 18, 7, 7, 7, 12, 85, 5, 8, 7, 9, 30, 8, 6, 6, 6, 4, 7, 9, 6, 10, 6, 5, 7, 8, 131, 6, 8, 9, 4, 6, 9, 5, 4, 8, 6, 6, 8, 6, 7, 14, 7, 7, 7, 10, 12, 7, 69, 34, 11, 9, 41, 8, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 198
[length(mis) for mis = unique(C_list)] = [3, 5, 4, 4, 20, 6, 6, 6, 8, 5, 5, 5, 5, 7, 4, 46, 6, 13, 7, 6, 3, 14, 7, 5, 8, 5, 25, 5, 22, 4, 5, 83, 7, 15, 15, 44, 26, 7, 5, 9, 6, 89, 10, 8, 14, 10, 8, 5, 7, 7, 6, 10, 16, 5, 5, 5, 4, 5, 5, 9, 10, 5, 4, 7, 14, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 199
[length(mis) for mis = unique(C_list)] = [29, 17, 26, 4, 22, 22, 4, 6, 24, 4, 15, 24, 15, 18, 18, 18, 23, 5, 21, 5, 24, 6, 8, 20, 6, 5, 14, 26, 4, 14, 16, 33, 33, 34, 17, 18, 6, 28, 25, 18, 19, 20, 18, 19, 33, 32, 34, 8, 20, 19, 23, 11, 5, 28, 175, 10, 38, 17, 15, 21, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 200
[length(mis) for mis = unique(C_list)] = [13, 14, 7, 6, 10, 10, 8, 8, 18, 22, 10, 12, 22, 21, 20, 5, 4, 10, 8, 11, 9, 18, 9, 18, 216, 24, 44, 9, 16, 20, 9, 12, 11, 9, 7, 6, 45, 17, 45, 46, 16, 26, 22, 22, 15, 9, 26, 7, 24, 5, 8, 8, 16, 14, 8, 14, 19, 24, 12, 23, 16, 12, 20, 25, 13, 18, 44, 6, 17, 18, 13, 16, 5, 22, 44, 17, 6, 9, 5, 10, 21, 14, 29, 12, 22, 11, 25, 18, 27, 24]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 201
[length(mis) for mis = unique(C_list)] = [7, 3, 27, 23, 4, 25, 19, 22, 24, 4, 4, 12, 23, 4, 21, 9, 36, 19, 75, 26, 17, 4, 28, 80, 17, 46, 22, 4, 5, 20, 53]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 202
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 7, 7, 7, 102, 7, 7, 8, 26, 115, 7, 4, 16, 4, 7, 7, 10, 7, 7, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 203
[length(mis) for mis = unique(C_list)] = [38, 93, 4, 25, 33, 22, 29, 54, 5, 85, 13, 53, 19, 4, 79, 28, 33, 22, 18, 55, 18, 17, 11, 6, 19, 98, 5, 15, 17, 43, 7, 8, 48, 4, 89, 43, 29, 49, 34, 37, 7, 14, 44, 51, 47, 20, 5, 38, 41, 64, 89, 61, 21, 36, 12, 58, 40, 25, 76, 6, 22, 23, 30, 48, 23, 15, 87, 9, 21, 82, 5, 54, 32, 15, 17, 22, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 204
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 6, 9, 3, 4, 5, 21, 32, 6, 4, 31, 3, 11, 7, 6, 19, 24, 7, 4, 5, 10, 8, 7, 5, 6, 58, 4, 4, 6, 5, 5, 12, 4, 7, 6, 6, 12, 4, 8, 18, 6, 22]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 205
[length(mis) for mis = unique(C_list)] = [7, 5, 228, 7, 7, 9, 6, 7, 10, 10, 7, 5, 7, 3, 89, 14, 7, 6, 12, 12, 6, 6, 6, 7, 4, 6, 7, 6, 5, 81, 7, 7, 7, 6, 7, 4, 7, 6, 9, 14, 8, 7, 4, 6, 5, 6, 4, 7, 4, 7, 6, 4, 6, 8, 6, 6, 13, 6, 3, 10, 8, 10, 4, 7, 5, 6, 6, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 206
[length(mis) for mis = unique(C_list)] = [17, 33, 25, 6, 10, 12, 9, 11, 28, 13, 6, 12, 28, 12, 10, 8, 17, 7, 8, 14, 7, 10, 20, 44, 11, 33, 21, 20, 20, 33, 24, 47, 13, 20, 5, 7, 34, 8, 9, 12, 10, 26, 7, 12, 7, 20, 8, 30, 23, 20, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 207
[length(mis) for mis = unique(C_list)] = [28, 23, 23, 27, 12, 71, 12, 28, 10, 14, 17, 25, 8, 60, 13, 23, 22, 99, 12, 37, 24, 19, 25, 9, 11, 13, 33, 27, 25, 12, 65, 24, 25, 25, 24, 8, 33, 24, 25, 25, 12, 18, 10, 26, 25, 17, 14, 11, 29, 38, 32, 18, 24, 23, 18, 28, 22, 11, 10, 24, 9, 24, 15, 24, 26, 11, 24, 4, 9, 35, 27, 27, 12, 23, 24]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 208
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 46, 18, 11, 10, 59, 31, 30, 5, 28, 7, 5, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 209
[length(mis) for mis = unique(C_list)] = [20, 26, 5, 28, 9, 8, 31, 22, 23, 22, 43, 30, 24, 35, 28, 14, 4, 17, 15, 18, 11, 22, 50, 28, 28, 24, 10, 16, 14, 22, 36, 51, 21, 36, 27, 26, 12, 18, 37, 9, 38, 68, 21, 50, 34, 32, 30, 35, 18, 22, 22, 26, 27, 31, 14, 50, 24, 26, 18, 16, 11, 25, 51, 21, 20, 50, 36, 9, 29, 11, 13, 12, 26, 9, 34, 40, 19, 16, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 210
[length(mis) for mis = unique(C_list)] = [15, 23, 12, 8, 11, 10, 10, 11, 24, 14, 13, 4, 14, 23, 5, 24, 3, 14, 16, 21, 22, 10, 18, 16, 19, 47, 17, 23, 10, 24, 10, 4, 22, 205, 157, 25, 29, 44, 44, 41, 44, 6, 17, 15, 11, 14, 12, 18, 8, 5, 13, 13, 15, 18, 12, 17, 10, 24, 11, 26, 12, 29, 32, 10, 44, 13, 14, 9, 9, 13, 12, 44, 44, 9, 10, 18, 14, 12, 22, 4, 10, 21, 12, 12, 12, 6, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 211
[length(mis) for mis = unique(C_list)] = [16, 31, 9, 24, 50, 12, 14, 20, 8, 20, 30, 27, 41, 22, 22, 8, 29, 15, 14, 22, 33, 22, 8, 30, 8, 49, 14, 19, 22, 19, 11, 8, 37, 8, 9, 22, 32, 9, 50, 34, 49, 12, 51, 13, 21, 33, 20, 15, 8, 9, 23, 19, 8, 9, 21, 7, 22, 84, 8, 7, 7, 22, 27, 8, 8, 50, 22, 28, 13, 15, 130, 52, 51, 14, 20, 23, 12, 17, 24, 20, 34, 20, 31, 26, 7, 13, 15, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 212
[length(mis) for mis = unique(C_list)] = [2, 3, 22, 15, 27, 25, 28, 5, 4, 13, 15, 25, 79, 23, 63, 6, 20, 23, 17, 12, 12, 4, 24, 21, 5, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 213
[length(mis) for mis = unique(C_list)] = [21, 20, 11, 13, 14, 19, 12, 12, 12, 8, 25, 25, 20, 9, 9, 31, 13, 10, 19, 19, 9, 11, 11, 15, 9, 22, 19, 12, 11, 19, 20, 8, 26, 19, 16, 13, 24, 15, 12, 10, 12, 12, 10, 17, 23, 3, 26, 42, 12, 32, 22, 17, 26, 21, 11, 13, 23, 34, 14, 19, 15, 17, 27, 11, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 214
[length(mis) for mis = unique(C_list)] = [21, 52, 25, 14, 15, 18, 17, 18, 4, 5, 18, 4, 16, 22, 15, 15, 15, 15, 24, 13, 13, 21, 58, 26, 16, 36, 33, 16, 15, 21, 19, 5, 16, 16, 14, 13, 50, 24, 19, 13, 26, 16, 14, 17, 12, 20, 14, 14, 7, 5, 6, 14, 19, 8, 14, 5, 104, 29, 16, 12, 15, 5, 20, 17, 16, 19, 14, 12, 21, 14, 34, 17, 14, 38, 19, 11, 163, 13, 24, 12, 28]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 215
[length(mis) for mis = unique(C_list)] = [17, 10, 10, 7, 48, 5, 6, 7, 8, 12, 11, 27, 6, 10, 18, 11, 5, 52, 13, 26, 9, 15, 22, 6, 15, 54, 30, 24, 8, 4, 8, 5, 14, 8, 8, 9, 11, 54, 9, 53, 9, 29, 100, 23, 11, 6, 21, 6, 6, 16, 5, 4, 12, 15, 6, 23, 26, 26, 26, 10, 8, 53, 8, 13, 9, 19, 9, 57, 53, 7, 69, 17, 16, 7, 24, 26, 33, 8, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 216
[length(mis) for mis = unique(C_list)] = [13, 28, 30, 6, 29, 28, 11, 25, 15, 10, 14, 7, 6, 33, 27, 33, 7, 18, 25, 14, 12, 29, 28, 14, 17, 8, 9, 12, 7, 12, 14, 7, 31, 8, 16, 33, 30, 34, 22, 9, 45, 31, 10, 9, 33, 27, 33, 23, 13, 16, 21, 38, 12, 31, 28, 35, 16, 13, 32, 30, 10, 33, 27, 10, 67, 33, 21, 9, 41, 12, 7, 18, 11, 6, 17, 34, 8, 23, 10, 31, 23, 34, 12, 16, 35]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 217
[length(mis) for mis = unique(C_list)] = [8, 28, 14, 39, 11, 40, 38, 6, 21, 53, 217, 24, 14, 43, 47, 45, 12, 42, 13, 4, 56, 9, 7, 22, 16, 12, 11, 22, 23, 21, 68, 11, 26, 51, 37, 15, 25, 69, 22, 153, 26, 23, 38, 41, 28, 20, 23, 32, 126, 51, 9, 12, 37, 37, 36, 36, 38, 25, 14, 40, 29, 9, 15, 10, 23, 27, 12, 19, 29, 10, 48, 25, 15, 26]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 218
[length(mis) for mis = unique(C_list)] = [4, 2, 27, 58, 3, 62, 26, 49, 12, 10, 44, 16, 21, 9, 15, 49, 8, 10, 66, 14, 75, 8, 8, 8, 11, 8, 48, 17, 9, 55, 7, 10, 7, 8, 86, 9, 3, 18, 32, 11, 86, 8, 9, 14, 15, 10, 3, 8, 14, 7, 48, 12, 22, 17, 18, 54, 11, 92, 13, 59, 8, 11, 9, 21, 9, 12, 62, 49, 9, 52]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 219
[length(mis) for mis = unique(C_list)] = [37, 4, 26, 24, 4, 25, 26, 28, 4, 8, 37, 42, 35, 35, 26, 4, 7, 10, 28, 36, 27, 8, 4, 19, 26, 25, 4, 24, 4, 7, 41, 4, 38, 27, 9, 52, 24, 47, 12, 25, 25, 39, 36, 28, 44, 14, 9, 9, 9, 13, 35, 19, 23, 26, 20, 51, 12, 15, 24, 39, 9, 31, 24, 5, 9, 25, 25, 20, 7, 16, 31, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 220
[length(mis) for mis = unique(C_list)] = [55, 8, 6, 12, 5, 4, 17, 12, 12, 16, 113, 14, 4, 9, 9, 7, 11, 20, 11, 22, 15, 14, 60, 14, 17, 26, 25, 39, 13, 11, 15, 14, 14, 10, 14, 24, 9, 12, 33, 242, 14, 12, 5, 26, 8, 13, 43, 20, 11, 9, 25, 21, 20, 25, 34, 27, 21, 28, 8, 13, 13, 35, 8, 15, 31, 19, 22, 9, 12, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 221
[length(mis) for mis = unique(C_list)] = [41, 5, 3, 10, 6, 7, 7, 18, 8, 12, 307, 5, 18, 24, 10, 15, 7, 28, 23, 23, 9, 23, 22, 4, 27, 7, 17, 23, 8, 43, 8, 9, 8, 11, 10, 28, 33, 76, 8, 8, 12, 12, 4, 23, 8, 20, 4, 23, 9, 9, 6, 17, 12, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 222
[length(mis) for mis = unique(C_list)] = [29, 4, 20, 19, 15, 13, 12, 17, 15, 13, 4, 18, 44, 28, 11, 6, 13, 11, 8, 17, 20, 20, 10, 17, 12, 10, 22, 14, 35, 17, 15, 8, 47, 14, 25, 15, 55, 17, 4, 3, 20, 8, 15, 13, 12, 14, 11, 20, 12, 5, 12, 12, 82, 4, 14, 18, 15, 13, 11, 13, 15, 7, 36, 14, 19, 19, 12, 27, 21, 14, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 223
[length(mis) for mis = unique(C_list)] = [15, 10, 4, 4, 4, 4, 9, 4, 7, 4, 4, 17, 6, 10, 14, 8, 4, 51, 4, 46, 24, 8, 5, 4, 6, 9, 7, 4, 8, 46, 13, 46, 49, 6, 12, 7, 17, 8, 4, 5, 6, 9, 6, 14, 11, 11, 11, 5, 20, 4, 24, 47, 4, 114, 104, 41, 46, 46, 59, 5, 15, 58, 7, 10, 24, 11, 15, 9, 113, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 224
[length(mis) for mis = unique(C_list)] = [10, 20, 10, 24, 25, 13, 16, 15, 4, 19, 15, 21, 9, 23, 16, 21, 11, 33, 13, 11, 10, 12, 19, 25, 10, 13, 14, 10, 16, 13, 10, 11, 17, 20, 101, 8, 24, 7, 153, 7, 26, 17, 7, 13, 92, 20, 10, 13, 9, 13, 13, 8, 7, 15, 48, 13, 10, 8, 13, 11, 11, 100, 23, 14, 12, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 225
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 225
termination = MathOptInterface.OPTIMAL
objective_value = 20.522225630812265
thermo_feasible = true
