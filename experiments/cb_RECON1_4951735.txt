┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
RECON1
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

RECON1
----------------------------------
number of metabolites : 2766
number of reactions : 3741
number of genes : 1905

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 187
max_cuts = 19
(indicator, big_m) = (false, true)
BIG M ADDED
model with 3741 flux variables and 7052 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 4, 2, 4, 4, 6, 8, 5, 9, 2, 5, 8, 6, 3, 3, 42, 4, 4, 7, 3, 22, 4, 4, 272, 5, 9, 580, 4, 593, 2, 4, 6, 4, 3, 3, 4, 3, 3, 74, 5, 8, 409, 10, 3, 7, 8, 353, 4, 5, 4, 6, 16, 5, 5, 8, 94, 4, 14, 7, 3, 4, 226, 6, 4, 120, 7, 8, 13, 12, 2, 4, 9, 5, 4, 5, 5, 4, 5, 8, 4, 4, 4, 8, 5, 132, 6, 5, 4, 5, 520, 7, 3, 6, 8, 4, 256, 4]
length(C_list) = 19
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 5, 2, 5, 8, 2, 6, 8, 8, 2, 4, 137, 5, 4, 4, 4, 105, 359, 90, 4, 3, 4, 4, 4, 537, 444, 4, 3, 4, 3, 32, 4, 4, 39, 3, 3, 3, 4, 10, 517, 5, 5, 4, 330, 214, 10, 25, 8, 10, 8, 342, 4, 78, 5, 10, 16, 7, 93, 4, 4, 5, 8, 6, 9, 5, 8, 9, 28, 11, 27, 6, 6, 2, 5, 4, 6, 3, 4, 5, 5, 645, 7, 2, 84, 5, 92, 3, 5, 4, 7, 5, 3, 6, 2, 7, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 2, 5, 4, 2, 4, 4, 4, 6, 4, 5, 3, 6, 6, 5, 4, 5, 5, 13, 4, 5, 73, 3, 6, 4, 4, 5, 3, 8, 2, 6, 3, 8, 217, 12, 3, 4, 5, 4, 17, 6, 6, 7, 6, 7, 9, 11, 5, 53, 8, 6, 6, 7, 16, 8, 4, 7, 2, 6, 5, 4, 5, 4, 5, 3, 6, 16, 5, 6, 5, 4, 6, 6, 7, 4, 166, 4, 6, 4, 6, 8, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [5, 2, 2, 5, 3, 4, 6, 3, 4, 5, 4, 5, 3, 4, 6, 4, 5, 3, 6, 8, 4, 4, 5, 7, 4, 16, 6, 4, 4, 3, 8, 7, 10, 3, 3, 5, 5, 284, 4, 3, 3, 3, 175, 3, 4, 3, 4, 4, 4, 5, 247, 16, 7, 4, 21, 9, 5, 5, 3, 4, 4, 9, 6, 8, 3, 7, 3, 3, 45, 364, 11, 5, 5, 4, 4, 11, 4, 7, 3, 5, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 5, 2, 7, 2, 7, 6, 7, 3, 6, 3, 7, 6, 8, 5, 5, 4, 6, 7, 5, 3, 5, 114, 4, 51, 3, 5, 4, 8, 8, 3, 4, 4, 62, 4, 4, 4, 3, 4, 212, 6, 5, 5, 6, 7, 5, 6, 6, 4, 5, 5, 309, 3, 5, 4, 5, 4, 4, 4, 16, 6, 8, 6, 5, 6, 6, 44, 6, 59, 3, 6, 6, 5, 102, 3, 7, 6, 17, 4, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 5, 2, 5, 5, 6, 5, 2, 5, 3, 6, 9, 3, 6, 301, 2, 7, 4, 7, 2, 3, 6, 6, 4, 7, 5, 3, 7, 7, 5, 6, 4, 4, 3, 4, 51, 9, 5, 4, 6, 6, 7, 5, 4, 2, 5, 2, 95, 9, 5, 6, 4, 244, 5, 6, 6, 7, 17, 2, 5, 5, 4, 3, 6, 6, 6, 5, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 6, 8, 4, 6, 4, 6, 4, 5, 5, 5, 6, 8, 6, 48, 5, 4, 3, 5, 6, 4, 4, 4, 4, 3, 7, 5, 8, 238, 4, 8, 4, 4, 133, 226, 111, 3, 4, 7, 5, 6, 6, 5, 4, 6, 4, 11, 5, 9, 7, 6, 5, 51, 5, 5, 4, 7, 6, 5, 5, 7, 52, 8, 23, 6, 7, 7, 5, 6, 4, 7, 5, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 4, 4, 5, 7, 4, 4, 5, 5, 5, 4, 4, 6, 4, 6, 5, 4, 4, 5, 24, 7, 6, 4, 7, 6, 5, 39, 4, 4, 20, 11, 7, 8, 4, 12, 4, 6, 9, 135, 4, 5, 5, 4, 5, 7, 6, 4, 4, 6, 4, 5, 5, 4, 5, 4, 3, 6, 6, 5, 5, 5, 6, 8, 5, 19, 8, 5, 5, 11, 6, 5, 5, 22, 6, 7, 4, 4, 11, 5, 6, 6, 5, 16, 6, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 4, 3, 6, 4, 4, 5, 5, 6, 6, 3, 5, 5, 6, 7, 4, 4, 5, 12, 5, 6, 9, 4, 5, 5, 6, 10, 6, 4, 5, 8, 6, 5, 5, 253, 4, 5, 4, 9, 4, 4, 9, 5, 5, 6, 5, 3, 4, 4, 254, 4, 6, 5, 22, 6, 4, 4, 4, 7, 18, 6, 4, 7, 6, 4, 6, 7, 6, 7, 4, 5, 4, 4, 5, 6, 4, 6, 11, 6, 4, 6, 6, 7, 7, 3, 4, 3, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 4, 5, 4, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 4, 78, 5, 7, 6, 6, 5, 5, 6, 4, 4, 5, 3, 4, 9, 5, 4, 5, 3, 5, 4, 4, 5, 4, 4, 5, 3, 7, 4, 38, 4, 4, 6, 6, 5, 16, 6, 5, 17, 7, 5, 4, 378, 7, 5, 7, 5, 4, 6, 5, 259, 7, 4, 5, 4, 6, 6, 6, 4, 4, 6, 4, 6, 5, 5, 4, 6, 5, 5, 5, 5, 4, 3, 4, 4, 6, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 7, 6, 6, 3, 5, 4, 7, 4, 5, 5, 7, 6, 7, 3, 6, 5, 4, 5, 6, 5, 6, 5, 4, 5, 4, 5, 6, 4, 4, 4, 5, 4, 4, 7, 4, 5, 7, 4, 5, 4, 19, 4, 8, 7, 67, 4, 6, 5, 5, 6, 4, 9, 4, 5, 6, 7, 5, 4, 5, 8, 5, 5, 202, 5, 36, 5, 4, 6, 3, 4, 7, 5, 6, 5, 5, 6, 4, 7, 46, 5, 55, 5, 63, 5, 6, 5, 5, 7, 4, 6, 22, 9, 6, 4, 5, 6, 4, 4, 6, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [6, 5, 5, 6, 7, 4, 5, 6, 5, 7, 8, 4, 404, 4, 4, 4, 4, 4, 5, 5, 7, 4, 5, 7, 6, 3, 11, 6, 5, 4, 11, 4, 7, 7, 6, 4, 7, 7, 4, 4, 6, 6, 6, 5, 4, 11, 21, 6, 5, 6, 4, 5, 5, 4, 6, 5, 4, 6, 19, 4, 8, 18, 5, 6, 259, 6, 4, 4, 7, 5, 4, 5, 4, 6, 4, 6, 4, 13, 4, 6, 5, 5, 5, 5, 4, 7, 7, 6, 6, 5, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 4, 4, 6, 8, 4, 4, 7, 6, 5, 8, 4, 4, 6, 7, 6, 4, 5, 4, 4, 5, 4, 7, 33, 6, 5, 7, 4, 8, 53, 4, 6, 6, 4, 5, 5, 6, 4, 5, 9, 7, 6, 5, 7, 5, 5, 4, 7, 5, 309, 7, 7, 4, 5, 5, 6, 4, 5, 19, 6, 6, 112, 6, 4, 7, 5, 8, 6, 6, 6, 5, 5, 4, 4, 4, 5, 7, 4, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 9, 28, 9]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 4, 5, 4, 8, 4, 5, 4, 5, 3, 6, 8, 4, 4, 6, 6, 7, 6, 4, 6, 4, 4, 7, 5, 7, 4, 16, 5, 4, 8, 5, 5, 7, 6, 5, 6, 5, 4, 34, 4, 3, 4, 5, 5, 6, 5, 4, 9, 5, 4, 5, 5, 5, 5, 4, 4, 4, 4, 4, 6, 6, 4, 6, 5, 4, 5, 8, 4, 5, 7, 6, 4, 6, 4, 5, 6, 29, 45, 112, 9, 5, 6, 7, 12]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [2, 6, 4, 5, 4, 6, 6, 15, 3, 6, 4, 4, 5, 5, 4, 4, 5, 4, 10, 5, 5, 5, 4, 5, 5, 4, 4, 6, 6, 6, 4, 4, 4, 5, 11, 6, 7, 9, 4, 6, 10, 5, 4, 4, 6, 8, 3, 5, 4, 5, 7, 15, 6, 4, 4, 5, 9, 4, 329, 5, 4, 30, 6, 4, 10, 4, 6, 8, 6, 4, 4, 412, 6, 6, 3, 4, 14, 5, 4, 5, 8, 19, 6, 6, 4, 5, 5, 5, 6, 5, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 6, 4, 5, 3, 9, 4, 4, 4, 24, 5, 4, 4, 4, 4, 6, 4, 5, 16, 3, 6, 6, 6, 5, 5, 6, 6, 37, 5, 4, 6, 5, 4, 4, 4, 6, 6, 4, 6, 7, 153, 104, 5, 6, 194, 16, 5, 6, 4, 8, 4, 5, 166, 7, 4, 5, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 4, 3, 3, 4, 6, 15, 2, 4, 3, 7, 5, 98, 7, 3, 3, 3, 5, 204, 2, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 4, 6, 4, 6, 6, 5, 7, 6, 4, 4, 5, 4, 5, 4, 4, 4, 5, 4, 11, 4, 5, 6, 6, 4, 5, 6, 5, 44, 4, 5, 5, 6, 7, 4, 4, 7, 6, 5, 5, 4, 4, 5, 4, 5, 4, 5, 5, 6, 4, 6, 6, 4, 6, 5, 116, 5, 89, 4, 4, 6, 6, 28, 4, 6, 6, 4, 5, 10, 7, 6, 6, 13, 9, 103, 6, 9, 4, 6, 5, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [2, 7, 4, 5, 4, 5, 5, 5, 4, 4, 4, 5, 6, 5, 6, 6, 5, 4, 4, 5, 4, 5, 6, 5, 5, 6, 4, 7, 6, 5, 6, 6, 59, 5, 5, 4, 4, 7, 5, 8, 4, 6, 4, 100, 3, 7, 6, 5, 6, 5, 5, 27, 5, 9, 6, 5, 6, 4, 5, 5, 5, 7, 5, 4, 5, 5, 7, 5, 6, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 5, 4, 5, 6, 5, 6, 5, 6, 3, 4, 3, 5, 4, 5, 5, 6, 5, 3, 4, 6, 4, 4, 5, 5, 5, 4, 100, 5, 6, 5, 3, 4, 4, 5, 7, 4, 4, 5, 5, 4, 5, 5, 3, 5, 5, 4, 5, 7, 5, 5, 4, 4, 6, 6, 5, 5, 4, 4, 6, 47, 4, 6, 9, 6, 6, 4, 4, 5, 5, 12, 5, 5, 5, 8, 4, 3, 7, 4, 6, 7, 7, 4, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [5, 7, 4, 4, 4, 6, 5, 4, 4, 5, 5, 6, 3, 4, 5, 5, 7, 7, 5, 5, 4, 6, 4, 35, 19, 6, 6, 5, 3, 5, 4, 2, 7, 61, 5, 6, 5, 6, 107, 3, 272, 7, 6, 6, 6, 45, 6, 2, 3, 7, 6, 5, 14, 78, 7, 5, 4, 7, 61]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 5, 5, 5, 5, 4, 6, 6, 4, 3, 4, 5, 6, 8, 4, 4, 4, 29, 4, 5, 4, 4, 3, 6, 7, 5, 6, 6, 70, 5, 4, 4, 4, 3, 6, 4, 5, 5, 5, 6, 6, 5, 5, 6, 5, 6, 4, 5, 7, 6, 5, 4, 5, 6, 5, 5, 6, 5, 4, 5, 4, 3, 4, 4, 5, 5, 7, 6, 5, 5, 6, 4, 3, 5, 5, 5, 6, 5, 5, 4, 4, 6, 3, 6, 111, 5, 5, 5, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 5, 4, 5, 4, 3, 6, 7, 7, 6, 5, 8, 7, 7, 4, 4, 6, 5, 6, 5, 4, 5, 8, 6, 3, 3, 2, 92, 5, 5, 4, 5, 10, 5, 6, 7, 10, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [2, 6, 4, 5, 4, 7, 4, 4, 7, 4, 4, 4, 6, 5, 4, 7, 3, 4, 5, 4, 5, 5, 6, 5, 5, 142, 5, 7, 5, 5, 6, 73, 4, 107, 6, 7, 101, 6, 5, 6, 4, 5, 4, 4, 5, 4, 7, 6, 8, 7, 6, 4, 281, 4, 6, 6, 5, 6, 25, 5, 6, 4, 6, 25, 4, 5, 7, 7, 8, 7, 5, 5, 5, 5, 7, 6, 7, 6, 8, 6, 5, 5, 5, 5, 4, 25, 5, 7, 26]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [3, 6, 6, 247, 6, 5, 6, 6, 4, 5, 5, 4, 5, 4, 6, 3, 5, 4, 7, 5, 6, 4, 7, 5, 8, 6, 4, 5, 7, 5, 4, 6, 4, 5, 4, 4, 5, 6, 4, 5, 7, 5, 4, 5, 4, 6, 3, 6, 4, 3, 5, 5, 5, 7, 163, 4, 200, 3, 5, 5, 5, 7, 4, 6, 5, 6, 5, 9, 7, 6, 6, 8, 5, 236]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 5, 4, 5, 3, 3, 5, 144, 3, 3, 3, 6, 4, 5, 3, 5, 5, 20, 6, 3, 4, 4, 7, 3, 4, 5, 5, 5, 6, 3, 6, 3, 4, 6, 12, 53]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 6, 5, 5, 5, 4, 8, 6, 5, 6, 4, 4, 5, 5, 3, 4, 6, 6, 5, 6, 3, 5, 4, 4, 4, 4, 5, 3, 5, 6, 4, 5, 5, 3, 5, 4, 4, 4, 6, 3, 4, 5, 5, 4, 7, 5, 5, 7, 5, 6, 4, 4, 6, 74, 194, 5, 5, 4, 5, 298, 8, 5, 4, 7, 3, 5, 7, 5, 4, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 5, 4, 5, 4, 4, 4, 4, 4, 3, 5, 5, 40, 4, 5, 4, 5, 5, 9, 7, 5, 5, 4, 5, 4, 7, 4, 3, 3, 5, 5, 5, 5, 3, 5, 5, 4, 5, 60, 5, 5, 5, 6, 5, 5, 6, 4, 159, 4, 5, 4, 69, 6, 5, 22, 8, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [3, 5, 3, 4, 4, 4, 5, 19, 5, 5, 6, 5, 4, 5, 5, 4, 5, 5, 5, 4, 234, 5, 362, 4, 4, 5, 3, 4, 3, 7, 5, 105, 5, 4, 5, 117, 4, 4, 3, 11, 4, 8, 19, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [3, 5, 3, 4, 6, 70, 5, 22, 5, 124, 4, 4, 4, 5, 233, 4, 5, 5, 6, 5, 5, 4, 5, 7, 6, 6, 4, 4, 6, 4, 12, 68, 6, 4, 8, 3, 5, 5, 5, 6, 10, 4, 6, 40, 6, 6, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 5, 6, 4, 4, 4, 6, 35, 7, 6, 6, 5, 6, 173, 6, 5, 7, 5, 6, 382, 6, 5, 5, 22, 6, 5, 4, 5, 5, 37, 6, 8, 4, 13, 6, 6, 5, 7, 5, 5, 10, 227]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 3, 4, 4, 6, 4, 5, 35, 4, 6, 5, 4, 4, 4, 7, 5, 7, 9, 6, 4, 4, 5, 5, 4, 7, 5, 5, 4, 3, 6, 4, 4, 6, 4, 5, 5, 3, 5, 4, 6, 13, 6, 6, 6, 6, 6, 5, 6, 363, 5, 6, 5, 6, 5, 5, 87, 6, 5, 5, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 5, 5, 4, 5, 3, 4, 4, 5, 7, 5, 5, 4, 4, 4, 68, 5, 4, 6, 419, 4, 6, 5, 14, 5, 5, 4, 6, 6, 6, 4, 5, 6, 6, 9, 5, 4, 3, 6, 6, 4, 4, 5, 4, 6, 29, 6, 6, 6, 6, 70, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 6, 6, 9, 3, 4, 5, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 5, 22, 6, 7, 5, 143]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 5, 4, 3, 5, 5, 5, 5, 4, 10]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [3, 6, 4, 4, 7, 6, 5, 5, 156, 5, 5, 8, 5, 5, 4, 48, 6, 7, 14, 80, 11, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 36
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
