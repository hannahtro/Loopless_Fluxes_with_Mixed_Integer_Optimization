┌ Warning: master problem cannot be solved
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:486
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iCN718
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iCN718
----------------------------------
number of metabolites : 888
number of reactions : 1015
number of genes : 709

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 41
max_cuts = 20
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 1015 flux variables and 1902 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [1, 3, 7, 4, 5, 7, 58, 3, 3, 3, 4, 2, 3, 7, 4]
length(C_list) = 15
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 1, 9, 9, 2, 4, 9, 9, 4, 2, 6, 4, 9, 9, 4, 4, 9, 6, 8, 4]
length(C_list) = 20
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
termination_master = MathOptInterface.INFEASIBLE
BoundsError((missing, Any[1.3135912923645512, 1.313591292364548], Any[1.3135912923645512, 1.313591292364548], missing, missing, missing, missing, missing, 0.09045982360839844, MathOptInterface.INFEASIBLE, 2, Any[(Any[], Any[809], 1), (Any[291, 662], Any[], 2), (Any[521, 525], Any[701], 3), (Any[228], Any[17, 69], 3), (Any[44], Any[761, 762], 3), (Any[22, 748], Any[747], 3), (Any[63, 291, 662], Any[], 3), (Any[166, 631], Any[94, 164], 4), (Any[134, 141, 649], Any[121], 4), (Any[39, 134], Any[17, 121], 4), (Any[44, 60, 198], Any[14, 53], 5), (Any[166, 323, 363, 544, 631], Any[94, 164], 7), (Any[44, 60, 198, 315, 552], Any[14, 53], 7), (Any[36, 67, 73, 141, 649], Any[69, 237], 7), (Any[34, 40, 43, 44, 55, 60, 73, 74, 86, 88, 114, 116, 122, 127, 128, 130, 142, 178, 198, 221, 225, 232, 235, 315, 323, 334, 343, 344, 348, 457, 458, 460, 461, 521, 525, 552, 640, 720, 772, 774, 777, 780, 822, 836, 837], Any[37, 38, 53, 79, 94, 105, 123, 237, 240, 633, 701, 718, 724], 58), (Any[809], Any[], 1), (Any[648], Any[39], 2), (Any[289, 292], Any[], 2), (Any[720, 721], Any[718, 722], 4), (Any[141, 384, 649], Any[489], 4), (Any[704, 737, 740], Any[702], 4), (Any[17, 141, 649], Any[39], 4), (Any[141, 649, 753], Any[814], 4), (Any[141, 649, 704], Any[702], 4), (Any[17, 102], Any[39, 533], 4), (Any[48, 704, 737, 740], Any[702, 749], 6), (Any[141, 649, 708, 813], Any[656, 660], 6), (Any[49, 61, 198, 404, 641, 760], Any[14, 424], 8), (Any[49, 61, 198, 641, 760, 854], Any[14, 660, 855], 9), (Any[49, 61, 198, 641, 737, 740, 760], Any[14, 660], 9), (Any[49, 61, 102, 198, 641, 760], Any[14, 533, 660], 9), (Any[49, 61, 141, 198, 641, 649, 760], Any[14, 660], 9), (Any[49, 61, 121, 198, 641, 760], Any[14, 134, 660], 9), (Any[49, 61, 123, 198, 641, 760], Any[14, 119, 660], 9), (Any[49, 61, 127, 198, 383, 641, 650, 760], Any[14], 9)], Any[3.8520100116729736, 1.9107940196990967, 0.05965995788574219], Any[0.022450923919677734, 0.003946065902709961], Any[3.3275229930877686, 0.20947909355163574]), 16)
