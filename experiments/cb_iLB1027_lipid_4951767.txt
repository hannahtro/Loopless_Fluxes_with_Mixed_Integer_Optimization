┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iLB1027_lipid
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iLB1027_lipid
----------------------------------
number of metabolites : 2172
number of reactions : 4456
number of genes : 1027

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 89
max_cuts = 22
(indicator, big_m) = (false, true)
BIG M ADDED
model with 4456 flux variables and 8868 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [8, 4, 8, 311, 3, 3, 30, 3, 19, 431, 5, 5, 15, 19, 20, 243, 6, 34, 248, 82, 24, 4, 35, 3, 3, 52, 165, 32, 3, 19, 6, 23, 69, 36, 6, 19, 148, 57, 3, 15, 18, 24, 3, 15, 213, 64]
length(C_list) = 22
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 6, 3, 52, 9, 3, 9, 9, 7, 3, 6, 8, 3, 119, 207, 3, 7, 32, 14, 3, 25, 208, 14, 37, 6, 3, 41, 70, 9, 12, 9, 86, 15, 7, 3, 275, 61, 19, 55, 3, 3, 90, 9, 52, 11, 8, 4, 7, 67, 5, 6, 48, 20, 28, 9, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [3, 3, 8, 69, 36, 96, 9, 8, 7, 72, 4, 40, 4, 4, 143, 474, 4, 94, 3, 43, 8, 4, 66, 4, 10, 3, 12, 25, 26, 27, 67, 24, 4, 4, 19, 8, 4, 4, 4, 7, 4, 4, 54, 67, 68, 73, 26, 72, 8, 69, 4, 4, 4, 4, 74, 32, 16, 98, 63, 53, 4, 4, 8, 5, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 28, 4, 4, 81, 4, 51, 42, 4, 30, 4, 15, 4, 8, 4, 47, 4, 20, 14, 4, 63, 4, 10, 4, 36, 4, 59, 4, 3, 61, 63, 4, 59, 6, 4, 4, 4, 4, 61, 4, 5, 6, 80, 64, 4, 28, 3, 7, 5, 40, 4, 4, 4, 28, 4, 4, 5, 4, 4, 4, 12, 6, 24, 3, 6, 80, 4, 4, 113, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 35, 10, 3, 37, 8, 8, 3, 7, 6, 4, 4, 4, 8, 4, 3, 4, 4, 20, 9, 4, 38, 4, 10, 4, 13, 4, 25, 3, 44, 24, 4, 25, 10, 4, 4, 4, 4, 8, 4, 4, 4, 68, 34, 9, 35, 3, 4, 5, 4, 4, 4, 4, 7, 35, 4, 4, 4, 6, 9, 16, 33, 4, 4, 4, 73, 256, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [8, 4, 3, 18, 4, 4, 29, 3, 7, 19, 5, 22, 4, 4, 4, 7, 5, 4, 4, 4, 33, 8, 4, 45, 4, 11, 3, 8, 3, 33, 20, 111, 35, 25, 4, 37, 4, 4, 4, 4, 44, 3, 4, 229, 7, 4, 4, 4, 3, 4, 75, 43, 4, 19, 5, 4, 4, 4, 197, 4, 4, 4, 4, 4, 5, 4, 7, 3, 7, 4, 6, 4, 20, 19, 4, 20, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [8, 4, 5, 46, 4, 4, 386, 45, 7, 4, 4, 405, 4, 5, 4, 7, 4, 4, 4, 29, 8, 5, 23, 4, 33, 4, 8, 4, 27, 27, 28, 27, 11, 4, 4, 4, 4, 3, 4, 24, 4, 4, 3, 3, 21, 42, 3, 32, 4, 4, 4, 57, 4, 4, 41, 4, 4, 27, 4, 4, 12, 3, 11, 32, 4, 3, 3, 4, 4, 3, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [9, 83, 4, 4, 4, 3, 4, 4, 7, 43, 4, 30, 3, 4, 4, 7, 134, 4, 4, 4, 42, 8, 4, 73, 4, 11, 4, 8, 4, 26, 3, 44, 65, 26, 6, 45, 4, 4, 4, 4, 4, 8, 4, 4, 6, 31, 70, 4, 20, 4, 3, 4, 4, 3, 4, 46, 4, 4, 8, 4, 4, 3, 4, 4, 4, 17, 6, 4, 34, 4, 4, 4, 45, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 57, 4, 97, 6, 4, 7, 9, 4, 105, 4, 4, 4, 406, 4, 4, 4, 49, 8, 4, 68, 4, 10, 4, 9, 4, 62, 3, 16, 50, 80, 4, 51, 4, 4, 4, 4, 4, 7, 15, 4, 4, 48, 48, 3, 4, 10, 3, 4, 4, 65, 4, 4, 4, 4, 8, 84, 78, 4, 4, 16, 4, 84, 50, 49, 4, 4, 12, 285]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [10, 4, 8, 4, 3, 104, 62, 4, 7, 66, 8, 43, 5, 4, 5, 7, 4, 107, 4, 20, 74, 4, 15, 4, 11, 3, 8, 4, 26, 70, 3, 26, 23, 4, 25, 5, 4, 3, 48, 7, 4, 4, 5, 44, 490, 4, 4, 63, 4, 4, 34, 83, 4, 4, 4, 4, 4, 4, 7, 18, 6, 23, 55, 4, 4, 49, 4, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [3, 14, 4, 90, 4, 86, 5, 214, 7, 94, 226, 92, 235, 59, 5, 7, 5, 80, 5, 231, 20, 8, 227, 84, 227, 10, 4, 12, 227, 23, 95, 55, 86, 26, 4, 3, 5, 4, 60, 227, 111, 7, 4, 8, 31, 86, 98, 96, 97, 95, 88, 53, 76, 46, 4, 4, 82, 3, 123, 4, 54, 4, 10, 4, 4, 16, 6, 4, 92, 36, 96, 97, 56, 3, 56, 51]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 18, 4, 4, 20, 4, 7, 5, 4, 3, 4, 6, 7, 47, 41, 9, 4, 20, 8, 4, 17, 4, 178, 4, 8, 6, 25, 8, 112, 26, 61, 4, 25, 4, 3, 4, 4, 8, 8, 3, 59, 13, 4, 19, 20, 18, 10, 4, 4, 5, 4, 19, 5, 17, 5, 7, 4, 4, 17, 406, 4, 23, 6, 6, 20, 4, 119, 4, 92, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [6, 4, 7, 70, 4, 101, 41, 5, 7, 47, 4, 4, 9, 4, 4, 7, 4, 87, 70, 4, 20, 8, 14, 15, 8, 11, 4, 8, 8, 31, 56, 28, 31, 23, 4, 28, 4, 4, 3, 4, 7, 153, 5, 45, 13, 74, 48, 29, 47, 6, 4, 4, 87, 98, 4, 4, 99, 4, 4, 374, 6, 4, 31, 56, 4, 6, 139, 199, 4, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 18, 3, 5, 39, 5, 39, 41, 5, 36, 5, 5, 4, 6, 4, 4, 4, 4, 20, 7, 5, 32, 4, 308, 5, 8, 6, 32, 20, 19, 34, 23, 11, 33, 5, 3, 5, 4, 11, 6, 18, 4, 63, 32, 11, 19, 198, 116, 4, 9, 4, 22, 4, 4, 3, 7, 5, 17, 4, 22, 5, 21, 19, 4, 20, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [31, 14, 3, 41, 9, 4, 32, 7, 6, 28, 7, 4, 4, 4, 11, 4, 4, 5, 23, 274, 4, 35, 11, 12, 8, 23, 24, 23, 24, 88, 7, 24, 12, 4, 8, 4, 4, 6, 7, 9, 52, 34, 38, 29, 74, 29, 8, 4, 4, 4, 4, 5, 38, 7, 11, 4, 3, 11, 4, 36, 161, 6, 6, 4, 29, 30, 4, 24, 4, 29, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [4, 4, 10, 7, 4, 3, 6, 11, 6, 27, 3, 30, 7, 8, 11, 54, 5, 7, 7, 11, 20, 25, 7, 33, 10, 12, 8, 4, 28, 28, 31, 29, 4, 4, 29, 3, 12, 7, 6, 8, 4, 11, 35, 10, 7, 341, 66, 10, 11, 8, 8, 5, 4, 4, 11, 115, 7, 4, 10, 16, 6, 28, 9, 5, 4, 4, 11, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [12, 11, 4, 10, 4, 85, 4, 13, 603, 28, 6, 36, 6, 10, 4, 6, 90, 11, 25, 20, 7, 13, 120, 8, 10, 11, 10, 13, 23, 25, 3, 49, 26, 12, 4, 8, 11, 5, 11, 6, 4, 13, 4, 45, 56, 5, 26, 27, 4, 4, 66, 11, 4, 9, 84, 11, 8, 11, 16, 6, 6, 11, 53, 65, 27, 30, 4, 10, 320]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 13, 3, 4, 10, 4, 4, 4, 5, 14, 4, 31, 4, 4, 207, 5, 8, 8, 8, 8, 50, 11, 4, 5, 4, 52, 4, 11, 4, 24, 4, 26, 4, 3, 28, 7, 9, 6, 11, 10, 13, 5, 4, 4, 14, 4, 33, 11, 5, 4, 4, 6, 14, 10, 4, 3, 9, 9, 62, 36, 13, 8, 4, 3, 4, 4, 4, 46, 3, 4, 4, 4, 90, 13, 14, 9, 8, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [6, 16, 11, 4, 8, 3, 9, 23, 28, 4, 10, 27, 5, 11, 4, 86, 42, 4, 3, 10, 20, 4, 4, 5, 4, 12, 8, 9, 11, 24, 24, 168, 57, 13, 25, 11, 13, 4, 11, 5, 13, 25, 4, 44, 31, 7, 25, 10, 4, 8, 5, 98, 4, 5, 12, 11, 4, 10, 18, 30, 26, 10, 25, 26, 4, 13, 7]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [55, 16, 4, 11, 4, 5, 5, 4, 6, 279, 10, 6, 16, 4, 11, 5, 11, 4, 4, 168, 20, 5, 9, 9, 6, 23, 26, 107, 4, 4, 9, 6, 11, 4, 13, 7, 11, 3, 5, 28, 10, 4, 61, 27, 6, 13, 11, 4, 4, 11, 26, 11, 4, 8, 10, 4, 5, 36, 4, 6, 22, 4, 17, 28, 11, 101, 10]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [6, 12, 9, 33, 4, 5, 73, 3, 5, 80, 8, 72, 10, 7, 9, 17, 8, 3, 16, 73, 5, 134, 9, 13, 9, 9, 8, 47, 70, 34, 71, 53, 239, 66, 3, 11, 8, 163, 6, 8, 8, 48, 76, 74, 80, 107, 12, 14, 8, 3, 12, 5, 8, 9, 3, 6, 12, 8, 3, 54, 3, 6, 5, 49, 8, 78, 34, 9, 35]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [3, 13, 3, 4, 4, 10, 228, 9, 5, 9, 11, 27, 4, 45, 8, 5, 9, 7, 8, 33, 20, 8, 7, 9, 11, 20, 13, 9, 9, 25, 25, 8, 27, 4, 145, 27, 11, 11, 4, 3, 3, 11, 201, 103, 4, 6, 5, 3, 23, 3, 8, 4, 9, 11, 10, 3, 7, 8, 11, 8, 8, 11, 9, 4, 26, 8, 79, 205, 11, 9, 11, 8, 3, 8, 8, 11]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [4, 19, 4, 4, 3, 4, 74, 4, 5, 5, 4, 5, 4, 4, 64, 3, 8, 4, 234, 6, 3, 3, 4, 12, 5, 10, 3, 25, 6, 144, 5, 4, 27, 11, 4, 9, 4, 5, 3, 4, 4, 57, 23, 10, 4, 4, 3, 11, 7, 4, 4, 4, 3, 9, 4, 4, 4, 4, 3, 3, 113, 11, 4, 5, 3, 4, 8, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [6, 3, 8, 4, 3, 28, 31, 3, 522, 27, 3, 5, 4, 4, 221, 127, 3, 4, 198, 4, 5, 8, 8, 12, 9, 4, 22, 27, 22, 24, 15, 4, 23, 3, 4, 5, 4, 5, 4, 16, 4, 4, 31, 3, 3, 5, 4, 8, 4, 3, 16, 3, 5, 4, 3, 4, 5, 5, 3, 19, 6, 4, 4, 28, 4, 4, 31, 152, 29, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [4, 15, 8, 37, 6, 3, 8, 3, 192, 26, 22, 24, 50, 8, 9, 10, 8, 8, 7, 22, 21, 9, 190, 4, 326, 11, 11, 24, 238, 23, 42, 4, 3, 26, 56, 7, 8, 3, 6, 397, 7, 11, 5, 8, 31, 3, 88, 29, 25, 27, 4, 3, 5, 3, 8, 3, 7, 76, 8, 12, 4, 4, 27, 28, 9, 24, 27, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [3, 11, 4, 7, 4, 3, 3, 3, 5, 34, 7, 3, 4, 63, 11, 5, 3, 3, 75, 24, 6, 5, 42, 4, 20, 688, 9, 4, 23, 34, 27, 26, 68, 10, 25, 5, 211, 4, 73, 7, 5, 41, 125, 59, 22, 3, 3, 5, 5, 6, 5, 7, 3, 3, 4, 4, 4, 4, 4, 4, 19, 4, 7, 8, 25, 6, 35, 3, 19, 35, 35, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [4, 14, 3, 10, 4, 3, 30, 4, 5, 3, 4, 27, 6, 4, 11, 5, 5, 4, 4, 8, 3, 8, 6, 3, 13, 4, 9, 8, 25, 3, 26, 4, 4, 75, 3, 3, 4, 5, 5, 3, 3, 4, 27, 4, 4, 7, 6, 11, 44, 3, 3, 4, 84, 4, 3, 4, 9, 3, 4, 4, 8, 5, 7, 11, 3, 8, 8, 3, 3, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 4, 4, 22, 4, 5, 4, 4, 3, 3, 4, 7, 5, 4, 4, 4, 3, 4, 4, 4, 5, 5, 4, 8, 4, 4, 203, 4, 3, 4, 4, 3, 4, 32, 4, 4, 236, 6, 6, 7, 4, 4, 669, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 28, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [20, 4, 4, 28, 4, 4, 90, 3, 7, 27, 3, 4, 3, 3, 3, 6, 21, 3, 3, 3, 20, 6, 4, 38, 4, 4, 11, 4, 22, 23, 26, 4, 5, 23, 107, 13, 4, 426, 4, 5, 7, 34, 84, 22, 4, 28, 24, 23, 163, 4, 4, 6, 3, 3, 4, 5, 4, 4, 3, 3, 6, 22, 4, 13, 4, 3, 4, 6, 5, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [9, 4, 4, 18, 4, 5, 3, 4, 79, 19, 5, 22, 4, 4, 4, 5, 4, 3, 7, 18, 20, 5, 4, 4, 4, 13, 4, 8, 4, 23, 36, 24, 23, 3, 297, 4, 5, 5, 5, 4, 6, 4, 83, 4, 31, 5, 18, 19, 35, 4, 4, 3, 4, 5, 19, 6, 4, 4, 3, 4, 18, 4, 6, 22, 4, 8, 4, 4, 4, 190, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [8, 3, 6, 13, 4, 3, 17, 9, 5, 4, 4, 6, 4, 4, 3, 5, 10, 111, 13, 4, 32, 4, 3, 3, 55, 4, 5, 9, 9, 5, 3, 3, 5, 14, 11, 10, 3, 5, 10, 5, 4, 11, 3, 4, 7, 3, 4, 105, 6, 4, 4, 3, 121, 3, 4, 19, 3, 4, 9, 12, 4, 4, 3, 443, 4, 104, 4, 5, 4, 8]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [3, 14, 4, 37, 4, 4, 12, 4, 11, 3, 4, 26, 4, 4, 3, 5, 3, 4, 3, 36, 3, 6, 6, 10, 3, 9, 3, 26, 65, 3, 3, 3, 4, 3, 3, 4, 391, 4, 4, 33, 7, 37, 331, 13, 37, 5, 4, 5, 3, 4, 4, 37, 3, 5, 3, 4, 3, 10, 34, 4, 4, 6, 3, 36, 4, 3, 3, 24, 3, 4, 4, 8]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [12, 3, 3, 4, 4, 4, 4, 4, 5, 5, 4, 347, 4, 4, 4, 5, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 11, 3, 25, 6, 27, 4, 4, 4, 4, 5, 4, 5, 4, 4, 3, 27, 12, 46, 4, 4, 4, 4, 4, 3, 3, 4, 4, 20, 4, 4, 4, 4, 4, 4, 11, 6, 4, 4, 7, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 4, 5, 5, 3, 4, 3, 4, 6, 4, 4, 5, 3, 5, 4, 3, 4, 4, 3, 4, 4, 10, 12, 3, 8, 4, 4, 3, 4, 4, 4, 5, 4, 3, 5, 7, 4, 109, 5, 9, 4, 6, 4, 4, 4, 4, 40, 4, 3, 4, 4, 4, 4, 5, 4, 4, 3, 4, 4, 4, 5, 3, 4, 167, 24, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 18, 4, 3, 4, 4, 5, 6, 3, 10, 4, 5, 530, 4, 4, 3, 4, 23, 4, 4, 4, 40, 4, 102, 4, 5, 94, 6, 4, 3, 29, 3, 3, 3, 4, 9, 3, 4, 5, 4, 5, 5, 101, 8, 6, 4, 3, 4, 3, 3, 4, 3, 4, 12, 4, 4, 6, 8, 7, 4, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 4, 3, 31, 11, 6, 27, 7, 31, 157, 9, 9, 6, 9, 8, 6, 3, 28, 4, 6, 12, 7, 8, 3, 23, 200, 25, 8, 3, 11, 27, 11, 7, 8, 3, 55, 4, 8, 3, 3, 9, 4, 32, 4, 9, 6, 4, 4, 4, 4, 5, 3, 9, 8, 13, 5, 4, 606, 6, 3, 4, 8, 6, 4, 5, 3, 29, 4, 9, 24, 4, 28, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [12, 3, 4, 36, 13, 4, 9, 4, 5, 261, 13, 5, 3, 4, 4, 5, 3, 3, 8, 10, 20, 4, 10, 6, 3, 10, 3, 9, 10, 25, 6, 30, 4, 343, 25, 4, 6, 10, 5, 4, 96, 6, 3, 8, 10, 53, 36, 6, 322, 4, 3, 10, 7, 24, 4, 56, 4, 4, 3, 6, 7, 17, 3, 5, 72, 34, 7, 6, 4, 5, 3, 4, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [29, 4, 4, 31, 3, 3, 33, 4, 5, 22, 3, 22, 4, 4, 3, 5, 3, 41, 4, 4, 20, 9, 4, 22, 4, 19, 8, 9, 5, 22, 23, 254, 24, 3, 4, 23, 3, 3, 3, 3, 5, 4, 287, 3, 4, 4, 4, 31, 23, 31, 32, 60, 4, 66, 4, 3, 4, 4, 4, 4, 4, 4, 41, 4, 7, 22, 4, 23, 43, 186, 24, 23, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [6, 16, 3, 18, 6, 4, 3, 3, 11, 5, 4, 239, 3, 9, 5, 3, 4, 38, 11, 4, 16, 7, 9, 4, 13, 34, 35, 3, 4, 39, 8, 11, 10, 111, 3, 5, 20, 12, 11, 4, 4, 51, 13, 6, 35, 46, 4, 4, 3, 5, 18, 3, 4, 3, 3, 11, 20, 3, 219, 3, 13, 4, 188, 386, 9, 35, 6, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [12, 3, 4, 49, 4, 4, 3, 4, 5, 4, 3, 98, 3, 4, 5, 5, 3, 4, 20, 3, 4, 3, 3, 12, 4, 9, 4, 25, 25, 3, 27, 5, 4, 26, 6, 4, 258, 6, 4, 5, 379, 10, 4, 4, 4, 3, 23, 107, 3, 3, 6, 4, 149, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 7, 6, 22, 4, 4, 3, 4, 3, 3, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 11, 4, 4, 4, 5, 45, 3, 40, 4, 3, 3, 5, 4, 4, 4, 4, 3, 7, 4, 4, 12, 4, 9, 3, 22, 44, 22, 26, 4, 25, 3, 3, 15, 6, 4, 5, 3, 16, 4, 4, 34, 115, 3, 4, 3, 3, 4, 5, 4, 4, 13, 4, 4, 4, 4, 5, 18, 23, 4, 26, 9, 45, 4, 23, 8, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 9, 4, 4, 3, 5, 29, 6, 30, 3, 19, 4, 5, 3, 6, 4, 30, 4, 3, 3, 4, 10, 9, 26, 31, 31, 35, 4, 35, 5, 3, 3, 4, 3, 4, 84, 4, 3, 3, 3, 4, 23, 4, 4, 30, 32, 30, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 6, 13, 3, 30, 33, 4, 32, 3, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [4, 13, 3, 9, 4, 3, 4, 11, 5, 5, 3, 3, 16, 11, 121, 10, 4, 3, 7, 13, 3, 15, 11, 4, 5, 9, 3, 5, 6, 8, 10, 11, 15, 60, 3, 18, 4, 5, 11, 4, 10, 3, 5, 5, 4, 6, 4, 4, 4, 11, 8, 4, 6, 4, 13, 3, 4, 3, 10, 7, 3, 6, 4, 13, 12, 179, 3, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [8, 3, 4, 18, 3, 3, 3, 4, 5, 19, 3, 4, 3, 3, 4, 8, 4, 4, 4, 3, 4, 4, 4, 4, 3, 10, 10, 6, 33, 20, 19, 4, 4, 3, 3, 4, 4, 5, 4, 3, 5, 5, 3, 4, 3, 3, 4, 18, 20, 4, 4, 4, 211, 300, 6, 4, 4, 30, 4, 5, 16, 7, 4, 4, 14, 9, 4, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [11, 3, 4, 4, 6, 3, 3, 4, 5, 4, 15, 4, 5, 4, 5, 4, 4, 3, 4, 3, 3, 4, 3, 11, 5, 5, 5, 8, 6, 4, 4, 4, 5, 5, 5, 4, 12, 4, 370, 4, 94, 4, 7, 63, 4, 3, 3, 4, 7, 6, 4, 4, 4, 16, 4, 6, 4, 12, 481, 3, 4, 3, 16, 4, 4, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 36, 4, 3, 71, 4, 147, 30, 4, 5, 4, 4, 3, 64, 4, 9, 4, 5, 26, 7, 4, 4, 4, 10, 5, 8, 9, 41, 41, 43, 33, 51, 11, 47, 4, 3, 3, 4, 372, 4, 348, 4, 3, 9, 36, 6, 43, 4, 4, 4, 4, 4, 41, 4, 5, 4, 5, 4, 5, 8, 28, 4, 4, 4, 48, 4, 3, 4, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [4, 15, 11, 8, 4, 4, 9, 4, 5, 5, 4, 10, 10, 169, 5, 9, 10, 11, 11, 3, 6, 3, 39, 9, 3, 10, 17, 4, 5, 8, 5, 8, 8, 11, 104, 4, 4, 9, 5, 11, 3, 8, 178, 5, 4, 4, 4, 9, 15, 4, 10, 14, 4, 4, 6, 29, 4, 4, 5, 6, 8, 8, 3, 21, 11, 9, 6, 11, 10, 9, 3, 3, 16]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 31, 4, 4, 68, 4, 291, 27, 4, 4, 9, 4, 106, 5, 4, 4, 10, 22, 6, 3, 34, 5, 13, 3, 273, 4, 22, 23, 4, 4, 4, 26, 5, 4, 6, 4, 4, 23, 3, 3, 4, 11, 31, 4, 24, 23, 8, 3, 4, 139, 4, 5, 4, 4, 6, 319, 3, 4, 6, 4, 4, 3, 24, 24, 4, 23, 4, 52]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [10, 3, 11, 6, 92, 4, 4, 4, 6, 4, 19, 30, 4, 4, 9, 5, 5, 11, 3, 20, 3, 167, 3, 4, 10, 3, 9, 103, 30, 3, 34, 3, 4, 11, 4, 123, 5, 116, 4, 20, 3, 34, 4, 4, 35, 31, 20, 18, 14, 10, 3, 36, 3, 11, 9, 5, 5, 4, 3, 16, 6, 209, 37, 12, 31, 32, 9, 3, 9, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [6, 3, 11, 3, 3, 3, 4, 4, 5, 4, 4, 34, 3, 4, 4, 5, 4, 4, 4, 4, 154, 4, 5, 7, 3, 9, 4, 24, 4, 31, 4, 3, 32, 167, 11, 4, 4, 4, 5, 4, 4, 56, 4, 3, 4, 25, 10, 4, 4, 3, 4, 3, 4, 5, 5, 4, 4, 4, 4, 30, 5, 57, 4, 4, 10, 4, 57, 42]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [4, 3, 10, 72, 3, 4, 61, 15, 87, 40, 9, 65, 10, 3, 213, 6, 9, 3, 13, 3, 4, 3, 8, 4, 9, 10, 7, 51, 52, 52, 3, 7, 11, 6, 7, 371, 3, 10, 4, 4, 15, 41, 52, 74, 3, 4, 13, 3, 4, 72, 4, 3, 11, 34, 147, 12, 6, 4, 3, 3, 41, 43, 10, 52, 4, 41, 8]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [8, 11, 11, 35, 139, 4, 38, 8, 5, 34, 11, 114, 4, 9, 13, 6, 11, 58, 11, 29, 6, 3, 4, 3, 12, 8, 9, 52, 23, 24, 23, 31, 21, 5, 597, 3, 4, 3, 9, 11, 231, 5, 9, 3, 7, 5, 25, 24, 8, 8, 3, 6, 3, 6, 8, 9, 4, 105, 40, 10, 3, 7, 29, 8, 25, 26, 13, 24, 4, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [3, 6, 103, 31, 3, 4, 35, 5, 5, 22, 3, 24, 3, 4, 4, 5, 4, 4, 3, 3, 20, 148, 4, 26, 5, 15, 11, 4, 3, 5, 7, 3, 4, 4, 385, 3, 106, 3, 3, 23, 14, 3, 4, 3, 4, 7, 4, 4, 5, 4, 6, 5, 4, 12, 6, 5, 23, 24, 5, 5, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 4, 3, 3, 4, 4, 5, 3, 4, 26, 3, 3, 4, 7, 3, 3, 4, 3, 6, 4, 3, 4, 3, 8, 11, 6, 23, 5, 3, 4, 4, 3, 3, 4, 12, 5, 3, 4, 3, 4, 4, 4, 4, 24, 86, 3, 3, 3, 3, 6, 3, 4, 3, 6, 4, 3, 26, 26, 24]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 4, 4, 3, 3, 3, 153, 4, 5, 27, 4, 3, 4, 6, 5, 3, 3, 38, 47, 4, 4, 11, 293, 3, 9, 4, 25, 4, 27, 54, 3, 27, 4, 36, 4, 4, 3, 9, 4, 4, 3, 33, 31, 3, 26, 8, 7, 3, 11, 4, 56, 4, 4, 18, 5, 4, 4, 18, 7, 38, 5, 4, 152, 6, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [4, 14, 3, 5, 4, 18, 4, 5, 9, 3, 3, 4, 4, 8, 8, 5, 5, 3, 6, 7, 6, 14, 8, 3, 3, 6, 15, 40, 3, 31, 3, 33, 5, 3, 17, 5, 4, 3, 5, 3, 6, 3, 4, 38, 6, 4, 6, 33, 11, 8, 212, 11, 3, 234, 28, 11, 97, 18, 9, 7, 130, 8, 6, 4, 8, 11, 3, 4, 202]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [4, 5, 6, 3, 4, 7, 3, 6, 30, 3, 18, 5, 7, 5, 3, 5, 4, 5, 8, 6, 11, 12, 3, 9, 8, 5, 30, 4, 3, 29, 4, 4, 4, 5, 11, 5, 46, 3, 30, 4, 11, 9, 12, 8, 10, 4, 4, 15, 4, 17, 3, 6, 3, 6, 33, 8, 8, 8, 4, 11, 7, 11, 11, 11, 7]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [24, 3, 3, 4, 4, 3, 5, 7, 5, 60, 6, 3, 4, 4, 4, 6, 6, 7, 6, 4, 23, 4, 4, 5, 76, 4, 11, 11, 4, 4, 6, 4, 3, 4, 3, 15, 4, 9, 8, 6, 399, 4, 9, 3, 9, 33, 3, 55, 8, 36, 4, 4, 3, 3, 11, 4, 4, 35, 8, 4, 3, 9, 7, 4, 8, 5, 8, 4, 6, 6, 14]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [3, 4, 5, 45, 4, 3, 62, 4, 5, 23, 4, 4, 68, 6, 4, 5, 3, 4, 3, 3, 20, 5, 3, 4, 4, 11, 6, 10, 3, 65, 24, 24, 51, 4, 28, 3, 5, 4, 8, 12, 5, 4, 4, 64, 34, 45, 24, 25, 3, 4, 4, 3, 4, 4, 45, 4, 4, 91, 41, 3, 4, 4, 25, 4, 4, 4, 4, 4, 13, 5, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [18, 16, 4, 3, 3, 4, 9, 12, 6, 5, 3, 3, 3, 5, 10, 5, 3, 4, 4, 5, 4, 4, 4, 12, 4, 9, 3, 8, 4, 4, 3, 4, 3, 3, 6, 16, 5, 3, 5, 3, 4, 5, 4, 4, 22, 13, 6, 3, 11, 4, 4, 3, 3, 3, 6, 13, 3, 7, 4, 5, 8, 7, 5, 4, 3, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [4, 14, 4, 10, 5, 11, 11, 9, 6, 8, 13, 4, 4, 7, 9, 3, 11, 3, 10, 6, 12, 7, 11, 10, 9, 74, 24, 3, 23, 25, 4, 10, 24, 3, 4, 11, 3, 11, 5, 23, 7, 57, 114, 3, 13, 8, 10, 4, 5, 4, 8, 8, 5, 18, 8, 9, 256, 4, 12, 12, 3, 4, 11, 3, 8, 7, 10, 91, 3, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [4, 14, 4, 4, 4, 4, 5, 4, 6, 23, 6, 24, 4, 4, 4, 5, 3, 4, 27, 4, 23, 5, 4, 4, 8, 10, 4, 9, 4, 4, 4, 4, 4, 57, 4, 4, 3, 4, 4, 3, 3, 4, 78, 7, 4, 4, 43, 3, 24, 4, 4, 56, 3, 4, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 6, 13, 4, 24, 25, 4, 53, 3, 25, 35]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 18, 3, 4, 4, 3, 564, 19, 3, 49, 3, 4, 3, 5, 4, 5, 4, 6, 4, 3, 5, 8, 12, 5, 10, 4, 32, 20, 19, 4, 3, 8, 152, 4, 3, 3, 3, 53, 4, 4, 4, 55, 18, 19, 3, 10, 3, 4, 3, 15, 3, 7, 7, 6, 18, 4, 7, 3, 4, 5, 20, 19, 20, 9, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [6, 16, 14, 11, 83, 205, 9, 10, 6, 25, 4, 5, 4, 4, 4, 9, 5, 3, 4, 11, 3, 153, 11, 5, 44, 3, 8, 3, 35, 6, 38, 4, 9, 26, 11, 8, 6, 16, 5, 9, 461, 4, 6, 8, 10, 256, 4, 221, 7, 198, 10, 6, 118, 5, 10, 4, 329, 3, 10, 7, 15, 513, 4, 156, 281, 7, 4, 91, 4, 6, 7, 78, 345, 4, 21, 468]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 40, 41, 4, 3, 6, 319, 27, 3, 49, 3, 4, 4, 5, 4, 5, 3, 34, 11, 3, 3, 7, 32, 5, 8, 3, 22, 23, 22, 28, 4, 4, 69, 22, 4, 3, 8, 18, 11, 4, 5, 12, 4, 3, 28, 216, 28, 5, 12, 7, 4, 4, 4, 6, 4, 4, 4, 8, 7, 8, 36, 28, 29, 4, 23, 28]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [6, 16, 6, 31, 8, 4, 51, 6, 6, 22, 4, 26, 4, 9, 12, 5, 13, 5, 4, 17, 20, 6, 3, 26, 5, 12, 4, 56, 8, 22, 23, 26, 24, 58, 86, 23, 252, 3, 6, 5, 5, 11, 9, 3, 28, 11, 60, 22, 4, 31, 23, 24, 23, 5, 4, 6, 9, 8, 5, 34, 8, 8, 4, 5, 3, 51, 32, 7, 22, 4, 23, 24, 13, 27, 3, 27, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 32, 4, 4, 31, 4, 10, 28, 11, 3, 4, 4, 4, 9, 4, 5, 3, 3, 3, 4, 4, 4, 4, 10, 8, 11, 30, 28, 27, 4, 4, 4, 7, 4, 4, 4, 5, 4, 50, 4, 32, 29, 28, 3, 4, 4, 9, 4, 3, 32, 4, 4, 4, 4, 5, 4, 6, 8, 4, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [13, 5, 96, 9, 3, 3, 60, 4, 5, 71, 4, 53, 6, 4, 4, 6, 4, 7, 5, 12, 37, 5, 3, 3, 5, 9, 3, 82, 79, 80, 81, 75, 4, 77, 3, 4, 11, 5, 3, 4, 76, 48, 3, 4, 110, 4, 4, 4, 4, 4, 4, 51, 4, 55, 4, 191, 60, 4, 4, 4, 32, 3, 4, 4, 6, 3, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [6, 16, 3, 3, 3, 4, 6, 8, 11, 56, 8, 49, 14, 4, 318, 3, 5, 9, 4, 3, 3, 8, 8, 68, 4, 9, 8, 3, 3, 8, 4, 3, 4, 3, 4, 5, 11, 12, 33, 4, 9, 53, 3, 57, 4, 59, 13, 4, 6, 4, 3, 60, 3, 6, 4, 18, 7, 3, 22, 57, 60, 10, 7, 4, 57, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 4, 5, 7, 4, 7, 6, 77, 6, 4, 4, 9, 6, 8, 6, 4, 4, 4, 5, 4, 3, 12, 8, 6, 23, 24, 23, 7, 10, 13, 3, 4, 3, 4, 12, 5, 12, 3, 4, 39, 3, 32, 24, 32, 6, 7, 6, 109, 7, 5, 3, 126, 6, 6, 3, 12, 7, 3, 57, 32, 33, 329, 24, 6, 32, 6]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [11, 16, 6, 37, 13, 151, 3, 13, 6, 27, 10, 4, 10, 6, 9, 405, 9, 6, 4, 8, 36, 9, 30, 10, 12, 8, 9, 4, 22, 272, 27, 24, 3, 10, 118, 4, 5, 9, 7, 6, 352, 5, 6, 10, 8, 5, 26, 3, 37, 28, 28, 28, 5, 13, 3, 3, 37, 5, 16, 10, 4, 8, 23, 6, 10, 28, 29, 9, 28, 6, 28, 14]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [4, 3, 29, 4, 11, 13, 4, 3, 11, 27, 3, 22, 76, 11, 14, 9, 14, 380, 4, 19, 374, 34, 3, 4, 74, 5, 8, 14, 10, 4, 3, 3, 5, 3, 3, 12, 8, 9, 4, 6, 93, 13, 3, 4, 74, 23, 46, 34, 5, 5, 9, 11, 12, 4, 11, 4, 56, 4, 4, 3, 10, 11, 37, 8, 11, 4, 15, 11, 12, 11]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 37, 4, 4, 3, 4, 5, 27, 4, 28, 6, 9, 4, 5, 4, 3, 4, 22, 4, 3, 4, 4, 14, 6, 10, 4, 22, 439, 22, 4, 4, 10, 26, 4, 4, 5, 4, 4, 24, 4, 8, 32, 37, 28, 23, 32, 3, 3, 11, 4, 77, 4, 4, 4, 3, 20, 4, 6, 4, 4, 30, 109, 3, 23, 5, 30, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [4, 4, 7, 161, 5, 245, 3, 3, 6, 25, 4, 4, 6, 83, 10, 114, 4, 3, 4, 3, 11, 4, 4, 12, 4, 12, 3, 34, 25, 4, 4, 3, 23, 14, 4, 5, 3, 8, 4, 4, 8, 13, 4, 11, 31, 30, 5, 4, 3, 5, 4, 4, 4, 9, 7, 3, 7, 5, 154, 3, 23, 26, 31, 4, 26, 10, 26, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [9, 3, 3, 4, 4, 3, 7, 6, 6, 3, 5, 4, 5, 9, 3, 5, 4, 3, 4, 4, 3, 3, 4, 4, 4, 3, 65, 3, 3, 3, 4, 3, 4, 4, 4, 4, 3, 7, 5, 4, 4, 4, 4, 4, 3, 6, 220, 3, 3, 4, 5, 3, 4, 6, 4, 4, 5, 4, 3, 5, 5, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [4, 18, 8, 33, 9, 4, 13, 13, 9, 31, 13, 39, 6, 9, 13, 6, 12, 4, 3, 3, 8, 6, 8, 51, 6, 10, 16, 8, 10, 34, 48, 39, 45, 4, 4, 10, 4, 11, 4, 3, 9, 3, 14, 11, 31, 47, 33, 38, 30, 8, 10, 7, 4, 33, 8, 4, 4, 10, 45, 187, 4, 8, 10, 7, 33, 11, 3, 13, 10, 12, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [3, 5, 3, 18, 4, 4, 4, 4, 6, 61, 3, 49, 3, 3, 3, 194, 122, 4, 3, 28, 5, 3, 5, 10, 4, 8, 3, 34, 55, 19, 41, 4, 39, 3, 4, 4, 7, 5, 5, 4, 3, 4, 3, 3, 3, 56, 21, 5, 5, 3, 3, 4, 3, 3, 12, 4, 13, 6, 62, 19, 9, 20, 4, 35]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [4, 12, 8, 34, 7, 11, 3, 3, 5, 25, 3, 28, 3, 8, 5, 7, 4, 4, 33, 10, 6, 6, 7, 37, 3, 10, 4, 8, 4, 23, 24, 23, 42, 7, 3, 10, 87, 6, 11, 3, 218, 4, 13, 4, 33, 11, 34, 25, 179, 24, 4, 48, 8, 11, 6, 3, 5, 3, 5, 6, 27, 5, 16, 7, 33, 10, 25, 25, 24, 6, 24, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [3, 11, 3, 4, 3, 3, 7, 4, 6, 26, 21, 11, 4, 3, 4, 9, 4, 5, 7, 20, 9, 3, 22, 3, 19, 4, 9, 3, 45, 25, 24, 31, 3, 11, 8, 8, 3, 8, 4, 5, 4, 9, 6, 22, 84, 3, 79, 25, 28, 4, 3, 4, 3, 23, 4, 6, 4, 3, 6, 13, 37, 7, 22, 4, 26, 26, 4, 25, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [3, 6, 3, 180, 3, 3, 4, 3, 5, 18, 3, 4, 134, 3, 3, 206, 4, 4, 3, 3, 32, 3, 4, 3, 4, 19, 9, 4, 4, 19, 18, 3, 5, 4, 3, 4, 5, 3, 7, 3, 4, 108, 5, 43, 8, 32, 5, 17, 18, 4, 44, 6, 4, 17, 4, 151, 5, 3, 4, 4, 12, 24, 4, 7, 4, 18, 18, 6, 19, 4, 18, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [4, 11, 11, 3, 4, 3, 4, 3, 5, 5, 4, 30, 8, 11, 13, 6, 13, 4, 5, 20, 3, 4, 3, 8, 20, 3, 9, 72, 71, 11, 78, 47, 3, 72, 5, 3, 4, 4, 5, 3, 4, 11, 64, 23, 4, 4, 7, 7, 3, 4, 8, 3, 4, 11, 4, 11, 4, 4, 95, 8, 7, 11, 57, 3, 4, 5, 4, 3, 210]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [4, 12, 4, 4, 3, 4, 24, 6, 9, 6, 3, 7, 15, 10, 14, 11, 4, 4, 35, 9, 6, 27, 3, 19, 9, 8, 5, 42, 25, 25, 85, 5, 5, 39, 13, 8, 7, 3, 10, 4, 5, 8, 169, 12, 11, 45, 11, 3, 9, 10, 4, 9, 4, 10, 10, 80, 20, 6, 75, 3, 13, 60, 25, 7, 37, 3, 5, 3, 14, 3, 11, 13, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [30, 5, 5, 3, 5, 6, 4, 5, 201, 3, 28, 3, 4, 4, 6, 3, 4, 4, 72, 41, 4, 3, 15, 13, 3, 8, 3, 4, 4, 21, 3, 3, 3, 6, 3, 57, 4, 5, 4, 130, 5, 4, 40, 4, 4, 4, 4, 4, 4, 10, 4, 5, 3, 7, 4, 4, 3, 81, 5, 19, 3, 326, 7, 22, 3, 4, 4, 4, 7, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 3, 3, 5, 11, 3, 10, 8, 7, 29, 4, 3, 40, 19, 7, 8, 6, 28, 35, 7, 35, 5, 11, 15, 8, 8, 8, 3, 11, 21, 11, 4, 7, 6, 8, 7, 9, 3, 3, 10, 36, 7, 11, 3, 7, 65, 64, 4, 8, 7, 4, 3, 19, 3, 263, 4, 11, 8, 7, 33, 5, 305, 13, 11, 14, 4, 7, 5, 12, 6, 17]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
termination = MathOptInterface.INFEASIBLE
objective_value = 0.3596067077757304
