┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
RECON1
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

RECON1
----------------------------------
number of metabolites : 2766
number of reactions : 3741
number of genes : 1905

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 75
max_cuts = 19
(indicator, big_m) = (false, true)
BIG M ADDED
model with 3741 flux variables and 7052 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 4, 2, 4, 4, 6, 8, 5, 9, 2, 5, 8, 6, 3, 3, 42, 4, 4, 7, 3, 22, 4, 4, 272, 5, 9, 580, 4, 593, 2, 4, 6, 4, 3, 3, 4, 3, 3, 74, 5, 8, 409, 10, 3, 7, 8, 353, 4]
length(C_list) = 19
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 6, 2, 2, 7, 7, 4, 4, 4, 4, 4, 8, 176, 6, 3, 355, 7, 3, 4, 3, 4, 380, 48, 6, 362, 6, 3, 3, 5, 79, 6, 396, 47, 5, 4, 7, 3, 6, 3, 153, 185, 4, 4, 4, 9, 5, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 2, 2, 5, 4, 235, 9, 6, 2, 4, 4, 2, 40, 4, 5, 3, 76, 4, 4, 4, 3, 5, 8, 28, 3, 80, 347, 3, 6, 17, 3, 4, 4, 78, 4, 296, 4, 5, 4, 6, 4, 3, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 2, 4, 5, 6, 2, 5, 129, 4, 8, 5, 2, 4, 5, 5, 6, 273, 16, 3, 6, 3, 3, 4, 4, 4, 5, 3, 4, 5, 4, 5, 6, 329, 4, 7, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 5, 7, 3, 2, 5, 6, 88, 5, 13, 5, 8, 4, 5, 344, 5, 4, 25, 6, 4, 4, 5, 49, 7, 5, 11, 3, 2, 5, 7, 5, 3, 75, 13, 5, 3, 3, 5, 593, 5, 4, 5, 6, 86, 6, 5, 5, 5, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [5, 5, 5, 4, 5, 5, 5, 5, 6, 5, 4, 5, 3, 4, 4, 6, 6, 3, 6, 4, 5, 7, 3, 5, 5, 29, 7, 3, 17, 4, 4, 5, 4, 4, 6, 4, 5, 6, 5, 86, 3, 7, 3, 170, 4, 5, 3, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 4, 5, 6, 6, 3, 5, 4, 7, 5, 4, 4, 5, 5, 7, 5, 7, 5, 6, 6, 6, 5, 4, 4, 7, 6, 26, 4, 4, 4, 5, 4, 4, 4, 43, 6, 6, 4, 4, 4, 5, 3, 4, 3, 4, 4, 4, 8, 5, 7, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 5, 3, 4, 4, 8, 7, 81, 7, 6, 7, 7, 6, 21, 6, 7, 4, 4, 4, 4, 4, 6, 5, 26, 4, 5, 7, 4, 9, 4, 4, 4, 6, 9, 7, 3, 4, 4, 5, 3, 5, 9, 5, 5, 4, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 6, 6, 5, 5, 5, 5, 5, 6, 5, 4, 36, 4, 4, 10, 5, 4, 4, 299, 14, 7, 4, 4, 5, 6, 4, 12, 6, 4, 4, 6, 6, 22, 4, 4, 3, 21, 4, 58, 4, 3, 4, 7, 6, 83, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [8, 7, 4, 5, 3, 6, 4, 5, 6, 4, 4, 4, 4, 5, 4, 7, 6, 6, 5, 4, 5, 4, 5, 15, 4, 5, 4, 5, 6, 6, 4, 53, 5, 5, 5, 3, 9, 4, 152, 6, 5, 6, 7, 5, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [8, 5, 3, 6, 7, 4, 10, 7, 8, 4, 4, 6, 4, 4, 4, 7, 5, 6, 5, 7, 8, 7, 4, 4, 3, 7, 6, 6, 5, 6, 6, 4, 5, 8, 4, 7, 8, 5, 6, 14, 4, 4, 6, 7, 4, 5, 5, 7, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [3, 5, 6, 3, 5, 6, 5, 5, 7, 4, 4, 5, 8, 6, 5, 6, 6, 192, 4, 4, 4, 4, 4, 6, 5, 7, 4, 4, 4, 4, 6, 10, 6, 4, 3, 6, 10, 4, 3, 11, 7, 5, 101, 5, 6, 5, 4, 4, 5, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 5, 7, 7, 4, 6, 86, 5, 4, 4, 8, 4, 5, 8, 4, 4, 4, 6, 5, 5, 6, 4, 38, 167, 4, 6, 4, 6, 4, 4, 4, 6, 5, 5, 5, 4, 5, 4, 5, 3, 5, 7, 5, 3, 5, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [10, 4, 7, 5, 7, 4, 5, 4, 6, 6, 5, 5, 4, 5, 7, 4, 4, 5, 5, 4, 5, 9, 8, 5, 4, 6, 4, 4, 6, 5, 4, 4, 4, 6, 5, 3, 6, 4, 4, 5, 166, 7, 4, 5, 5, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 2, 4, 6, 6, 5, 68, 8, 6, 4, 4, 2, 10, 4, 4, 11, 4, 8, 12, 5, 10, 12, 5, 5, 9, 15, 6, 9, 5, 6, 33, 7, 6, 5, 3, 3, 7, 50, 4, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [8, 6, 3, 4, 5, 4, 4, 5, 7, 4, 3, 6, 6, 4, 96, 4, 8, 6, 9, 8, 6, 11, 5, 14, 6, 4, 4, 5, 5, 3, 9, 8, 4, 6, 6, 5, 4, 6, 5, 4, 4, 9, 6, 8, 7, 6, 5, 7, 8, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [8, 2, 3, 3, 6, 8, 10, 5, 2, 6, 4, 6, 4, 4, 9, 7, 20, 4, 2, 35, 12, 7, 7, 3, 4, 10, 4, 20, 5, 6, 7, 21, 3, 10, 7, 10, 28, 5, 4, 5, 5, 9, 5, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [2, 9, 8, 6, 4, 13, 5, 4, 4, 4, 6, 4, 8, 10, 9, 10, 2, 4, 14, 6, 5, 3, 3, 8, 4, 11, 5, 5, 3, 8, 6, 4, 6, 7, 4, 7, 4, 6, 6, 5, 92]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [2, 4, 6, 4, 6, 4, 4, 4, 5, 5, 4, 5, 4, 6, 14, 6, 5, 118, 5, 6, 11, 5, 4, 6, 138, 5, 5, 5, 4, 43, 8, 7, 6, 6, 5, 7, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 5, 4, 7, 5, 6, 7, 4, 4, 4, 4, 9, 9, 4, 4, 43, 5, 5, 3, 7, 19, 6, 6, 10, 11, 5, 4, 6, 4, 6, 5, 4, 4, 4, 6, 15, 5, 3, 5, 6, 6, 18, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [4, 3, 7, 4, 9, 6, 144, 11, 6, 4, 5, 6, 7, 10, 4, 5, 6, 4, 6, 8, 5, 4, 5, 5, 7, 6, 4, 4, 7, 3, 5, 8, 8, 5, 4, 4, 5, 6, 11, 7, 6, 5, 5, 12, 6, 4, 9]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 5, 4, 4, 6, 7, 6, 7, 6, 7, 58, 3, 5, 293, 9, 6, 7, 4, 9, 8, 5, 59, 7, 7, 6, 10, 5, 6, 9, 29, 7, 4, 5, 4, 8, 6, 8, 6, 9, 5, 4, 4, 5, 8]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [6, 5, 5, 4, 5, 4, 23, 6, 5, 6, 5, 4, 5, 7, 3, 4, 5, 5, 5, 6, 5, 6, 8, 5, 6, 4, 7, 4, 7, 5, 5, 4, 5, 8, 4, 3, 6, 7, 6, 4, 8, 4, 7, 6, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 6, 11, 9, 8, 4, 4, 4, 6, 4, 6, 4, 4, 13, 8, 21, 14, 3, 4, 4, 9, 3, 3, 7, 4, 4, 8, 44, 108, 5, 18, 4, 5, 4, 4, 4, 195, 4, 155, 92, 16, 4, 6, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 8, 5, 6, 144, 7, 6, 4, 9, 4, 5, 5, 4, 4, 214, 6, 26, 9, 13, 6, 3, 9, 4, 4, 42, 8, 28, 4, 9, 6, 5, 4, 5, 9, 4, 4, 4, 4, 5, 4, 4, 14, 3, 4, 66, 6, 4, 4, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 3, 7, 7, 4, 5, 7, 5, 4, 5, 7, 3, 3, 4, 6, 4, 34, 5, 4, 9, 3, 22, 4, 4, 10, 7, 7, 12, 13, 7, 17, 7, 163, 5, 6, 4, 4, 95, 4, 6, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [6, 9, 5, 110, 6, 5, 4, 5, 3, 4, 4, 5, 6, 3, 7, 4, 4, 4, 5, 7, 5, 357, 5, 6, 10, 5, 95, 5, 3, 7, 8, 8, 5, 5, 4, 7, 14, 6, 255, 7, 3, 4, 28, 4, 5, 24, 7, 7, 4, 6, 5, 197, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 5, 7, 7, 4, 4, 6, 4, 4, 4, 4, 7, 5, 7, 4, 5, 4, 6, 3, 512, 6, 5, 4, 143, 4, 5, 7, 6, 213, 6, 6, 38, 5, 4, 73, 8, 3, 6, 8, 5, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 84, 5, 3, 5, 4, 100, 5, 4, 4, 4, 4, 7, 527, 25, 4, 22, 9, 6, 438, 6, 4, 5, 3, 5, 8, 3, 9, 7, 7, 5, 7, 4, 4, 228, 6, 8, 6, 11, 4, 5, 6, 5, 4, 5, 4, 6, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [2, 6, 4, 4, 4, 3, 6, 5, 2, 6, 4, 6, 6, 114, 4, 7, 4, 71, 7, 5, 4, 6, 333, 15, 4, 4, 18, 4, 507, 22, 5, 6, 4, 6, 5, 370, 5, 5, 20]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [2, 8, 6, 4, 4, 4, 5, 9, 4, 6, 5, 6, 6, 6, 5, 12, 5, 12, 4, 5, 3, 4, 4, 8, 180, 4, 5, 4, 6, 4, 5, 8, 4, 7, 4, 6, 72, 3, 7, 4, 6, 4, 13, 4, 6, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [3, 4, 5, 3, 4, 4, 2, 4, 3, 3, 8, 5, 3, 5, 401, 3, 8, 8, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 3, 2, 3, 4, 3, 3, 2, 5, 3, 4, 6, 4, 3, 6, 2, 3, 3, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 2, 4, 2, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 2, 3, 3, 3, 4, 4, 6, 36, 3, 3, 3, 5, 4, 7, 4, 72, 3, 275]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 3, 2, 4, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 418, 79, 3, 3, 4, 4, 142, 2, 3, 10, 93]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 165, 9]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 4, 3, 3, 4, 5, 3, 433, 3, 191, 3, 6, 5]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 3, 5, 5, 4, 3, 4, 5, 19, 12, 5, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 38
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
