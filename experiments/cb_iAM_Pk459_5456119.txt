WARNING: Dual bound 0.684293 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.686437 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.680577 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.680577 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.685849 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.675588 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.685516 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.685516 is smaller than the objective of the primal solution 0.687173. The solution might not be optimal.
WARNING: Dual bound 0.685516 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.685516 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.618837 is smaller than the objective of the primal solution 0.646489. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.678886. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.685261. The solution might not be optimal.
WARNING: Dual bound 0.657042 is smaller than the objective of the primal solution 0.667067. The solution might not be optimal.
WARNING: Dual bound 0.618837 is smaller than the objective of the primal solution 0.686298. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.654701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.615375 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.667917 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.66878 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.659384. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.684397. The solution might not be optimal.
WARNING: Dual bound 0.617234 is smaller than the objective of the primal solution 0.6222. The solution might not be optimal.
WARNING: Dual bound 0.618837 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.595321 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.603083 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.615205 is smaller than the objective of the primal solution 0.686299. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.678886. The solution might not be optimal.
WARNING: Dual bound 0.603285 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.603285 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.612908. The solution might not be optimal.
WARNING: Dual bound 0.618837 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.686084 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.583937 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.64266. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687167. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.686299. The solution might not be optimal.
WARNING: Dual bound 0.580941 is smaller than the objective of the primal solution 0.676972. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.651043. The solution might not be optimal.
WARNING: Dual bound 0.647367 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.6122. The solution might not be optimal.
WARNING: Dual bound 0.582477 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.64504 is smaller than the objective of the primal solution 0.646484. The solution might not be optimal.
WARNING: Dual bound 0.575759 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.582477 is smaller than the objective of the primal solution 0.686342. The solution might not be optimal.
WARNING: Dual bound 0.618688 is smaller than the objective of the primal solution 0.687174. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.68717. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.678886. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.607906 is smaller than the objective of the primal solution 0.643067. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.614693. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.673885. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.675352 is smaller than the objective of the primal solution 0.678879. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.612908. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.634457. The solution might not be optimal.
WARNING: Dual bound 0.59416 is smaller than the objective of the primal solution 0.684397. The solution might not be optimal.
WARNING: Dual bound 0.67306 is smaller than the objective of the primal solution 0.678879. The solution might not be optimal.
WARNING: Dual bound 0.618837 is smaller than the objective of the primal solution 0.646489. The solution might not be optimal.
WARNING: Dual bound 0.675352 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.608189 is smaller than the objective of the primal solution 0.687144. The solution might not be optimal.
WARNING: Dual bound 0.658701 is smaller than the objective of the primal solution 0.687175. The solution might not be optimal.
WARNING: Dual bound 0.683912 is smaller than the objective of the primal solution 0.685401. The solution might not be optimal.
┌ Warning: variable 138 does not have binary value: 0.999999
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:102
┌ Warning: variable 138 does not have binary value: 0.999999
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:102
┌ Warning: variable 138 does not have binary value: 0.999999
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:102
┌ Warning: variable 138 does not have binary value: 0.999999
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:102
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iAM_Pk459
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iAM_Pk459
----------------------------------
number of metabolites : 909
number of reactions : 1079
number of genes : 459

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 11
max_cuts = 5
(indicator, big_m) = (false, true)
BIG M ADDED
model with 1079 flux variables and 2050 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [9, 5, 3, 4, 3, 2]
length(C_list) = 5
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [3, 3, 5]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 5, 3, 4, 4, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 4, 5, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 5, 3, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [3, 3]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 3, 5, 4]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 6, 3, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [3, 5, 3, 3, 4, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [4, 5, 3]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 9, 4, 5]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 3, 3, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 3, 4]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [19, 4, 13, 5, 10, 13]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [19, 4, 4, 3, 5, 11, 4, 4, 5, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [19, 9, 3, 3, 2, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [12, 3, 3, 4, 4, 4, 4, 4, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 3, 3, 3, 3, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [10, 3, 4, 13, 5, 18, 17, 5, 4, 15]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [19, 4, 3, 3, 4, 7, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 3, 3, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [9, 3, 4, 4, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [10, 6, 3, 5, 3, 6, 9, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [20, 3, 4, 16, 4, 94, 17, 4, 16]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [19, 3, 4, 12, 4, 4, 3, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [5, 4, 6, 4, 3, 4, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [13, 3, 3, 7, 7, 7, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [4, 8, 7, 6, 8, 8, 6, 6, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [13, 8, 14, 4, 8, 12, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [14, 9, 4, 9, 3, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [11, 3, 4, 6, 6, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [15, 6, 5, 6, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [11, 3, 17, 4, 3, 5, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [12, 3, 4, 4, 10, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [8, 6, 8, 7, 6, 7, 5, 6, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [4, 3, 57, 4, 3, 3, 4, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [4, 3, 8, 4, 4, 8, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [4, 9, 10, 6, 3, 7, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [3, 14, 15, 14, 14, 14, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [4, 3, 8, 8, 8, 6, 4, 5, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [7, 3, 4, 4, 5, 5, 3, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [12, 4, 9, 5, 5, 4, 7, 9, 9, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [5, 7, 8, 10, 6, 4, 9]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [9, 8, 7]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [4, 9, 4, 3, 9, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 12, 13, 13, 14, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [4, 12, 19, 8, 4, 11]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 4]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [4, 3, 9, 3, 11, 4, 10, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [7, 7, 3, 11, 5, 13, 13, 4, 7, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [10, 17, 11, 5, 12, 12, 26, 23, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [17, 8, 3, 8, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [11, 8, 9, 6, 9, 6, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [19, 15, 5, 15, 15, 4, 15]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [12, 3, 11, 14, 12, 12, 13, 5, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [9, 3, 4, 6, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [4, 14, 14, 16, 15, 14, 12, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [14, 4, 3, 5, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [3, 13, 17, 4, 13, 54, 13, 7, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [7, 18, 3, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [11, 97, 18, 15, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [4, 26, 24, 3, 12, 12, 11]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [22, 8, 6, 7, 8, 8, 8, 8, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [3, 3, 9, 4]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [23, 6, 8, 62, 8, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [24, 3, 4, 4, 4, 4, 13]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [3, 11, 28, 6, 7, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [11, 14, 16, 14, 14, 18, 16, 16, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [3, 31, 6, 6, 12]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [5, 6, 7, 11, 5, 4, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 4, 5, 4, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [12, 3, 3, 4]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [11, 11, 4, 9, 3, 4, 6, 4, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [4, 16, 14, 14, 13, 14, 14, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 6]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [10, 8, 9, 8, 8, 3, 18]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [8, 19, 5, 4, 12, 12, 4, 4, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [12, 3, 4, 3, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [12, 14, 14, 19, 14, 19, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [5, 8, 8, 11, 8, 12]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [28, 9, 13, 9, 8, 9, 9, 21]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [3, 16, 8, 15, 16, 26, 15, 16, 17]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [22, 19, 18, 17, 16, 17, 3]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [23, 8, 3, 24, 29, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [4, 4, 4]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [4, 8, 8, 12, 12]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [7, 19, 14, 14, 14, 13, 14, 22, 14, 13]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [8, 9, 10, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [7, 9, 11, 9, 10, 8, 8, 11, 10, 12]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [4, 22, 16, 5, 16, 4, 15, 5]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 7]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [13, 10, 4, 5, 17, 8, 5, 11]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [4, 4]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [5, 6, 5, 4, 4, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [3, 4, 8, 4, 57, 4, 7, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [4]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [14, 17, 14, 13, 14, 17, 17, 14, 15]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 99
termination = MathOptInterface.OPTIMAL
objective_value = 0.6854008483146846
thermo_feasible = true
