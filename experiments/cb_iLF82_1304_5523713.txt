┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iLF82_1304
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iLF82_1304
----------------------------------
number of metabolites : 1938
number of reactions : 2726
number of genes : 1302

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 55
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2726 flux variables and 5061 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 2, 16, 16, 17, 17, 17, 16, 16, 13, 13, 14, 13, 14, 13, 13, 13, 13, 14, 13, 14, 14, 13, 13, 2]
length(C_list) = 5
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 2, 3, 16, 19, 53, 16, 17, 16, 16, 13, 13, 14, 13, 14, 13, 13, 28, 13, 13, 14, 13, 14, 13, 13, 15, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 3, 17, 17, 18, 17, 19, 17, 17, 14, 14, 15, 14, 15, 14, 14, 15, 14, 14, 15, 14, 15, 14, 14]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [5, 3, 2, 7, 6, 16, 16, 21, 19, 17, 16, 46, 13, 13, 14, 13, 14, 13, 13, 14, 14, 13, 13, 14, 13, 15, 13, 15, 15, 14, 60, 13, 6]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 2, 2, 2, 16, 16, 17, 16, 17, 16, 16, 13, 13, 14, 13, 14, 13, 13, 13, 14, 13, 14, 13, 13, 17, 2]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [3, 2, 3, 5, 2, 16, 16, 17, 16, 83, 16, 16, 13, 13, 15, 13, 14, 13, 13, 14, 17, 14, 16, 13, 13, 14, 13, 14, 13, 13, 15, 150, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [6, 3, 6, 4, 2, 20, 16, 17, 16, 22, 16, 16, 14, 14, 107, 13, 14, 13, 13, 23, 13, 14, 14, 13, 13, 14, 13, 14, 13, 13, 14, 16, 32, 19]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 2, 19, 19, 20, 19, 20, 19, 19, 159, 16, 21, 16, 17, 16, 19, 16, 18, 72, 16, 17, 16, 17, 16, 17, 16, 16, 16, 6]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [11, 8, 6, 6, 6, 3, 2, 7, 16, 17, 17, 16, 18, 16, 16, 13, 13, 14, 13, 14, 13, 13, 26, 13, 13, 14, 13, 14, 13, 13, 15, 3]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [9, 7, 12, 6, 9, 16, 16, 17, 28, 17, 16, 16, 13, 20, 14, 20, 14, 13, 14, 13, 13, 13, 13, 13, 14, 13, 14, 13, 13, 6]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 3, 3, 2, 4, 4, 4, 3, 5, 3, 3]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 2, 2, 2, 2, 2, 6, 4, 5, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 2, 2, 3, 3, 2, 4, 6, 3, 4, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 3, 2, 4, 4, 3, 6, 4, 10, 3, 62, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 14
termination = MathOptInterface.OPTIMAL
objective_value = 0.9824785365611994
thermo_feasible = true
