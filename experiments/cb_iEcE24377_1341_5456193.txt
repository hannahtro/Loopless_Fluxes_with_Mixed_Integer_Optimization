WARNING: Dual bound 0.982461 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.98245 is smaller than the objective of the primal solution 0.982461. The solution might not be optimal.
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iEcE24377_1341
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iEcE24377_1341
----------------------------------
number of metabolites : 1972
number of reactions : 2763
number of genes : 1341

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 138
max_cuts = 14
(indicator, big_m) = (false, true)
BIG M ADDED
model with 2763 flux variables and 5135 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [4, 2, 2, 2, 3, 4, 2, 2, 2, 2, 4, 3, 2, 2, 3, 2, 2, 3, 3, 3, 3, 2, 21, 3, 5, 4, 69, 3, 3, 5, 4, 3, 67, 7, 11, 4]
length(C_list) = 14
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 4, 3, 2, 3, 4, 3, 4, 3, 4, 4, 2, 3, 29, 4, 6, 13, 4, 5, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 3, 3, 5, 4, 5, 4, 4, 4, 3, 4, 4, 3, 9, 6, 4, 4, 4, 3]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 3, 3, 2, 2, 4, 3, 4, 6, 6, 94, 59, 38, 6, 2, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [3, 5, 3, 4, 4, 3, 3, 4, 6, 4, 5, 9, 3, 8, 6, 4, 5, 17, 4, 5, 9, 12, 5, 10, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 65, 5, 2, 5, 2, 2, 2, 24, 25, 188, 5, 5, 9, 112, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [2, 3, 97, 6, 3, 19, 6, 4, 103, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [11, 9, 3, 17, 16, 16, 15, 16, 15, 15, 12, 12, 13, 12, 13, 12, 12, 12, 12, 13, 12, 13, 12, 12, 10, 10, 10, 10, 10, 10, 10, 5, 45, 7, 6, 12, 6, 10, 5, 4, 7, 4, 11, 7, 306, 9, 9, 9, 9, 10, 6, 132, 9, 9, 93, 9, 5, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 15, 15, 16, 15, 16, 15, 15, 12, 12, 13, 12, 13, 12, 12, 14, 12, 12, 13, 12, 13, 12, 12, 10, 10, 10, 13, 13, 13, 10, 10, 10, 6, 6, 5, 4, 6, 5, 4, 6, 10, 8, 8, 8, 8, 9, 9, 8, 10, 9, 6, 6, 7, 4, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 7, 4, 14, 14, 15, 14, 15, 14, 14, 11, 11, 12, 11, 24, 11, 11, 12, 11, 11, 12, 11, 12, 12, 12, 9, 9, 9, 9, 11, 13, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 5, 16, 5, 4, 4, 7, 8, 7, 8, 7, 8, 5, 5, 16, 7, 9, 4, 7, 38, 4, 4, 6, 4, 4, 5, 8, 5, 6, 6, 4, 43, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 14, 14, 15, 14, 15, 14, 17, 11, 12, 12, 12, 12, 11, 11, 11, 14, 11, 11, 11, 11, 11, 12, 11, 14, 11, 14, 17, 18, 11, 12, 14, 12, 10, 12, 11, 11, 25, 9, 9, 8, 89, 4, 7, 4, 4, 4, 3, 5, 4, 4, 4, 4, 4, 6, 5, 4, 4, 5, 4, 5, 4, 7, 7, 7, 21, 9, 5, 5, 8, 7, 7, 4, 8, 6, 4, 5, 5, 5, 3, 5, 5, 8, 4, 4, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 7, 6, 5, 5, 14, 14, 15, 14, 15, 14, 17, 11, 17, 12, 11, 12, 11, 11, 11, 11, 14, 12, 13, 11, 11, 12, 12, 13, 12, 12, 11, 17, 9, 9, 11, 11, 12, 13, 9, 9, 11, 11, 9, 9, 24, 6, 5, 5, 5, 8, 4, 4, 4, 5, 4, 5, 4, 6, 5, 8, 8, 5, 9, 4, 7, 6, 7, 5, 7, 7, 8, 9, 8, 10, 9, 7, 7, 8, 7, 22, 9, 4, 5, 5, 4, 8, 5, 4, 5, 6, 4, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [10, 5, 9, 3, 14, 14, 15, 18, 15, 14, 14, 9, 9, 10, 9, 10, 9, 9, 13, 44, 9, 9, 10, 9, 10, 10, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 4, 3, 5, 4, 3, 7, 5, 6, 3, 4, 6, 4, 5, 7, 5, 6, 7, 12, 7, 6, 3, 5, 5, 4, 3, 6, 5, 5, 5, 133, 6, 4, 6, 5, 6, 4, 5, 3, 5, 5, 3, 18, 4, 6, 4, 4, 3, 6, 5, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [51, 5, 6, 5, 14, 15, 16, 14, 15, 15, 15, 9, 12, 13, 13, 10, 9, 9, 12, 75, 12, 9, 11, 10, 11, 10, 10, 12, 16, 10, 10, 8, 9, 11, 11, 9, 12, 8, 11, 11, 11, 239, 7, 8, 3, 5, 2, 5, 7, 4, 27, 3, 8, 4, 4, 7, 4, 5, 4, 4, 6, 4, 6, 8, 4, 7, 5, 5, 5, 5, 5, 8, 7, 3, 7, 6, 5, 7, 6, 4, 3, 9, 4, 4, 8, 6, 9, 5, 6, 10, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 4, 4, 40, 15, 16, 15, 16, 15, 15, 12, 12, 13, 12, 13, 12, 12, 12, 12, 13, 12, 13, 12, 12, 10, 10, 10, 10, 10, 10, 10, 9, 5, 5, 78, 4, 5, 5, 5, 25, 4, 4, 5, 5, 7, 6, 4, 4, 9, 11, 4, 5, 4, 5, 5, 8, 6, 8, 8, 22, 8, 8, 9, 3, 9, 12, 8, 5, 9, 84, 5, 7, 7, 7, 7, 5, 4, 4, 4, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [10, 6, 5, 5, 14, 14, 15, 14, 15, 14, 14, 11, 11, 12, 11, 12, 11, 11, 11, 11, 12, 14, 12, 11, 11, 9, 9, 11, 9, 9, 9, 9, 9, 8, 4, 5, 5, 11, 7, 6, 5, 5, 5, 5, 5, 5, 45, 9, 5, 7, 7, 7, 7, 5, 7, 7, 7, 7, 8, 5, 8, 7, 7, 7, 4, 12, 6, 16, 6, 7, 6, 5, 5, 5, 12, 5, 3, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [10, 5, 11, 4, 5, 7, 5, 14, 14, 15, 16, 17, 14, 14, 11, 11, 12, 11, 12, 11, 11, 14, 11, 23, 11, 12, 11, 13, 11, 12, 17, 15, 16, 11, 11, 11, 12, 9, 9, 11, 16, 9, 9, 8, 21, 4, 4, 4, 6, 5, 6, 3, 7, 4, 3, 6, 6, 4, 3, 9, 6, 26, 5, 27, 5, 3, 9, 3, 5, 4, 8, 7, 7, 10, 8, 4, 5, 9, 7, 7, 6, 8, 4, 8, 9, 5, 6, 6, 5, 9, 7, 5, 5, 13, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [8, 7, 7, 16, 14, 15, 14, 15, 20, 14, 11, 11, 12, 11, 53, 11, 14, 14, 12, 14, 14, 11, 12, 11, 12, 11, 11, 9, 8, 11, 12, 13, 9, 8, 9, 9, 8, 26, 4, 3, 4, 10, 4, 4, 4, 6, 3, 26, 7, 6, 8, 4, 6, 4, 4, 6, 6, 4, 6, 6, 5, 6, 4, 11, 11, 7, 7, 7, 8, 7, 9, 8, 120, 7, 16, 7, 8, 6, 16, 3, 7, 4, 156, 8, 4, 5, 5, 4, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [6, 6, 4, 7, 18, 14, 15, 14, 15, 14, 14, 11, 11, 12, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 12, 11, 13, 9, 8, 11, 12, 9, 8, 11, 9, 8, 8, 5, 3, 5, 6, 5, 4, 6, 29, 5, 4, 6, 5, 11, 5, 5, 4, 5, 5, 4, 5, 5, 5, 4, 5, 7, 7, 7, 7, 8, 3, 4, 10, 7, 16, 6, 7, 5, 4, 3, 5, 7, 4, 9, 21, 5, 5, 25]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [9, 7, 5, 4, 7, 14, 38, 15, 14, 15, 14, 14, 11, 11, 12, 11, 12, 11, 11, 11, 11, 12, 11, 13, 11, 12, 11, 11, 12, 11, 12, 11, 11, 9, 8, 12, 11, 12, 9, 8, 11, 8, 8, 8, 8, 7, 6, 4, 5, 4, 4, 5, 3, 6, 6, 6, 5, 6, 5, 74, 7, 4, 5, 4, 4, 6, 6, 4, 5, 4, 7, 7, 7, 7, 17, 5, 8, 7, 7, 8, 8, 4, 99, 5, 10, 7, 7, 4, 22, 7, 5, 4, 192, 4, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [7, 5, 4, 4, 7, 5, 15, 16, 16, 15, 16, 15, 15, 10, 10, 11, 10, 11, 10, 10, 11, 10, 10, 11, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 3, 5, 6, 3, 4, 4, 8, 5, 4, 6, 4, 4, 6, 4, 12, 7, 5, 3, 9, 7, 7, 7, 6, 6, 6, 8, 7, 4, 7, 8, 6, 10, 5, 6, 4, 7, 8, 4, 4, 3, 9, 10, 4, 6, 6, 7, 5, 4, 24]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [15, 5, 132, 17, 17, 76, 65, 17, 16, 17, 11, 10, 11, 10, 12, 12, 11, 12, 10, 10, 10, 11, 12, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 10, 11, 11, 11, 11, 5, 4, 5, 7, 5, 6, 5, 4, 6, 6, 4, 5, 6, 4, 6, 9, 6, 6, 3, 7, 3, 4, 4, 6, 5, 9, 6, 5, 8, 6, 6, 4, 5, 6, 5, 5, 4, 6, 165, 5, 14, 4, 6, 10, 5, 3, 14, 6, 5, 6, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [2, 5, 7, 4, 6, 5, 6, 5, 15, 14, 21, 14, 15, 14, 14, 12, 12, 13, 12, 19, 12, 18, 13, 13, 13, 14, 12, 12, 12, 12, 14, 13, 13, 12, 12, 8, 8, 18, 12, 20, 12, 13, 8, 10, 12, 12, 8, 8, 8, 6, 3, 4, 3, 6, 4, 4, 6, 6, 9, 3, 5, 4, 8, 4, 5, 37, 5, 4, 4, 7, 6, 6, 4, 9, 4, 5, 5, 27, 5, 7, 4, 5, 6, 5, 8, 4, 5, 3, 5, 6, 5, 6, 6, 5, 6, 5, 4, 5, 6, 5, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [5, 4, 6, 6, 6, 19, 14, 16, 17, 15, 14, 14, 12, 12, 13, 15, 13, 12, 12, 14, 14, 12, 12, 18, 12, 13, 22, 12, 8, 8, 15, 15, 8, 8, 20, 10, 9, 12, 4, 6, 4, 5, 7, 4, 4, 8, 5, 3, 4, 2, 4, 6, 4, 9, 6, 5, 15, 6, 6, 5, 29, 3, 4, 4, 12, 5, 5, 6, 4, 6, 6, 5, 6, 9, 5, 4, 19, 6, 4, 5, 6, 4, 55, 6, 4, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [7, 6, 3, 4, 5, 3, 12, 12, 13, 12, 13, 12, 12, 10, 10, 11, 13, 11, 10, 10, 11, 10, 10, 44, 11, 10, 10, 11, 10, 11, 24, 12, 10, 8, 11, 10, 9, 8, 20, 10, 9, 8, 8, 3, 4, 6, 5, 3, 3, 9, 5, 9, 7, 8, 4, 4, 4, 8, 4, 4, 5, 4, 6, 3, 5, 9, 10, 4, 3, 3, 3, 4, 7, 4, 4, 6, 5, 5, 7, 6, 8, 4, 4, 5, 3, 3, 5, 9, 7, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [8, 4, 5, 3, 7, 12, 11, 13, 11, 13, 12, 12, 11, 10, 11, 10, 11, 10, 10, 10, 11, 10, 10, 10, 10, 11, 10, 11, 22, 10, 8, 8, 10, 11, 10, 11, 8, 8, 18, 10, 8, 8, 8, 4, 4, 5, 5, 5, 5, 4, 10, 4, 4, 6, 4, 5, 6, 5, 5, 27, 4, 3, 4, 5, 4, 4, 8, 4, 4, 70, 4, 4, 7, 5, 4, 3, 7, 7, 6, 20, 4, 6, 5, 5, 70, 7, 4, 7, 5, 6, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [16, 5, 6, 11, 11, 11, 14, 12, 13, 12, 13, 14, 10, 13, 11, 11, 10, 10, 10, 11, 12, 10, 14, 10, 10, 11, 10, 11, 19, 11, 8, 9, 8, 8, 15, 11, 3, 13, 8, 6, 9, 4, 4, 3, 7, 4, 4, 4, 6, 4, 6, 8, 3, 4, 5, 7, 5, 4, 4, 3, 5, 5, 6, 4, 7, 13, 4, 4, 5, 4, 4, 4, 81, 4, 3, 6, 5, 7, 5, 3, 3, 4, 5, 12, 6, 8, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [29, 7, 148, 134, 12, 14, 11, 13, 12, 12, 11, 10, 12, 10, 11, 10, 10, 10, 11, 10, 10, 11, 10, 11, 18, 10, 8, 8, 11, 16, 8, 8, 14, 8, 8, 8, 3, 4, 10, 5, 5, 3, 4, 4, 6, 7, 5, 3, 12, 5, 3, 5, 5, 4, 5, 3, 12, 18, 8, 3, 7, 13, 12, 4, 8, 4, 4, 8, 80, 36, 7, 5, 5, 6, 6, 5, 4, 6, 26, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [14, 6, 10, 5, 3, 11, 12, 13, 13, 13, 16, 5, 10, 10, 11, 13, 11, 10, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 6, 10, 8, 8, 10, 10, 114, 11, 8, 8, 5, 10, 8, 8, 9, 11, 4, 4, 5, 11, 6, 4, 15, 5, 17, 7, 7, 12, 11, 7, 4, 8, 8, 11, 7, 12, 41, 12, 9, 4, 3, 4, 7, 13, 12, 5, 9, 10, 12, 12, 6, 6, 7, 8, 4, 4, 5, 5, 5, 6, 5, 6, 12, 6, 6, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [20, 8, 6, 3, 4, 11, 14, 15, 11, 14, 12, 12, 11, 11, 12, 11, 12, 11, 11, 11, 11, 12, 11, 13, 11, 11, 11, 12, 210, 12, 11, 15, 8, 8, 11, 12, 15, 12, 19, 8, 11, 11, 8, 9, 8, 3, 11, 4, 3, 4, 4, 5, 4, 8, 5, 6, 7, 4, 9, 5, 6, 4, 9, 5, 10, 75, 8, 5, 13, 4, 12, 4, 14, 13, 4, 13, 10, 4, 13, 13, 6, 3, 5, 5, 4, 8, 7, 7, 7, 4, 5, 10, 3]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 7, 4, 10, 12, 12, 14, 11, 13, 13, 16, 10, 10, 11, 10, 106, 10, 10, 10, 10, 11, 10, 10, 71, 11, 10, 11, 19, 10, 8, 10, 10, 12, 12, 8, 9, 4, 8, 8, 9, 6, 5, 8, 6, 18, 8, 4, 6, 8, 7, 13, 7, 9, 3, 4, 4, 7, 5, 7, 5, 6, 8, 3, 6, 5, 5, 10, 12, 13, 12, 13, 12, 6, 11, 15, 12, 97, 8, 6, 10, 11, 5, 6, 5, 38, 6, 67, 6, 8, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [15, 4, 5, 6, 4, 4, 5, 14, 14, 16, 19, 15, 15, 15, 25, 9, 10, 9, 10, 9, 10, 35, 11, 11, 10, 9, 10, 9, 14, 25, 14, 9, 9, 10, 10, 9, 10, 11, 9, 10, 10, 10, 10, 10, 11, 10, 5, 5, 8, 4, 7, 7, 4, 6, 5, 8, 6, 6, 8, 7, 4, 4, 6, 3, 5, 6, 4, 5, 4, 4, 5, 3, 14, 15, 14, 15, 14, 7, 14, 14, 7, 5, 7, 12, 7, 5, 4, 9, 5, 5, 5, 30, 11, 8, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [5, 6, 11, 5, 5, 14, 15, 70, 13, 15, 14, 14, 9, 9, 10, 9, 10, 9, 9, 9, 16, 9, 9, 9, 9, 10, 9, 10, 9, 9, 10, 10, 9, 10, 9, 11, 11, 10, 9, 10, 10, 10, 4, 4, 3, 3, 2, 6, 4, 4, 3, 5, 4, 4, 6, 3, 5, 2, 8, 6, 4, 4, 3, 5, 5, 5, 4, 7, 7, 14, 15, 16, 5, 8, 16, 9, 22, 9, 7, 4, 3, 8, 4, 8, 4, 3, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [15, 9, 3, 5, 5, 5, 16, 16, 166, 15, 17, 17, 17, 13, 13, 14, 13, 14, 13, 13, 13, 13, 14, 13, 13, 13, 13, 13, 14, 13, 14, 25, 13, 12, 12, 14, 33, 14, 13, 12, 20, 14, 12, 12, 12, 4, 11, 4, 19, 4, 4, 16, 8, 7, 9, 4, 7, 3, 13, 5, 15, 4, 4, 4, 4, 16, 17, 19, 18, 16, 15, 16, 16, 7, 7, 11, 8, 14, 14, 5, 17, 6, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [5, 5, 6, 4, 4, 192, 5, 4, 13, 15, 16, 13, 20, 18, 5, 9, 9, 10, 9, 132, 113, 42, 9, 9, 9, 11, 9, 9, 9, 9, 10, 9, 21, 20, 9, 10, 10, 9, 10, 10, 10, 15, 11, 10, 10, 4, 9, 4, 3, 3, 4, 7, 6, 5, 6, 3, 6, 6, 5, 10, 6, 6, 4, 5, 7, 182, 5, 7, 3, 6, 14, 7, 14, 15, 4, 7, 14, 14, 103, 5, 6, 4, 5, 6, 7, 6, 6, 9, 10, 4, 4, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [13, 13, 6, 12, 13, 15, 12, 14, 13, 14, 12, 12, 13, 12, 13, 12, 12, 12, 12, 13, 12, 13, 12, 12, 12, 12, 13, 12, 13, 21, 12, 9, 11, 12, 12, 13, 9, 9, 16, 9, 9, 13, 5, 2, 4, 22, 5, 3, 8, 8, 8, 4, 7, 6, 5, 6, 8, 4, 5, 136, 7, 5, 4, 6, 13, 100, 13, 14, 14, 50, 4, 16, 13, 7, 6, 7, 4, 4, 4, 4, 6, 4, 8, 12, 6, 14, 13, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 8, 6, 5, 3, 5, 6, 6, 5, 6, 5, 5, 5, 5, 5, 7, 3, 5, 6, 5, 5, 21, 7, 8, 7, 7, 9, 7, 6, 5, 8, 7, 10, 9, 7, 8, 7, 12, 4, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [13, 9, 11, 12, 4, 5, 10, 17, 17, 19, 27, 69, 17, 15, 9, 9, 10, 9, 10, 100, 11, 10, 159, 17, 9, 9, 9, 9, 10, 9, 10, 16, 9, 13, 13, 13, 13, 11, 10, 13, 13, 13, 10, 4, 6, 4, 6, 4, 5, 7, 4, 10, 7, 5, 101, 10, 12, 4, 5, 4, 7, 8, 7, 17, 7, 17, 18, 7, 7, 11, 17, 13, 10, 6, 4, 4, 7, 7, 12, 4, 6, 7, 92, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [9, 8, 8, 6, 14, 15, 16, 16, 16, 15, 7, 11, 11, 12, 11, 12, 11, 11, 11, 11, 13, 31, 12, 11, 11, 10, 10, 12, 11, 10, 10, 10, 10, 10, 9, 14, 4, 6, 6, 7, 4, 6, 8, 11, 7, 7, 9, 7, 7, 6, 8, 6, 15, 7, 7, 13, 7, 7, 14, 15, 10, 14, 14, 10, 8, 7, 11, 9, 8, 15, 12, 7, 8, 17, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [15, 6, 11, 7, 14, 15, 17, 14, 17, 15, 16, 9, 9, 10, 9, 10, 9, 9, 9, 9, 10, 9, 10, 24, 9, 11, 11, 11, 11, 19, 11, 11, 11, 12, 6, 4, 6, 6, 4, 7, 4, 11, 7, 7, 7, 17, 7, 9, 12, 4, 6, 5, 7, 4, 12, 17, 15, 16, 16, 8, 15, 15, 36, 8, 76, 14, 6, 11, 13, 11, 4, 16, 7, 7, 7, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [10, 6, 7, 5, 7, 6, 3, 12, 12, 14, 11, 13, 12, 12, 10, 10, 11, 10, 11, 10, 10, 10, 12, 10, 11, 10, 11, 10, 11, 10, 10, 8, 9, 82, 10, 11, 12, 8, 8, 16, 11, 22, 8, 8, 22, 4, 6, 4, 6, 5, 5, 4, 4, 7, 10, 5, 4, 13, 4, 5, 7, 12, 5, 8, 5, 5, 12, 13, 13, 13, 13, 5, 13, 12, 5, 4, 16, 8, 8, 6, 5, 14, 24, 7, 5, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [12, 7, 8, 7, 6, 6, 16, 16, 17, 16, 17, 17, 23, 11, 11, 15, 11, 12, 11, 11, 89, 21, 11, 11, 12, 11, 12, 23, 11, 12, 12, 12, 12, 12, 18, 12, 12, 13, 9, 5, 5, 4, 35, 4, 10, 4, 7, 7, 4, 6, 7, 15, 13, 6, 5, 7, 17, 16, 17, 7, 9, 16, 16, 13, 11, 4, 7, 11, 8, 8, 15, 5, 12, 7, 7, 10, 16, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [5, 5, 6, 7, 5, 3, 14, 45, 20, 15, 20, 15, 6, 16, 84, 17, 16, 17, 22, 16, 16, 45, 16, 16, 17, 17, 16, 17, 5, 16, 11, 12, 16, 18, 11, 11, 7, 11, 11, 11, 16, 5, 6, 5, 3, 5, 6, 13, 9, 6, 12, 8, 6, 5, 15, 8, 7, 9, 17, 8, 7, 5, 10, 19, 21, 19, 8, 7, 8, 19, 19, 10, 6, 8, 9, 12, 8, 5, 8, 6, 4, 5, 6, 7, 6, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 5, 13, 13, 19, 12, 19, 13, 102, 14, 14, 16, 14, 15, 14, 15, 40, 14, 14, 14, 15, 14, 15, 5, 14, 9, 9, 16, 9, 10, 5, 9, 9, 9, 4, 4, 3, 5, 4, 5, 5, 3, 5, 5, 7, 59, 8, 4, 5, 4, 5, 4, 5, 4, 4, 8, 17, 17, 18, 4, 5, 6, 17, 17, 14, 3, 4, 4, 165, 6, 15, 5, 4, 4, 3, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [9, 66, 5, 6, 17, 15, 16, 32, 16, 15, 7, 9, 9, 10, 9, 10, 9, 9, 11, 9, 9, 10, 9, 10, 20, 9, 12, 11, 11, 11, 12, 27, 31, 19, 14, 11, 12, 13, 5, 4, 3, 4, 5, 6, 7, 7, 9, 4, 10, 12, 4, 10, 19, 10, 4, 15, 11, 16, 18, 10, 12, 14, 15, 15, 11, 64, 4, 16, 13, 9, 11, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [7, 7, 7, 13, 14, 211, 14, 19, 14, 14, 15, 15, 16, 15, 16, 15, 15, 37, 18, 15, 16, 15, 16, 45, 15, 10, 11, 15, 136, 11, 10, 23, 18, 10, 10, 5, 4, 6, 9, 4, 5, 11, 6, 5, 5, 9, 9, 5, 7, 28, 14, 5, 6, 5, 7, 10, 6, 8, 4, 18, 19, 18, 7, 35, 4, 4, 18, 18, 8, 6, 7, 6, 10, 5, 6, 17, 4, 5, 6, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [7, 6, 10, 7, 5, 6, 7, 6, 35, 5, 4, 7, 4, 5, 5, 8, 7, 8, 14, 8, 23, 7, 10, 6, 5, 5, 8, 11, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [7, 6, 2, 5, 7, 7, 44, 254, 16, 13, 15, 15, 14, 10, 9, 10, 9, 10, 9, 9, 10, 9, 9, 10, 9, 10, 9, 9, 11, 13, 10, 10, 10, 16, 16, 7, 11, 3, 4, 2, 4, 5, 3, 17, 10, 14, 7, 13, 14, 121, 10, 4, 13, 8, 6, 14, 15, 14, 203, 13, 7, 14, 14, 16, 17, 11, 7, 9, 7, 14, 6, 6, 9, 4, 6, 15, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [3, 6, 8, 5, 7, 13, 13, 15, 12, 4, 13, 21, 10, 10, 11, 10, 19, 10, 10, 5, 10, 11, 11, 10, 4, 10, 10, 9, 11, 10, 9, 12, 14, 9, 9, 9, 8, 6, 4, 5, 19, 8, 5, 4, 21, 5, 7, 4, 5, 5, 12, 10, 13, 5, 15, 6, 106, 13, 5, 9, 4, 5, 4, 5, 8, 17, 4, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [23, 15, 6, 21, 16, 16, 16, 19, 15, 8, 16, 15, 13, 13, 14, 13, 8, 13, 20, 14, 9, 14, 13, 13, 186, 13, 17, 34, 13, 12, 14, 14, 15, 16, 12, 12, 27, 12, 12, 12, 14, 17, 15, 17, 19, 15, 17, 15, 11, 15, 17, 18, 21, 20, 25, 15, 14, 15, 49, 15, 17, 16, 17, 15, 16, 13, 16, 5, 21, 16, 20, 21, 15, 15, 18, 15, 6, 11, 17, 14, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [3, 7, 6, 5, 25, 20, 15, 8, 17, 14, 223, 15, 16, 15, 4, 15, 15, 15, 15, 16, 15, 15, 15, 15, 16, 15, 6, 189, 15, 8, 12, 15, 8, 5, 6, 3, 15, 12, 6, 5, 6, 8, 9, 5, 5, 9, 5, 3, 6, 8, 8, 79, 56, 18, 13, 11, 18, 8, 9, 9, 13, 9, 6, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [14, 7, 7, 11, 15, 15, 16, 14, 17, 25, 29, 13, 12, 17, 12, 13, 13, 12, 12, 13, 12, 12, 12, 12, 12, 13, 14, 13, 12, 12, 11, 12, 18, 57, 13, 15, 12, 15, 13, 56, 14, 17, 8, 9, 13, 7, 16, 14, 15, 25, 13, 17, 19, 15, 6, 13, 31, 9, 18, 16, 16, 15, 16, 102, 14, 14, 15, 5, 15, 15, 9, 25, 14, 13, 14, 15, 28, 14, 15, 14, 15, 25, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [10, 4, 4, 17, 10, 13, 22, 23, 23, 31, 35, 25, 26, 17, 26, 27, 166, 25, 8, 25, 25, 26, 25, 26, 29, 17, 11, 18, 35, 10, 6, 7, 16, 13, 12, 12, 7, 19, 7, 30, 28, 10, 4, 34, 28, 10, 16, 19, 16, 18, 6, 19, 8, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [17, 3, 3, 22, 18, 21, 17, 21, 18, 6, 16, 16, 17, 16, 17, 16, 16, 19, 17, 16, 16, 16, 17, 16, 17, 16, 26, 14, 16, 17, 14, 14, 4, 14, 14, 14, 17, 5, 10, 22, 7, 4, 19, 140, 4, 6, 10, 4, 8, 19, 12, 19, 235, 21, 12, 12, 15, 6, 18, 4, 11, 11, 25, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [4, 13, 10, 10, 75, 17, 7, 20, 11, 10, 15, 14, 8, 11, 11, 5, 10, 7, 10, 12, 14, 4, 10, 10, 11, 12, 5, 6, 6, 21, 5, 14, 4, 12, 10, 4, 11, 9, 5, 12, 15, 5, 7, 6, 4, 3, 6, 6, 8, 87, 6, 111, 4, 5, 7, 6, 17, 6, 12, 22, 9, 6, 7, 24, 5, 11, 14, 11, 5, 7, 8, 6, 12, 4, 5, 5, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [2, 3, 5, 9, 4, 6, 15, 4, 17, 14, 24, 15, 17, 12, 10, 13, 12, 15, 12, 13, 12, 3, 14, 13, 12, 19, 12, 8, 13, 12, 13, 12, 24, 5, 12, 12, 13, 12, 13, 11, 11, 81, 19, 12, 4, 8, 7, 5, 11, 5, 10, 5, 15, 7, 32, 59, 5, 11, 10, 12, 13, 17, 5, 5, 3, 5, 6, 16, 15, 23, 17, 6, 9, 15, 15, 5, 8, 9, 6, 7, 8, 8, 8, 11, 5, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [7, 13, 10, 7, 13, 15, 22, 14, 4, 14, 5, 10, 14, 13, 5, 10, 8, 12, 10, 11, 6, 5, 10, 20, 10, 5, 126, 11, 5, 10, 9, 11, 6, 12, 12, 8, 12, 10, 132, 9, 9, 9, 6, 4, 4, 6, 5, 4, 4, 5, 4, 5, 15, 5, 14, 6, 4, 5, 4, 5, 5, 8, 24, 16, 6, 9, 5, 13, 13, 5, 18, 10, 4, 21, 13, 10, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [4, 4, 8, 16, 16, 18, 15, 31, 3, 13, 13, 14, 13, 14, 13, 13, 13, 15, 13, 13, 13, 14, 13, 14, 13, 13, 13, 14, 17, 12, 27, 6, 165, 3, 8, 4, 7, 5, 5, 16, 17, 106, 29, 16, 8, 5, 7, 5, 4, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [4, 12, 4, 10, 7, 4, 17, 17, 22, 21, 10, 4, 21, 18, 19, 8, 9, 18, 18, 18, 19, 10, 8, 18, 7, 18, 19, 22, 22, 18, 93, 13, 5, 18, 18, 19, 22, 9, 13, 18, 41, 13, 19, 13, 11, 7, 5, 12, 6, 20, 15, 5, 7, 5, 15, 5, 11, 8, 14, 4, 4, 11, 6, 21, 11, 7, 35, 9, 7, 9, 21, 38, 11, 6, 11, 10, 6, 8, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [15, 6, 4, 5, 18, 5, 5, 16, 30, 17, 17, 16, 25, 10, 8, 12, 13, 12, 10, 14, 13, 6, 12, 10, 12, 10, 12, 11, 18, 14, 4, 13, 11, 13, 14, 4, 5, 6, 13, 5, 36, 25, 14, 12, 18, 5, 22, 5, 10, 11, 7, 5, 12, 5, 4, 4, 12, 19, 17, 16, 17, 13, 5, 16, 16, 14, 12, 5, 12, 4, 5, 12, 35, 5, 15, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [32, 27, 22, 26, 8, 28, 31, 26, 28, 8, 12, 6, 12, 4, 12, 12, 5, 28, 4, 12, 12, 17, 14, 17, 12, 34, 235, 14, 12, 14, 28, 30, 17, 28, 8, 6, 4, 29, 3, 8, 5, 8, 9, 4, 5, 12, 6, 4, 4, 8, 14, 4, 5, 26, 15, 35, 31, 39, 45, 8, 69, 7, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [8, 16, 42, 8, 18, 38, 27, 18, 27, 18, 15, 16, 11, 17, 16, 17, 16, 16, 16, 16, 17, 10, 16, 17, 16, 17, 23, 8, 16, 16, 17, 10, 19, 21, 21, 11, 11, 40, 23, 34, 12, 10, 44, 6, 7, 11, 19, 44, 26, 22, 76, 10, 7, 11, 18, 11, 25, 22, 12, 25, 19, 26, 13, 20, 20, 12, 12, 12, 19, 40, 9, 10, 35, 20, 24]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [3, 5, 5, 16, 7, 14, 14, 16, 5, 15, 16, 5, 10, 6, 10, 5, 10, 21, 17, 9, 8, 5, 9, 17, 9, 16, 10, 4, 38, 20, 19, 10, 154, 6, 12, 5, 10, 9, 7, 16, 19, 10, 5, 4, 9, 5, 26, 5, 6, 7, 4, 4, 13, 5, 16, 7, 12, 15, 5, 5, 14, 5, 5, 5, 4, 14, 15, 5, 15, 5, 4, 14, 15, 6, 11, 6, 6, 4, 5, 5, 5, 6, 5, 4, 13, 7, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [23, 11, 6, 13, 7, 12, 19, 4, 8, 17, 7, 12, 12, 12, 10, 14, 12, 17, 7, 13, 11, 6, 28, 12, 133, 12, 5, 5, 14, 8, 4, 27, 33, 11, 20, 13, 6, 15, 6, 7, 11, 19, 5, 7, 15, 5, 5, 6, 11, 19, 7, 6, 18, 18, 7, 12, 17, 7, 13, 15, 15, 5, 5, 12, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [13, 26, 30, 31, 19, 19, 21, 15, 20, 23, 10, 23, 14, 10, 10, 10, 14, 13, 12, 15, 13, 10, 11, 12, 23, 10, 16, 85, 10, 133, 11, 14, 17, 13, 8, 26, 16, 10, 30, 26, 11, 20, 8, 17, 8, 28, 14, 13, 11, 14, 8, 8, 14, 11, 19, 20, 19, 17, 19, 30, 21, 13, 21, 13, 43, 22, 14, 36, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 39, 8, 4, 4, 4, 28, 15, 13, 17, 10, 134, 13, 12, 13, 10, 12, 8, 5, 12, 12, 5, 5, 5, 13, 13, 14, 5, 15, 14, 14, 12, 13, 15, 16, 14, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [51, 14, 3, 19, 19, 18, 24, 23, 7, 20, 34, 112, 19, 12, 35, 12, 18, 21, 15, 13, 12, 12, 4, 6, 12, 31, 12, 27, 13, 13, 20, 17, 15, 9, 17, 12, 5, 7, 18, 5, 9, 17, 19, 15, 18, 4, 18, 15, 8, 68, 14, 18, 7, 5, 18, 5, 10, 7, 21, 10, 8, 8, 20, 17, 27, 5, 17, 18, 29, 6, 8, 20, 7, 6, 18, 271, 14, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [12, 22, 12, 21, 30, 27, 18, 22, 6, 18, 25, 12, 28, 12, 15, 12, 40, 21, 18, 12, 22, 21, 12, 11, 13, 12, 28, 21, 20, 7, 23, 12, 31, 11, 23, 29, 24, 20, 25, 24, 7, 23, 12, 29, 27, 23, 13, 33, 21, 16, 20, 83, 32, 24, 35, 29, 21, 32, 22, 25, 32, 13, 22, 25, 21, 32, 16, 35, 24, 21, 26, 26, 23, 31, 27, 49, 45, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [5, 3, 8, 3, 16, 21, 29, 16, 17, 15, 19, 28, 5, 4, 4, 18, 14, 27, 5, 26, 4, 7, 7, 17, 37, 14, 30, 33, 23, 31, 27, 7, 15, 103, 22, 21, 6, 13, 20, 4, 7, 5, 11, 5, 18, 56, 5, 9, 5, 5, 17, 4, 5, 14, 4, 9, 9, 30, 20, 22, 10, 21, 7, 120, 5, 5, 36, 25, 6, 7, 5, 6, 8, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 12, 15, 23, 15, 4, 15, 24, 4, 34, 4, 27, 8, 6, 8, 33, 22, 9, 26, 7, 34, 7, 20, 29, 4, 20, 10, 4, 13, 20, 23, 17, 5, 8, 88, 8, 8, 10, 25, 10, 6, 12, 4, 28, 18, 15, 9, 16, 16, 15, 9, 15, 15, 14, 34, 5, 6, 5, 61, 30, 13, 39, 9, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [7, 5, 13, 16, 22, 6, 16, 29, 19, 15, 16, 23, 3, 40, 34, 24, 25, 37, 37, 35, 15, 7, 42, 40, 20, 34, 27, 27, 37, 37, 8, 6, 35, 11, 11, 7, 8, 43, 8, 6, 4, 5, 7, 9, 6, 7, 18, 6, 12, 103, 6, 4, 7, 5, 12, 11, 43, 7, 13, 5, 6, 18, 5, 12, 11, 6, 20, 16, 16, 5, 4, 6, 27, 7, 6, 6, 92, 16, 4, 10, 23, 23, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [56, 13, 15, 4, 15, 25, 22, 15, 17, 4, 28, 14, 24, 4, 4, 12, 25, 25, 25, 33, 22, 8, 35, 21, 13, 31, 19, 21, 9, 21, 17, 21, 28, 15, 15, 8, 27, 26, 16, 26, 35, 22, 9, 21, 26, 29, 20, 12, 34, 4, 29, 29, 12, 19, 92, 31, 23, 18, 34, 17, 33, 17, 26, 26, 15, 10, 17, 21, 15, 22, 35, 12, 5, 22, 26, 15, 14, 18, 15, 25, 14, 78, 18, 11, 34, 40, 12, 27, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [42, 16, 22, 17, 34, 7, 17, 21, 29, 7, 19, 19, 21, 30, 19, 19, 25, 15, 16, 17, 19, 15, 21, 22, 31, 25, 22, 24, 19, 27, 36, 16, 35, 41, 25, 19, 21, 3, 7, 27, 22, 17, 14, 19, 19, 16, 13, 13, 9, 13, 18, 35, 11, 16, 25, 5, 19, 21, 31, 44, 22, 21, 13, 21, 8, 14, 30, 18, 21, 24, 27, 41, 16, 27, 25, 23, 23, 23, 28, 27, 30, 34]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [11, 4, 8, 8, 13, 7, 5, 20, 31, 22, 13, 22, 25, 7, 16, 10, 7, 7, 8, 15, 5, 21, 6, 8, 5, 2, 15, 18, 23, 26, 24, 23, 21, 10, 15, 171, 21, 15, 15, 10, 20, 13, 8, 10, 38, 3, 11, 24, 15, 5, 28, 8, 4, 8, 20, 6, 9, 119, 5, 9, 5, 8, 7, 20, 63, 19, 19, 9, 36, 10, 19, 5, 7, 6, 7, 5, 9, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [33, 4, 6, 7, 9, 6, 14, 22, 14, 6, 5, 4, 8, 9, 12, 12, 31, 9, 3, 11, 6, 6, 6, 26, 6, 19, 19, 6, 34, 18, 13, 18, 11, 7, 7, 4, 6, 5, 5, 6, 5, 6, 5, 32, 7, 7, 7, 14, 7, 13, 5, 7, 6, 5, 6, 6, 6, 6, 6, 7, 7, 6, 18, 176, 14, 7, 15, 6, 7, 5, 19, 5, 6, 4, 4, 6, 5, 7, 7, 5, 6, 14, 11, 11, 8, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [14, 14, 5, 8, 6, 25, 20, 5, 14, 4, 4, 4, 26, 14, 14, 14, 20, 27, 14, 31, 4, 14, 26, 9, 14, 14, 21, 32, 34, 21, 9, 20, 36, 29, 24, 6, 17, 20, 6, 19, 16, 16, 18, 5, 6, 189, 6, 23, 37]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [4, 32, 5, 14, 14, 16, 12, 14, 13, 8, 8, 11, 11, 10, 8, 31, 4, 9, 10, 4, 31, 24, 21, 11, 62, 4, 34, 9, 5, 14, 14, 9, 9, 6, 9, 12, 9, 20, 4, 4, 4, 4, 7, 4, 12, 4, 15, 5, 8, 5, 9, 6, 9, 5, 4, 6, 4, 14, 14, 15, 14, 8, 7, 14, 5, 5, 24, 6, 6, 13, 6, 28, 3, 4, 5, 22, 9, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [11, 17, 18, 26, 14, 27, 27, 12, 17, 22, 25, 21, 21, 17, 17, 19, 25, 21, 27, 24, 21, 17, 36, 23, 21, 22, 22, 28, 17, 23, 22, 24, 71, 22, 23, 22, 17, 18, 23, 16, 16, 17, 27, 24, 15, 24, 17, 22, 15, 17, 17, 25, 25, 22, 38, 34, 17, 24, 18, 17, 55, 17, 121, 16, 103, 31, 19, 26]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [48, 11, 5, 19, 22, 54, 29, 17, 17, 28, 7, 22, 8, 53, 5, 7, 22, 22, 7, 8, 26, 7, 22, 18, 21, 21, 24, 22, 22, 16, 30, 22, 16, 11, 16, 30, 26, 16, 17, 7, 75, 6, 7, 8, 26, 25, 29, 24, 4, 20, 7, 22, 28, 4, 19, 29, 11, 25, 25, 20, 27, 27, 25, 6, 6, 8, 28, 21, 6, 13, 12, 4, 33, 4, 40, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [3, 4, 17, 20, 22, 19, 36, 19, 23, 23, 37, 3, 27, 27, 28, 18, 4, 27, 27, 28, 23, 4, 7, 27, 35, 27, 30, 185, 283, 28, 15, 18, 19, 28, 28, 24, 23, 18, 19, 27, 15, 5, 19, 18, 24, 6, 12, 25, 18, 19, 21, 18, 18, 24, 4, 19, 4, 6, 4, 17, 4, 18, 10, 4, 15, 8, 25, 5, 16, 14, 17, 10, 12, 5, 19, 4, 27, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [22, 3, 19, 22, 15, 17, 29, 25, 22, 35, 9, 17, 38, 27, 40, 22, 25, 25, 16, 37, 27, 22, 25, 25, 16, 33, 23, 30, 16, 25, 25, 36, 12, 37, 25, 20, 17, 21, 21, 25, 25, 19, 21, 21, 24, 29, 25, 25, 4, 8, 16, 33, 24, 15, 7, 7, 30, 49, 19, 19, 22, 24, 24, 38, 18, 19, 25, 25, 24, 24, 26, 6, 23, 26, 15, 25, 17, 25, 19, 30, 18, 15, 38, 23, 34, 6, 19, 17, 53, 31, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [39, 61, 4, 20, 16, 22, 22, 28, 23, 31, 23, 22, 21, 93, 8, 19, 23, 9, 21, 19, 4, 10, 24, 23, 33, 22, 20, 23, 20, 13, 19, 28, 21, 15, 20, 30, 18, 18, 20, 11, 19, 19, 19, 5, 4, 13, 4, 4, 5, 4, 10, 25, 4, 22, 4, 29, 12, 25, 19, 4, 5, 11, 4, 7, 10, 15, 16, 7, 28, 15, 5, 4, 20, 6, 9, 21, 7, 9, 7, 13, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [52, 6, 5, 4, 7, 23, 7, 16, 42, 6, 24, 18, 6, 7, 31, 32, 32, 6, 20, 31, 31, 46, 31, 32, 6, 7, 31, 31, 38, 35, 20, 23, 31, 31, 21, 21, 31, 32, 20, 25, 21, 30, 21, 21, 21, 5, 6, 8, 5, 6, 5, 8, 18, 6, 6, 17, 8, 5, 26, 7, 8, 6, 11, 5, 24, 8, 26, 26, 7, 5, 17, 20, 6, 7, 6, 7, 7, 10, 5, 5, 6, 6, 7, 12, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [14, 25, 35, 3, 20, 22, 15, 17, 33, 21, 10, 19, 19, 17, 19, 44, 25, 49, 47, 19, 18, 29, 22, 42, 47, 19, 23, 22, 25, 24, 49, 42, 17, 20, 20, 22, 18, 34, 41, 75, 42, 48, 21, 30, 30, 24, 17, 33, 30, 4, 20, 52, 21, 35, 9, 19, 6, 45, 17, 20, 33, 31, 25, 3, 32, 4, 19, 17, 31, 20, 4, 19, 22, 37, 30, 20, 50, 19, 15, 22, 20, 33, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [8, 10, 12, 8, 20, 35, 28, 38, 13, 32, 17, 17, 32, 35, 37, 26, 35, 29, 35, 35, 35, 27, 32, 41, 38, 35, 36, 26, 27, 15, 45, 39, 8, 8, 36, 35, 27, 25, 8, 8, 36, 35, 161, 19, 33, 45, 10, 14, 7, 8, 9, 10, 9, 14, 27, 28, 11, 24, 32, 9, 13, 35, 11, 8, 15, 20, 18, 29, 112, 13, 12, 8, 12, 38, 36, 7, 33, 10, 11, 11, 40, 38, 44, 31, 55]
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982461 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [26, 19, 4, 28, 4, 26, 40, 32, 30, 248, 40, 4, 25, 26, 34, 5, 18, 25, 24, 25, 24, 34, 29, 29, 24, 24, 24, 24, 35, 22, 18, 26, 24, 18, 57, 24, 146, 20, 11, 18, 44, 24, 18, 17, 20, 19, 24, 4, 49, 5, 4, 5, 30, 23, 4, 26, 18, 8, 28, 36, 15, 24, 23, 24, 5, 22, 40, 23, 40, 40, 45, 11, 41, 25, 17, 40, 18, 39, 9, 39, 24, 27, 16, 25, 4, 26, 4, 18, 4, 19, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [27, 41, 37, 41, 15, 20, 21, 16, 13, 12, 46, 20, 16, 15, 34, 30, 13, 14, 41, 34, 34, 34, 31, 14, 12, 16, 31, 33, 33, 38, 14, 12, 32, 31, 33, 31, 22, 31, 30, 13, 26, 30, 30, 62, 31, 30, 30, 13, 35, 16, 34, 21, 18, 36, 50, 23, 32, 21, 15, 14, 18, 15, 15, 25, 15, 24, 25, 16, 28, 17, 13, 41, 18, 19, 26, 14, 18, 15, 91, 18, 17, 18, 16, 34, 36, 47, 17, 42, 15, 15, 18, 16, 13, 34, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [24, 19, 24, 36, 22, 36, 22, 42, 29, 32, 29, 27, 39, 33, 40, 41, 37, 19, 22, 40, 40, 40, 38, 29, 29, 40, 40, 37, 15, 21, 40, 40, 18, 20, 37, 16, 11, 18, 18, 18, 18, 18, 22, 31, 27, 18, 20, 19, 30, 30, 15, 22, 27, 26, 36, 40, 63, 27, 36, 29, 25, 32, 39, 26, 16, 16, 24, 11, 27, 30, 31, 17, 16, 23, 16, 42, 33, 56, 31, 27, 26, 25, 29, 20, 30, 37, 14, 25]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [40, 9, 17, 21, 24, 19, 20, 15, 42, 17, 18, 23, 21, 19, 17, 18, 18, 48, 24, 12, 10, 17, 17, 33, 29, 23, 15, 16, 17, 20, 10, 9, 27, 30, 33, 24, 21, 9, 15, 17, 9, 9, 9, 13, 14, 16, 22, 18, 18, 16, 9, 21, 16, 12, 18, 10, 24, 36, 23, 25, 25, 12, 20, 30, 6, 12, 21, 9, 24, 29, 27, 21, 19, 10, 22, 21, 17, 20, 27, 13, 15, 13, 7, 8, 24, 12, 19, 19, 17, 15, 20, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [26, 26, 38, 21, 26, 22, 14, 27, 18, 17, 17, 18, 20, 22, 17, 17, 24, 19, 17, 17, 18, 13, 17, 17, 14, 16, 17, 17, 18, 22, 15, 15, 17, 22, 21, 17, 17, 17, 22, 45, 19, 17, 23, 4, 24, 18, 31, 5, 17, 25, 18, 16, 18, 17, 23, 32, 19, 18, 30, 18, 16, 28, 20, 30, 33, 18, 16, 18, 28, 28, 23, 19, 27, 23, 19, 19, 21, 30, 19, 22, 21, 17, 13, 29, 21, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [25, 15, 5, 14, 4, 5, 21, 18, 29, 15, 26, 6, 4, 4, 25, 8, 4, 19, 25, 10, 13, 9, 5, 5, 6, 11, 25, 9, 3, 16, 25, 21, 13, 26, 13, 12, 26, 4, 6, 19, 12, 3, 15, 16, 18, 4, 5, 20, 17, 13, 15, 13, 4, 5, 4, 4, 4, 29, 4, 4, 28, 30, 13, 13, 5, 17, 13, 13, 4, 13, 12, 18, 13, 9, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [55, 7, 12, 3, 26, 222, 16, 13, 20, 13, 16, 31, 29, 7, 14, 26, 33, 17, 32, 31, 7, 26, 28, 26, 16, 42, 35, 24, 31, 28, 28, 19, 20, 26, 32, 31, 33, 24, 17, 26, 27, 101, 17, 17, 13, 8, 12, 7, 13, 8, 6, 13, 16, 8, 7, 8, 21, 7, 18, 7, 10, 7, 18, 34, 13, 6, 22, 17, 21, 15, 29, 26, 18, 18, 7, 13, 18, 13, 13, 26, 10, 5, 17, 18, 7, 7, 5, 13, 19, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [37, 18, 13, 4, 13, 40, 17, 16, 27, 17, 19, 16, 36, 14, 17, 17, 18, 16, 12, 17, 17, 18, 18, 23, 20, 19, 17, 17, 18, 15, 15, 17, 24, 21, 21, 17, 18, 15, 22, 21, 21, 17, 18, 21, 20, 13, 18, 15, 13, 13, 6, 14, 14, 24, 21, 13, 25, 19, 16, 19, 14, 13, 24, 13, 27, 28, 20, 17, 21, 26, 16, 13, 13, 12, 5, 27, 13, 18, 13, 15, 31, 13, 16, 14, 19, 16, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [17, 15, 12, 5, 22, 35, 11, 12, 12, 44, 37, 37, 22, 12, 11, 47, 37, 38, 13, 3, 37, 37, 37, 22, 11, 12, 37, 37, 10, 10, 12, 13, 10, 10, 38, 167, 10, 10, 31, 17, 3, 12, 15, 14, 11, 15, 12, 15, 102, 17, 12, 12, 11, 12, 12, 11, 12, 19, 25, 11, 16, 13, 12, 11, 10, 19, 11, 12, 19, 17, 10, 11, 13, 11, 11, 85, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [16, 14, 15, 10, 12, 5, 8, 8, 20, 13, 8, 26, 27, 8, 7, 5, 26, 36, 35, 2, 26, 26, 27, 26, 33, 26, 26, 4, 8, 32, 35, 26, 21, 205, 23, 21, 20, 4, 6, 5, 10, 19, 7, 6, 6, 73, 6, 8, 7, 4, 6, 8, 7, 7, 9, 7, 8, 23, 17, 7, 16, 9, 8, 7, 5, 6, 7, 7, 6, 7, 7, 7, 5, 61, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [26, 34, 27, 30, 26, 29, 32, 30, 27, 24, 24, 47, 31, 6, 162, 24, 24, 24, 25, 28, 51, 24, 24, 25, 24, 32, 24, 24, 6, 16, 31, 16, 16, 17, 16, 22, 151, 31, 33, 28, 27, 7, 29, 40, 29, 25, 9, 26, 30, 26, 33, 24, 29, 29, 8, 31, 27, 42, 29, 32, 27, 28, 33, 33, 27, 42, 38, 30, 29, 26, 39, 32, 20, 30, 36, 32]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [9, 4, 9, 6, 8, 4, 12, 15, 18, 7, 18, 7, 15, 8, 6, 9, 8, 9, 17, 9, 17, 4, 8, 8, 9, 7, 8, 4, 8, 9, 14, 16, 19, 8, 6, 3, 125, 183, 18, 10, 14, 5, 11, 10, 4, 8, 19, 25, 9, 10, 19, 7, 9, 21, 222, 229, 21, 8, 9, 9, 5, 5, 19, 7, 17, 11, 4, 18, 10, 9, 9, 10, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [3, 8, 8, 8, 8, 8, 8, 5, 11, 9, 9, 10, 5, 8, 11, 221, 9, 10, 7, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [23, 29, 11, 10, 9, 23, 18, 29, 6, 18, 18, 19, 19, 18, 7, 18, 19, 21, 19, 12, 7, 19, 22, 19, 41, 15, 18, 19, 17, 17, 20, 19, 19, 19, 17, 17, 19, 18, 19, 17, 17, 26, 8, 21, 104, 9, 9, 10, 20, 173, 29, 110, 23, 20, 13, 7, 6, 5, 9, 6, 6, 21, 8, 23, 6, 21, 5, 22, 20, 20, 82, 21, 25, 7, 7, 19, 8, 82, 20, 19, 8, 27, 17, 23, 17, 12, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [4, 32, 7, 10, 9, 15, 18, 16, 10, 8, 28, 10, 16, 16, 21, 8, 5, 16, 16, 17, 18, 21, 21, 21, 39, 16, 24, 21, 21, 16, 9, 19, 16, 24, 16, 25, 16, 6, 16, 16, 16, 18, 19, 16, 17, 10, 7, 7, 11, 7, 11, 8, 13, 184, 4, 11, 8, 9, 22, 10, 10, 10, 9, 7, 9, 10, 15, 7, 23, 71, 12, 8, 9, 8, 17, 12, 7, 9, 12, 11, 6, 16, 7, 13, 15, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 8, 8, 6, 4, 8, 9, 6, 4, 3, 9, 6, 7, 9, 6, 5, 5, 12, 9, 20, 8, 5, 10, 11, 4, 9, 4, 8, 5, 10, 5, 6, 166, 3, 7, 7, 8, 9, 8, 7, 6, 9, 8, 5, 8, 11, 8, 6, 5, 10, 7, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [10, 14, 6, 16, 6, 5, 5, 4, 6, 9, 14, 15, 16, 56, 4, 15, 5, 6, 4, 5, 5, 5, 3, 21, 8, 7, 15, 5, 8, 6, 16, 5, 15, 3, 8, 6, 8, 25, 53, 6, 5, 13, 4, 16, 17, 6, 4, 4, 9, 6, 8, 53, 5, 189, 16, 23, 16, 7, 15, 7, 5, 7, 8, 15, 6, 17, 6, 4, 8, 14, 7, 17, 17, 7, 15, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 56, 48, 15, 10, 4, 44, 44, 46, 16, 13, 46, 44, 44, 43, 45, 44, 44, 44, 144, 46, 44, 44, 25, 46, 44, 46, 8, 6, 9, 9, 46, 7, 5, 4, 5, 8, 8, 11, 8, 8, 9, 33, 15, 6, 6, 8, 11, 13, 11, 9, 9, 10, 5, 5, 7, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 5, 6, 8, 7, 10, 8, 3, 4, 6, 24, 9, 12, 9, 5, 9, 29, 8, 5, 25, 9, 4, 52, 10, 6, 19, 11, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [11, 6, 5, 6, 4, 5, 6, 5, 5, 5, 10, 6, 5, 9, 7, 4, 10, 5, 6, 5, 5, 5, 7, 4, 7, 88, 8, 7, 12, 6, 8, 9, 69, 6, 9, 6, 19, 7, 5, 9, 6, 15, 6, 10, 5, 4, 12, 8, 13, 8, 9, 5, 8, 9, 5, 6, 6, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [32, 6, 13, 7, 20, 6, 35, 22, 12, 15, 22, 4, 26, 26, 25, 15, 70, 57, 15, 29, 33, 26, 26, 22, 27, 26, 26, 31, 30, 29, 37, 14, 23, 30, 27, 34, 32, 30, 13, 28, 27, 5, 27, 7, 9, 7, 11, 9, 15, 15, 9, 12, 28, 14, 26, 20, 21, 31, 27, 71, 16, 32, 13, 14, 26, 24, 29, 10, 14, 10, 13, 31, 7, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [4, 8, 7, 6, 4, 5, 7, 5, 5, 8, 118, 7, 6, 5, 9, 7, 6, 13, 5, 6, 10, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [23, 23, 4, 10, 11, 13, 43, 38, 24, 20, 31, 10, 11, 20, 20, 22, 19, 33, 20, 20, 10, 20, 20, 22, 7, 31, 20, 20, 9, 9, 19, 6, 38, 9, 9, 48, 23, 9, 9, 22, 13, 10, 10, 10, 20, 9, 22, 10, 16, 19, 10, 10, 11, 22, 10, 28, 10, 9, 21, 16, 10, 10, 21, 53, 21, 23, 9, 10, 10, 10, 10, 22, 20, 10, 22, 21]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [21, 20, 19, 28, 39, 218, 6, 33, 23, 29, 35, 35, 20, 20, 30, 30, 35, 33, 19, 27, 7, 35, 34, 30, 30, 19, 27, 33, 33, 30, 18, 18, 35, 8, 19, 24, 18, 36, 18, 18, 18, 30, 31, 35, 32, 19, 29, 18, 29, 18, 25, 21, 29, 25, 82, 31, 28, 20, 19, 19, 6, 27, 33, 36, 20, 7, 29, 22, 22, 26, 26, 36, 31, 8, 60, 28, 27, 35, 22, 27, 35, 32, 36, 11, 32, 10, 19, 21, 7, 34, 19]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [28, 5, 20, 20, 7, 21, 20, 18, 5, 16, 23, 24, 16, 3, 23, 15, 14, 22, 4, 27, 20, 28, 14, 26, 20, 4, 15, 15, 15, 14, 23, 27, 20, 15, 15, 21, 19, 15, 23, 23, 25, 205, 18, 15, 15, 18, 20, 17, 19, 63, 20, 6, 18, 17, 8, 18, 23, 20, 19, 26, 20, 22, 16, 31, 27, 5, 15, 17, 23, 20, 18, 20, 20, 20, 6, 25, 20, 22, 29, 6, 20, 25, 17, 11, 31, 16, 16, 20, 19]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [9, 7, 9, 24, 8, 17, 20, 10, 23, 12, 24, 28, 8, 9, 27, 19, 24, 17, 11, 20, 13, 19, 11, 24, 13, 26, 17, 19, 16, 9, 23, 21, 12, 19, 14, 9, 23, 14, 20, 20, 20, 12, 15, 10, 21, 19, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [29, 23, 14, 14, 17, 43, 16, 18, 16, 29, 16, 17, 12, 12, 12, 17, 16, 13, 12, 12, 17, 19, 12, 12, 12, 18, 12, 13, 16, 14, 14, 14, 14, 13, 14, 14, 40, 12, 14, 64, 14, 16, 21, 15, 17, 16, 14, 13, 16, 17, 17, 13, 21, 16, 16, 32, 17, 13, 16, 18, 19, 16, 17, 14, 15, 14, 22, 15, 15, 15, 22, 11, 19, 16, 16, 29, 14, 15, 16, 16, 16, 19, 13, 16, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [10, 22, 12, 17, 18, 28, 17, 9, 14, 17, 18, 4, 14, 14, 9, 48, 14, 14, 13, 16, 9, 14, 18, 14, 12, 17, 14, 14, 14, 14, 15, 14, 17, 19, 19, 14, 30, 14, 14, 14, 18, 7, 9, 47, 4, 18, 13, 15, 11, 18, 39, 8, 18, 7, 18, 19, 6, 14, 24, 22, 24, 24, 24, 24, 8, 18, 18, 26, 19, 14, 16, 17, 14, 17, 15, 19, 4, 24, 13, 14, 17, 4, 15, 22, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [11, 15, 4, 6, 14, 6, 51, 46, 48, 5, 5, 10, 6, 57, 44, 44, 4, 44, 44, 56, 5, 9, 55, 44, 44, 10, 6, 44, 44, 12, 13, 45, 11, 15, 14, 5, 5, 5, 5, 14, 6, 5, 6, 15, 7, 6, 7, 9, 6, 6, 14, 4, 22, 5, 7, 14, 12, 5, 10, 12, 10, 8, 8, 4, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [4, 15, 15, 14, 15, 17, 9, 15, 21, 16, 15, 32, 16, 27, 18, 21, 14, 16, 19, 18, 7, 18, 20, 7, 17, 18, 18, 16, 24, 16, 16, 16, 16, 11, 14, 8, 17, 20, 6, 16, 16, 5, 14, 15, 18, 7, 15, 16, 7, 14, 17, 7, 16, 11, 16, 15, 16, 17, 13, 30, 15, 19, 15, 17, 13, 21, 39, 15, 8, 15, 32, 20, 15, 10, 16, 7, 15, 16, 17, 18, 23, 14, 17, 8, 15, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [9, 24, 18, 30, 24, 21, 22, 12, 16, 17, 20, 22, 22, 20, 7, 22, 22, 21, 20, 22, 20, 19, 20, 20, 22, 19, 20, 20, 23, 16, 20, 20, 17, 17, 22, 21, 60, 19, 16, 16, 16, 22, 22, 18, 17, 17, 43, 7, 28, 25, 21, 9, 25, 21, 9, 12, 10, 17, 8, 26, 18, 22, 19, 24, 17, 29, 18, 19, 7, 20, 22, 16, 22, 25, 14, 14, 33, 26, 9, 21, 6, 9, 21, 22, 8, 18, 29, 16, 25, 33]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [12, 4, 15, 6, 17, 16, 17, 7, 16, 16, 19, 15, 12, 18, 14, 12, 3, 31, 7, 14, 13, 17, 12, 15, 19, 16, 14, 18, 19, 19, 14, 11, 12, 17, 18, 14, 16, 15, 17, 13, 8, 12, 14, 15, 16, 13, 18, 17, 11, 16, 13, 10, 14, 16, 13, 16, 14, 12, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [12, 15, 32, 31, 34, 28, 22, 15, 20, 25, 28, 27, 25, 19, 24, 27, 15, 16, 37, 30, 25, 13, 13, 30, 17, 26, 26, 20, 8, 26, 22, 15, 32, 14, 26, 19, 17, 27, 26, 13, 14, 14, 26, 19, 22, 13, 29, 23, 30, 19, 12, 29, 18, 25, 151, 28, 17, 26, 9, 25, 15, 25, 17, 16, 23, 17, 28, 30, 19, 27, 16, 27, 26, 28, 28, 22, 22, 22, 24, 19, 27, 23, 17, 19, 23, 27, 22, 14, 22, 19, 10, 24, 20, 18, 15, 30, 26, 18, 14, 29, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [25, 11, 8, 6, 5, 4, 5, 19, 7, 6, 25, 15, 5, 5, 15, 13, 4, 7, 12, 4, 166, 14, 15, 9, 18, 25, 15, 39, 6, 19, 13, 15, 23, 5, 15, 141, 8, 8, 6, 36, 22, 7, 4, 5, 19, 4, 6, 3, 4, 10, 12, 5, 4, 6, 5, 5, 5, 6, 4, 6, 74, 7, 7, 7, 21, 7, 4, 5, 21, 6, 8, 5, 4, 35, 33, 115, 6, 6, 9, 4, 5, 5, 7, 16, 4, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [6, 8, 19, 17, 16, 15, 157, 24, 6, 4, 28, 33, 15, 17, 17, 23, 17, 19, 22, 30, 17, 17, 16, 17, 17, 17, 10, 17, 17, 15, 18, 17, 17, 113, 20, 22, 18, 17, 18, 17, 18, 19, 21, 5, 28, 21, 19, 8, 8, 16, 6, 11, 17, 24, 12, 24, 12, 17, 6, 10, 22, 18, 19, 9, 19, 32, 10, 11, 21, 10, 17, 9, 11, 11, 42, 16, 14, 13, 14, 19, 25, 13, 20, 6, 15, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [30, 6, 6, 17, 5, 5, 5, 6, 6, 9, 5, 14, 19, 7, 4, 6, 6, 12, 29, 5, 9, 10, 6, 5, 26, 6, 6, 9, 20, 6, 7, 8, 7, 12, 4, 7, 5, 8, 6, 5, 13, 3, 5, 5, 11, 12, 4, 5, 6, 11, 8, 6, 9, 5, 5, 6, 11, 7, 12, 6, 8, 20, 22, 10, 5, 8, 14, 9, 8, 5, 4, 7, 11, 8, 9, 9, 5, 25, 8, 6, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [26, 22, 14, 18, 20, 51, 18, 16, 23, 23, 17, 16, 15, 22, 13, 15, 17, 21, 19, 18, 15, 15, 18, 29, 24, 15, 15, 13, 15, 17, 15, 13, 15, 15, 19, 17, 13, 15, 16, 16, 15, 18, 20, 17, 28, 29, 18, 31, 25, 19, 19, 23, 28, 24, 25, 27, 76, 21, 30, 20, 26, 16, 18, 17, 23, 20, 19, 147, 18, 19, 24, 20, 23, 24, 17, 23, 24, 27, 15, 30, 24, 19, 20, 16, 19, 25, 17, 15, 18, 18, 24, 23, 31, 29, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [7, 19, 9, 12, 7, 10, 10, 11, 12, 11, 17, 11, 11, 9, 8, 7, 90, 15, 82, 4, 14, 10, 11, 17, 8, 12, 10, 5, 16, 21, 8, 30, 15, 8, 18, 8, 11, 7, 7, 8, 23, 70, 12, 26, 18, 12, 50, 22, 9, 9, 16, 19, 13, 14, 21, 14, 70, 75, 8, 15, 10, 12, 13, 11, 12, 9, 17, 7, 7, 7, 7, 7, 14, 9, 16, 19, 12, 12, 8, 16, 8, 9, 15, 113, 8, 16, 20, 10, 12, 18, 20, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [12, 16, 18, 20, 10, 15, 14, 13, 18, 16, 16, 19, 16, 16, 25, 11, 16, 17, 21, 15, 20, 17, 20, 19, 16, 19, 23, 18, 10, 9, 23, 12, 22, 17, 9, 19, 21, 16, 15, 18, 26, 8, 18, 13, 9, 16, 22, 18, 18, 9, 20, 19, 16, 15, 12, 19, 9, 17, 10, 16, 16, 9, 17, 22, 18, 14, 21, 15, 14, 9, 16, 23, 8, 10, 10, 14, 21, 19, 17, 11, 19, 17, 8, 20, 20, 10, 28, 17, 10, 3, 20, 15, 21, 20, 165, 20, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [24, 14, 10, 13, 10, 12, 14, 8, 21, 12, 11, 9, 15, 56, 15, 8, 7, 15, 18, 30, 15, 13, 14, 15, 15, 16, 15, 16, 11, 15, 15, 21, 22, 15, 14, 21, 21, 14, 18, 21, 21, 9, 14, 9, 27, 27, 23, 14, 7, 9, 8, 9, 16, 8, 16, 7, 9, 13, 14, 6, 6, 9, 8, 12, 7, 9, 12, 21, 6, 8, 13, 8, 24, 8, 13, 6, 9, 23, 4, 11, 26, 8, 18, 7, 13, 6, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [51, 13, 11, 13, 14, 51, 80, 13, 21, 16, 15, 15, 9, 42, 11, 15, 10, 12, 42, 10, 42, 14, 13, 10, 6, 42, 42, 12, 42, 11, 42, 56, 42, 42, 14, 53, 8, 41, 41, 42, 42, 52, 10, 11, 6, 11, 8, 15, 8, 9, 9, 12, 16, 13, 11, 10, 12, 8, 7, 14, 12, 66, 13, 8, 16, 12, 9, 15, 11, 12, 13, 18, 22, 9, 6, 10, 12, 45, 90, 17, 11, 14, 11, 8, 15, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [39, 4, 26, 34, 26, 25, 74, 21, 18, 21, 18, 26, 24, 61, 17, 16, 16, 23, 25, 16, 16, 16, 16, 24, 22, 28, 16, 16, 34, 51, 18, 22, 26, 24, 27, 22, 20, 23, 22, 12, 21, 30, 24, 27, 23, 57, 27, 63, 18, 22, 18, 23, 5, 24, 5, 16, 15, 16, 28, 18, 16, 19, 15, 23, 15, 11, 19, 19, 25, 34, 24, 24, 19, 21, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [36, 24, 13, 21, 23, 23, 35, 3, 18, 4, 19, 19, 38, 20, 20, 22, 21, 25, 25, 17, 31, 14, 19, 19, 20, 35, 20, 21, 20, 17, 17, 19, 16, 16, 21, 20, 22, 19, 16, 19, 15, 16, 16, 19, 21, 17, 19, 20, 24, 24, 28, 22, 21, 20, 19, 24, 22, 20, 20, 22, 22, 34, 22, 19, 26, 20, 22, 10, 30, 26, 20, 17, 31, 19, 24, 17, 23, 25, 24, 18, 8, 18, 19, 19, 19, 18, 22, 21, 17, 22]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [16, 4, 11, 13, 18, 137, 5, 17, 7, 14, 21, 11, 22, 7, 7, 208, 20, 8, 16, 16, 19, 27, 13, 5, 18, 8, 12, 20, 135, 27, 17, 13, 8, 9, 5, 8, 8, 8, 23, 43, 18, 7, 6, 12, 6, 22, 16, 11, 17, 6, 19, 17, 18, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [7, 13, 10, 8, 14, 15, 13, 12, 21, 16, 18, 16, 14, 16, 10, 10, 8, 14, 14, 14, 14, 19, 15, 13, 14, 12, 25, 4, 22, 13, 15, 16, 17, 18, 18, 16, 22, 14, 18, 15, 5, 8, 13, 18, 14, 14, 19, 27, 19, 14, 18, 11, 21, 8, 26, 13, 17, 23, 7, 18, 6, 15, 14, 18, 13, 10, 17, 10, 11, 14, 12, 16, 16, 14, 15, 8, 9, 14, 16, 17, 13, 13, 11, 13, 12, 10, 12, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [6, 23, 20, 8, 20, 7, 20, 10, 9, 17, 20, 17, 8, 18, 19, 21, 19, 8, 15, 8, 15, 7, 22, 6, 18, 14, 19, 28, 19, 16, 21, 13, 14, 14, 14, 6, 28, 16, 15, 17, 14, 14, 15, 17, 15, 15, 7, 199, 19, 5, 20, 13, 16, 17, 15, 7, 6, 22, 15, 16, 14, 18, 19, 19, 153, 20, 15, 19, 15, 14, 12, 12, 17, 20, 10, 15, 14, 16, 14, 18, 18, 14, 28, 16, 17, 20, 15, 5, 7, 19, 19, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [14, 9, 24, 7, 8, 8, 21, 8, 9, 8, 10, 8, 8, 12, 6, 10, 9, 10, 7, 8, 8, 10, 7, 20, 10, 8, 21, 21, 25, 11, 12, 6, 14, 19, 12, 9, 6, 10, 8, 10, 14, 25, 10, 4, 8, 12, 8, 9, 6, 18, 8, 26, 9, 25, 25, 10, 17, 15, 11, 21, 11, 21, 8, 23, 12, 12, 10, 24, 8, 8, 8, 8, 20, 52, 13, 9, 24, 22, 9, 8, 23, 8, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [6, 6, 11, 10, 12, 16, 8, 17, 7, 11, 3, 9, 10, 10, 8, 8, 19, 11, 10, 9, 11, 22, 14, 14, 8, 10, 19, 15, 9, 6, 16, 23, 12, 12, 9, 10, 11, 6, 14, 10, 73, 19, 11, 13, 21, 5, 10, 9, 9, 14, 12, 14, 7, 9, 46, 6, 11, 8, 6, 9, 7, 11, 6, 17, 13, 12, 13, 7, 13, 9, 7, 12, 6, 10, 16, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [4, 10, 18, 13, 20, 20, 17, 14, 8, 15, 13, 4, 16, 14, 30, 11, 10, 10, 6, 12, 28, 7, 4, 9, 9, 20, 12, 23, 10, 17, 21, 20, 23, 4, 24, 13, 18, 22, 15, 17, 20, 20, 4, 14, 6, 15, 13, 18, 11, 17, 10, 16, 12, 12, 16, 59, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [8, 14, 24, 15, 17, 18, 14, 25, 14, 13, 15, 19, 13, 15, 13, 13, 17, 9, 13, 13, 13, 13, 15, 13, 14, 13, 13, 13, 13, 15, 13, 9, 13, 13, 14, 13, 14, 18, 4, 28, 13, 9, 14, 37, 133, 24, 16, 14, 16, 24, 28, 14, 10, 10, 6, 15, 14, 14, 24, 10, 10, 18, 19, 11, 18, 19, 16, 15, 120]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [7, 4, 18, 3, 3, 14, 33, 21, 4, 20, 3, 16, 4, 16, 7, 3, 3, 23, 17, 6, 17, 4, 22, 16, 7, 6, 6, 17, 7, 20, 5, 8, 18, 16, 5, 6, 6, 15, 4, 5, 15, 6, 19, 12, 5, 24, 14, 5, 16, 19, 16, 6, 13, 8, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [6, 4, 13, 15, 14, 52, 19, 38, 15, 14, 35, 26, 25, 28, 29, 13, 24, 27, 24, 29, 6, 25, 25, 26, 27, 18, 34, 26, 12, 29, 25, 12, 12, 96, 34, 36, 15, 11, 11, 27, 13, 11, 12, 12, 27, 13, 10, 17, 7, 13, 21, 12, 14, 17, 13, 13, 12, 16, 17, 14, 17, 13, 18, 13, 13, 24, 6, 28, 17, 21, 16, 18, 12, 18, 15, 17, 20, 17, 25, 12, 18, 24, 24, 15, 7, 18, 26, 20, 14, 14]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [20, 10, 4, 23, 30, 221, 22, 11, 3, 12, 11, 19, 28, 11, 11, 12, 12, 19, 5, 18, 12, 12, 13, 19, 11, 11, 4, 73, 11, 141, 20, 4, 18, 4, 12, 11, 4, 14, 4, 3, 7, 143, 26, 7, 9, 5, 6, 4, 5, 5, 6, 4, 41, 16, 15, 7, 19, 16, 7, 16, 17, 10, 15, 13, 11, 7, 5, 19, 7, 8, 5, 5, 4, 30]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [9, 28, 30, 27, 28, 27, 29, 28, 22, 40, 39, 50, 27, 25, 25, 23, 27, 24, 26, 124, 26, 28, 26, 25, 26, 25, 24, 25, 26, 27, 26, 26, 25, 26, 25, 61, 26, 25, 25, 25, 24, 26, 25, 27, 28, 27, 28, 28, 31, 29, 10, 26, 32, 49, 37, 28, 30, 28, 26, 33, 26, 35, 29, 27, 28, 28, 20, 20, 26, 22, 21, 24, 25, 21, 91, 23, 22, 28, 28, 46, 191, 34, 26, 27, 22, 44, 26]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 4, 7, 12, 8, 4, 6, 8, 8, 13, 12, 11, 9, 5, 29, 6, 5, 8, 10, 7, 18, 8, 73, 5, 6, 5, 5, 5, 20, 6, 7, 17, 5, 8, 6, 4, 12, 9, 7, 205, 8, 6, 16, 10, 11, 7, 10, 7, 9, 12, 27, 13, 7, 13, 25, 12, 11, 8, 5, 6, 13, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [7, 18, 30, 21, 6, 7, 17, 12, 17, 18, 24, 12, 17, 5, 8, 21, 6, 18, 20, 6, 17, 19, 19, 10, 9, 7, 15, 68, 18, 19, 6, 17, 24, 17, 19, 8, 18, 6, 35, 18, 45, 9, 8, 17, 18, 16, 57, 9, 18, 10, 8, 8, 9, 6, 19, 8, 16, 12, 16, 17, 12, 6, 8, 28, 8, 19, 19, 58, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [4, 7, 10, 5, 4, 6, 4, 6, 8, 6, 6, 6, 15, 19, 7, 6, 11, 7, 10, 6, 7, 11, 6, 8, 16, 5, 6, 4, 18, 7, 12, 9, 12, 10, 12, 8, 6, 31, 73, 8, 4, 11, 6, 6, 6, 6, 12, 11, 19, 6, 13, 14, 28, 8, 6, 6, 7, 11, 12, 11, 12, 7, 7, 8, 7, 11, 7, 14, 6, 10, 16]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [12, 9, 6, 12, 14, 35, 7, 28, 5, 14, 28, 39, 12, 6, 23, 18, 8, 28, 30, 6, 5, 18, 16, 26, 26, 31, 15, 26, 16, 16, 8, 17, 4, 10, 7, 5, 7, 9, 12, 9, 7, 20, 6, 7, 5, 9, 8, 98, 8, 8, 8, 10, 6, 11]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 8, 21, 9, 20, 15, 19, 9, 14, 7, 6, 16, 17, 7, 4, 10, 7, 16, 6, 6, 4, 22, 20, 16, 6, 22, 6, 20, 14, 21, 6, 15, 15, 20, 7, 5, 24, 7, 21, 5, 11, 5, 5, 5, 6, 17, 6, 12, 7, 19, 16, 6, 17, 12, 15, 18, 6, 29, 19, 10, 16, 28, 7, 24, 5, 6, 13, 21, 6, 6, 5, 23]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [24, 9, 7, 32, 14, 26, 15, 12, 9, 17, 14, 18, 16, 23, 23, 18, 17, 22, 22, 156, 27, 18, 24, 28, 20, 20, 12, 14, 11, 11, 20, 22, 28, 8, 16, 13, 43, 21, 17, 9, 25, 22, 14, 10, 13, 10, 10, 10, 11, 7, 12, 43, 35, 17, 11, 18, 28, 11, 11, 28, 22, 27, 18, 13, 12, 28, 14, 11, 14, 25, 15, 14, 52, 17, 7, 14, 28, 14, 9, 20, 28, 27, 54, 12, 11, 14, 13, 29, 25, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [4, 19, 11, 5, 19, 18, 17, 4, 27, 21, 9, 21, 8, 27, 19, 7, 22, 18, 13, 20, 17, 11, 21, 28, 18, 12, 19, 26, 19, 18, 24, 7, 27, 15, 25, 30, 12, 10, 19, 19, 26, 20, 35, 23, 20, 11, 25, 6, 20, 20, 20, 55, 22, 4, 14, 17, 12, 18, 18, 7, 25, 5, 20, 21, 18, 17, 17, 19, 18, 19, 19, 17, 19, 23, 17, 15, 14, 19, 12, 18, 12, 21, 16, 18, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [5, 11, 7, 17, 7, 7, 13, 11, 7, 6, 6, 8, 12, 8, 21, 10, 10, 6, 12, 40, 14, 11, 11, 10, 16, 7, 14, 11, 21, 9, 11, 6, 7, 7, 11, 7, 13, 7, 11, 10, 6, 13, 18, 8, 18, 9, 9, 9, 6, 7, 11, 7, 10, 11, 11, 13, 12, 10, 13, 6, 9, 10, 12, 10, 10, 10, 14, 7, 10, 12, 15, 9, 8, 11, 7, 8, 9, 11, 9, 8, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [8, 7, 7, 4, 10, 9, 12, 39, 10, 13, 15, 14, 10, 6, 11, 12, 13, 11, 4, 6, 6, 4, 8, 14, 12, 10, 11, 13, 23, 12, 10, 12, 12, 11, 10, 19, 11, 4, 11, 6, 12, 6, 4, 6, 7, 7, 6, 15, 11, 6, 8, 6, 5, 6, 6, 10, 5, 19, 16, 13, 9, 70, 6, 6, 4, 11, 70, 13, 14, 17, 5, 13, 14, 16, 7, 6, 6, 46, 6, 11, 6, 5, 6, 7, 5, 7, 13, 11, 9, 16, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [32, 27, 30, 27, 29, 23, 36, 21, 26, 33, 41, 35, 28, 8, 20, 26, 28, 33, 33, 27, 30, 27, 10, 18, 30, 29, 33, 33, 8, 24, 29, 29, 28, 38, 8, 8, 8, 31, 29, 31, 28, 27, 31, 28, 26, 25, 26, 31, 27, 25, 28, 24, 26, 29, 34, 31, 111, 28, 27, 30, 26, 35, 27, 34, 28, 27, 29, 28, 31, 29, 54, 28, 25, 26, 19, 38, 29]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [19, 5, 12, 20, 24, 8, 13, 18, 12, 5, 11, 19, 17, 20, 13, 8, 17, 23, 20, 6, 9, 19, 6, 6, 24, 8, 9, 23, 13, 8, 12, 19, 13, 20, 22, 25, 16, 81, 8, 22, 23, 21, 20, 135, 7, 7, 21, 18, 17, 19, 20, 16, 16, 8, 24, 28, 10, 13, 26, 19]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [13, 5, 7, 4, 15, 17, 7, 4, 9, 17, 13, 12, 14, 16, 16, 14, 12, 4, 11, 14, 11, 11, 12, 9, 12, 14, 12, 4, 5, 13, 14, 6, 9, 14, 6, 5, 8, 7, 13, 6, 11, 22, 8, 97, 5, 26, 9, 5, 8, 11, 14, 14, 9, 12, 20, 7, 6, 12, 6, 18, 16, 5, 22, 7, 15, 10, 5, 9, 11, 12, 10, 15, 17, 12, 11, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [13, 4, 13, 10, 10, 5, 4, 11, 6, 12, 11, 4, 5, 218, 5, 15, 55, 16, 31, 4, 5, 9, 14, 5, 11, 3, 10, 5, 5, 13, 6, 12, 12, 21, 7, 11, 113]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [23, 4, 32, 19, 18, 4, 17, 13, 23, 18, 11, 11, 10, 8, 10, 13, 13, 10, 13, 16, 11, 10, 20, 10, 11, 13, 25, 16, 13, 19, 8, 17, 10, 12, 13, 15, 15, 12, 12, 13, 12, 18, 10, 19, 18, 11, 13, 12, 20, 25, 13, 11, 10, 18, 20, 16, 13, 12, 17, 23, 5, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [12, 7, 40, 7, 9, 6, 10, 10, 7, 7, 7, 67, 8, 10, 7, 5, 6, 11, 7, 9, 17, 6, 8, 13, 23, 12, 13, 5, 12, 10, 9, 12, 5, 7, 15, 13, 15, 9, 10, 8, 11, 6, 10, 28, 7, 10, 10, 11, 7, 8, 6, 21, 7, 12, 9, 7, 16, 7, 7, 7, 7, 7, 13, 10, 7, 7, 102, 11, 13, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [7, 6, 9, 11, 11, 14, 9, 3, 5, 10, 8, 9, 7, 6, 5, 12, 47, 19, 83, 5, 9, 9, 10, 11, 12, 10, 48, 12, 63, 11, 9, 10, 10, 10, 6, 17, 11, 15, 14, 8, 11, 4, 11, 21, 5, 10, 7, 170, 15, 11, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [48, 12, 12, 13, 23, 12, 13, 23, 9, 22, 20, 14, 17, 8, 12, 12, 13, 43, 12, 13, 15, 13, 19, 18, 24, 9, 18, 43, 10, 10, 24, 11, 9, 14, 12, 43, 15, 12, 14, 17, 16, 11, 12, 11, 12, 12, 7, 13, 16, 7, 16, 13, 17, 12, 8, 15, 14, 39, 10, 18, 11, 7, 16, 16, 18, 11, 13, 8, 20, 14, 14, 9, 23, 11, 10, 18, 7, 12, 9, 20, 11, 7, 11, 10, 18, 18, 7, 9, 12, 11, 12]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [10, 10, 10, 19, 11, 7, 17, 13, 9, 6, 13, 6, 13, 89, 13, 6, 11, 12, 15, 14, 6, 8, 21, 16, 10, 16, 10, 11, 11, 14, 8, 11, 14, 12, 11, 15, 11, 10, 6, 11, 9, 16, 9, 13, 16, 12, 15, 13, 7, 10, 5, 20, 15, 7, 8, 6, 136, 6, 14, 8, 6, 8, 8, 6, 24, 8, 8, 9, 7, 9, 11, 11, 12, 6, 8, 10, 8, 62, 6, 15, 16, 11, 8, 8, 11, 6, 12, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [4, 10, 6, 10, 10, 5, 9, 5, 5, 5, 6, 17, 19, 5, 8, 8, 31, 6, 18, 5, 15, 13, 6, 11, 5, 18, 5, 9, 8, 5, 8, 9, 7, 19, 11, 7, 8, 9, 8, 4, 8, 8, 7, 4, 5, 7, 8, 8, 6, 7, 3, 10, 6, 3, 7, 10, 8, 8, 8, 5, 4, 7, 4, 5, 4, 6, 27, 6, 4, 10, 8, 9, 8, 4, 5]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [12, 8, 6, 6, 6, 14, 6, 57, 8, 6, 8, 5, 6, 7, 13, 13, 7, 8, 6, 6, 6, 9, 5, 6, 8, 16, 11, 6, 6, 8, 9, 7, 18, 9, 9, 9, 5, 7, 8, 286, 9, 6, 23, 13, 9, 15, 7, 7, 7, 6, 9, 6, 9, 9, 8, 8, 9, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [3, 6, 6, 6, 7, 6, 7, 4, 18, 6, 8, 6, 7, 6, 5, 5, 5, 6, 7, 6, 8, 7, 7, 6, 5, 7, 6, 5, 6, 6, 7, 8, 22, 7, 6, 76, 13, 6, 8, 12, 11, 6, 6, 10, 54, 19, 6, 5, 5, 7, 9, 7, 6, 6, 11, 26, 19, 6, 6, 6, 33]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [17, 16, 214, 12, 16, 9, 13, 11, 12, 39, 14, 12, 15, 11, 17, 15, 13, 4, 16, 18, 162, 39, 10, 9, 14, 11, 12, 9, 13, 12, 11, 6, 16, 10, 38, 17, 12, 21, 9, 13, 17, 7, 14, 27, 11, 11, 13, 10, 13, 11, 23, 9, 76, 21, 16, 21, 32, 13, 52, 11, 17]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [61, 21, 23, 20, 18, 18, 18, 18, 20, 19, 21, 18, 22, 29, 17, 17, 23, 16, 17, 22, 21, 33, 22, 18, 51, 22, 19, 22, 19, 20, 18, 18, 22, 51, 19, 18, 23, 51, 53, 22, 17, 20, 52, 52, 17, 21, 21, 24, 18, 21, 22, 22, 16, 20, 20, 16, 117, 24, 20, 21, 18, 19, 19, 52, 20, 16, 20, 25, 21, 18, 18, 23, 21, 19, 21, 90, 20, 21, 19, 17, 18, 18, 23, 19, 22, 21, 15, 21, 20, 21, 15]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [9, 9, 7, 7, 20, 11, 8, 9, 8, 9, 9, 8, 10, 8, 8, 8, 9, 9, 8, 9, 8, 8, 9, 9, 8, 8, 9, 8, 8, 8, 8, 8, 8, 10, 10, 10, 9, 11, 18, 13, 8, 12, 10, 7, 12, 11, 8, 9, 8, 11, 9, 7, 8, 7, 9, 7, 22, 9, 9, 10, 7, 70, 8, 9, 12, 9, 10, 9, 9, 10, 8, 7]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [12, 13, 17, 14, 4, 17, 5, 17, 12, 17, 12, 15, 12, 13, 12, 14, 14, 12, 12, 5, 14, 14, 15, 14, 13, 7, 7, 17, 14, 13, 6, 26, 4, 15, 205, 14, 29, 14, 13, 4, 18, 21, 18, 18, 20, 41, 13, 14, 50, 18, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [5, 6, 5, 12, 8, 14, 3, 5, 5, 43, 41, 46, 8, 41, 42, 42, 45, 11, 9, 42, 41, 43, 45, 41, 5, 41, 56, 5, 42, 46, 42, 7, 7, 53, 45, 41, 5, 3, 7, 8, 7, 5, 5, 6, 4, 6, 5, 7, 7, 14, 6, 7, 6, 5, 7, 9, 5, 6, 5, 5, 7, 40, 5, 8, 4, 5, 21, 7, 4, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [53, 6, 8, 43, 6, 33, 7, 6, 49, 73, 11, 5, 45, 48, 48, 47, 7, 52, 48, 7, 8, 48, 46, 48, 54, 46, 46, 41, 41, 47, 7, 61, 56, 41, 41, 41, 43, 8, 10, 7, 48, 6, 6, 20, 8, 8, 8, 8, 6, 67, 67, 6, 62, 68, 67, 6, 68, 7, 67, 7, 9, 12, 9, 7, 45, 117]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [9, 35, 11, 12, 51, 22, 14, 15, 18, 21, 13, 4, 16, 15, 5, 10, 16, 12, 10, 17, 7, 10, 13, 33, 30, 18, 23, 15, 8, 12, 14, 23, 19, 12, 20, 21, 13, 12, 11, 13, 16, 14, 10, 12, 13, 5, 6, 12, 13, 12, 6, 11, 13, 10, 38, 7, 21, 5, 7, 17, 12, 13, 11, 10, 12, 20, 23, 10, 10, 13, 15, 13, 13, 45, 18, 8, 5, 5, 12, 12, 19, 13, 13, 10]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = WARNING: Dual bound 0.982452 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
[4, 5, 4, 4, 10, 4, 6, 40, 8, 4, 6, 15, 8, 29, 18, 13, 4, 15, 30, 15, 4, 15, 4, 9, 44, 25, 4, 4, 94, 21, 8, 42, 20, 5, 16, 19, 8, 35, 17, 5, 20, 4, 7, 5, 11, 21, 5, 4, 8, 9, 7, 15, 13, 11, 11, 12, 4, 4, 20, 11, 11, 5, 11, 5, 9, 120, 9, 29, 12, 8, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [17, 17, 20, 19, 19, 11, 13, 16, 6, 20, 12, 10, 13, 17, 13, 8, 18, 8, 14, 6, 44, 17, 148, 14, 16, 28, 13, 13, 14, 17, 13, 12, 15, 13, 17, 16, 14, 13, 12, 14, 14, 10, 15, 16, 13, 13, 23, 15, 15, 19, 13, 15, 24, 26, 19, 15, 17, 16, 17, 14, 13, 6, 15, 22, 8, 18, 19, 25, 17, 26, 15, 14, 14, 15, 20, 20, 19, 14, 28, 21, 17, 7, 21, 16, 30, 18]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [31, 19, 12, 17, 11, 87, 17, 8, 17, 10, 18, 24, 24, 18, 18, 16, 22, 24, 122, 17, 17, 8, 19, 18, 17, 26, 20, 9, 9, 9, 41, 9, 25, 38, 29, 20, 16, 17, 11, 19, 10, 10, 16, 9, 9, 10, 19, 19, 21, 17, 9, 16, 19, 10, 19, 24, 8, 21, 46, 10, 19, 7, 10, 13, 13, 19, 10, 18, 26, 10, 12, 9, 13, 18, 13, 17, 32, 18, 18, 19, 19, 21, 22, 11, 21, 11, 24, 20]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [13, 10, 4, 21, 4, 16, 6, 17, 10, 16, 8, 32, 31, 28, 20, 29, 24, 29, 17, 24, 14, 13, 18, 16, 24, 19, 27, 22, 13, 19, 12, 24, 19, 18, 27, 23, 23, 20, 19, 24, 19, 22, 18, 29, 29, 24, 28, 27, 10, 7, 21, 25, 22, 18, 21, 25, 14, 15, 13, 20, 24, 26, 27, 18, 22]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [33, 18, 18, 17, 26, 18, 35, 14, 5, 4, 6, 19, 13, 28, 14, 19, 13, 197, 13, 15, 8, 13, 17, 19, 28, 13, 19, 13, 14, 18, 15, 29, 17, 13, 17, 23, 13, 58, 15, 14, 27, 19, 6, 21, 25, 18, 15, 18, 6, 6, 17, 8, 7, 5, 25, 17, 20, 6, 6, 6, 19, 8, 19, 24, 15, 23, 4, 10, 19, 5, 8, 8, 6, 29, 18, 14, 5, 6, 19, 17, 13, 6, 6, 22, 21, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [15, 8, 13, 26, 7, 18, 19, 13, 17, 28, 13, 13, 11, 30, 22, 22, 13, 13, 14, 22, 19, 37, 13, 13, 30, 24, 23, 25, 25, 13, 22, 23, 14, 18, 24, 13, 13, 14, 14, 19, 24, 22, 19, 31, 10, 22, 12, 22, 18, 24, 18, 7, 20, 41, 12, 50, 8, 24, 12, 23, 13, 20, 30, 16, 25, 26, 17, 24, 13, 24, 9, 25, 23, 21, 8, 12, 16, 31, 15, 27, 31, 22, 21, 8, 10, 32, 17, 18, 8]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [39, 9, 27, 7, 84, 13, 7, 23, 11, 7, 21, 9, 17, 7, 29, 17, 17, 13, 17, 7, 8, 17, 26, 17, 48, 17, 17, 8, 9, 38, 17, 49, 12, 17, 9, 12, 23, 16, 6, 6, 16, 37, 19, 7, 32, 18, 24, 11, 113, 23, 37, 25, 38, 24, 24, 7, 18, 24, 22, 28, 6, 10, 7, 8, 23, 37, 24, 13]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [7, 5, 5, 8, 4, 6, 11, 6, 10, 9, 7, 6, 8, 6, 5, 7, 5, 5, 5, 92, 9, 32, 7, 7, 7, 6, 8, 6, 5, 8, 15, 6, 6, 234, 8, 17, 9, 33, 6, 7, 7, 7, 6, 9, 5, 5, 14, 9, 6, 8, 18, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [3, 5, 5, 23, 5, 5, 5, 4, 5, 6, 5, 4, 26, 6, 6, 5, 8, 7, 7, 9, 5, 43, 6, 10, 10, 5, 7, 10, 5, 118, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 176
termination = MathOptInterface.OPTIMAL
objective_value = 0.9824791330848497
thermo_feasible = true
