┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 44
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6]
length(C_list) = 29
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [8, 9, 4, 5, 4, 7, 3, 3, 3, 3, 5, 2, 4, 3, 4, 28, 3, 4, 2, 5, 7, 4, 5, 7, 6, 5, 3]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [7, 8, 4, 5, 11, 5, 3, 4, 5, 3, 4, 4, 9, 5, 3, 5, 4, 4, 5, 4, 3, 8, 4, 3, 5, 3, 8, 4, 6, 3, 5, 3, 5, 3, 5, 7, 20]
length(C_list) = 35
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [9, 2, 5, 4, 3, 4, 5, 3, 3, 3, 8, 8, 4, 4, 4, 5, 4, 5, 4, 6, 8, 5, 3, 5, 7]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [8, 9, 7, 8, 9, 4, 3, 3, 4, 8, 6, 3, 7, 3, 9, 3, 8, 3, 9, 8, 10, 9, 8, 5, 9, 7, 8, 10, 7, 9, 8, 7]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [8, 3, 7, 8, 4, 35, 9, 3, 12, 4, 3, 6, 9, 3, 8, 6, 8, 3, 4, 5, 9, 9, 4, 5, 69, 9, 5, 4, 4, 7, 8, 11]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [9, 4, 5, 3, 4, 3, 4, 4, 5, 5, 5, 9, 5, 4, 10, 6, 73]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [15, 10, 4, 4, 8, 3, 3, 5, 3, 8, 4, 21, 4, 9, 5, 9, 7, 5, 6, 5, 5, 9, 8, 8, 7, 4, 5, 4, 7, 5, 9]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [8, 4, 3, 5, 4, 3, 7, 4, 7, 14, 8, 63, 14, 15, 8, 14, 8, 7, 4, 4, 14, 15]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 3, 7, 5, 3, 59, 5, 4, 3, 4, 3, 3, 5, 3, 4, 4, 4, 3, 5, 8, 4, 5]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [5, 9, 15, 18, 7, 4, 5, 7, 8, 5, 3, 3, 7, 18, 15, 8, 4, 6, 20, 5, 7, 20, 8, 8, 8, 70, 7, 3, 6, 4, 10, 6]
length(C_list) = 32
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 5, 5, 109, 5, 5, 4, 3, 8, 10, 38, 142, 4, 7, 4, 8, 5]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [8, 9, 10, 8, 3, 6, 5, 5, 7, 6, 111, 7, 9, 5, 3, 6, 8, 137, 10, 8, 5, 5, 9, 8, 6, 4, 5, 6, 11, 4, 3, 5, 130, 17, 3]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [9, 4, 5, 3, 4, 4, 3, 4, 4, 3, 4, 13, 5, 3, 4, 73, 3, 5, 4, 3, 17, 5, 3, 16, 4, 4, 3, 4, 4, 12, 3, 8]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [12, 4, 3, 13, 4, 8, 4, 7, 3, 13, 15, 76, 8, 6, 7, 4, 5, 4, 7, 6, 8, 8, 14, 3, 4, 3, 8, 8, 4, 6, 4, 7]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [3, 3, 5, 3, 3, 3, 4, 5, 7, 5, 3, 7, 3, 3, 3, 10, 5, 4, 4, 4, 4]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 12, 7, 7, 7, 7, 6, 7, 4, 5]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 38, 4, 4, 4, 4, 5, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [8, 8, 3, 9, 7, 10, 10, 7, 3, 4, 4, 314, 6, 9, 20, 8, 45, 73, 5, 6, 46, 5, 87, 4]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 19
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
