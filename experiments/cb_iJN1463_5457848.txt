WARNING: Dual bound 0.5861 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585867 is smaller than the objective of the primal solution 0.585937. The solution might not be optimal.
WARNING: Dual bound 0.585908 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.586099 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585908 is smaller than the objective of the primal solution 0.585998. The solution might not be optimal.
WARNING: Dual bound 0.586099 is smaller than the objective of the primal solution 0.586116. The solution might not be optimal.
WARNING: Dual bound 0.586099 is smaller than the objective of the primal solution 0.586116. The solution might not be optimal.
WARNING: Dual bound 0.586099 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.5861 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN1463
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN1463
----------------------------------
number of metabolites : 2153
number of reactions : 2927
number of genes : 1462

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 15
max_cuts = 9
(indicator, big_m) = (false, true)
BIG M ADDED
model with 2927 flux variables and 5473 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 7, 2, 2, 2, 2, 4, 3]
length(C_list) = 9
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 2, 3, 3]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [5, 3, 9, 5, 3, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [2, 4, 8, 5, 6, 12, 5, 6, 5, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [11, 8, 6, 6, 5, 6, 6, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [5, 3, 3, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [6, 2, 2, 4]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [5, 8, 7, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 2, 3, 47, 16, 3]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [5, 5, 2, 3, 3, 5, 3, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 5, 5, 5, 4, 5, 6, 4, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 5, 3, 4, 21, 5, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [11, 4, 4, 13, 6, 12, 32, 3, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 4, 3, 4, 5, 4, 6, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 5, 4, 5, 6, 7, 3, 7, 127]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [9, 8, 3, 4, 4, 3, 10, 15, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [6, 7, 5, 4, 6, 3, 4, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 2, 4, 7, 4, 3, 4, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [12, 44, 4, 8, 4, 5, 6, 23, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [29, 21, 2, 4, 6, 6, 4, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [14, 7, 6, 4, 3, 4, 4, 4, 5, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [15, 7, 5, 5, 7, 12, 4, 7, 3, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [7, 7, 21, 4, 4, 5, 8, 6, 2, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 6, 4, 4, 3, 7, 5, 9, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [22, 8, 4, 5, 4, 4, 4, 3, 9, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 5, 10, 3, 4, 2, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [15, 5, 8, 7, 5, 7, 3, 11, 4, 5, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [2, 12, 8, 4, 12, 6, 5, 4, 3, 5, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [22, 4, 5, 6, 8, 4, 4, 2, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [6, 7, 7, 6, 6, 7, 4, 4, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [5, 13, 3, 11, 13, 4, 3, 11, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [8, 7, 6, 6, 3, 4, 9, 5, 8, 6, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [3, 17, 6, 3, 5, 10, 6, 3, 14]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [11, 6, 7, 7, 6, 10, 9, 2, 6, 4, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [14, 4, 6, 4, 4, 8, 8, 4, 3, 25, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [15, 4, 13, 12, 9, 5, 4, 11, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [12, 6, 4, 2, 6, 6, 5, 6, 5, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [10, 3, 9, 8, 7, 11, 4, 309, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [8, 11, 12, 13, 10, 11]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [4, 8, 9, 14, 13, 13, 11, 8, 21, 13, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [5, 7, 4, 7, 5, 5, 5, 4, 7, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [6, 8, 59, 8, 6, 8, 7, 8]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [24, 4, 8, 9, 4, 5, 5, 13, 5, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [6, 6, 9, 10, 9, 9, 9, 9, 6, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [7, 6, 5, 7, 6, 5, 5, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [7, 11, 9, 9, 9, 6, 3, 7, 4, 8, 7, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [4, 23, 5, 9, 7, 3, 4, 14, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [4, 13, 6, 5, 13, 5, 14, 18]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [5, 5, 4, 4, 6, 4, 3, 5, 3, 6, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [8, 3, 8, 7, 9, 12]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [6, 23, 5, 5, 7, 12, 12, 10, 11, 8, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 7, 8, 5, 6, 14, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [4, 16, 13, 13, 13, 10, 10, 14, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 3, 4, 3, 4, 5, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [8, 4, 10, 4, 4, 3, 6, 5, 15]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [9, 4, 5, 6, 4, 6, 3, 12, 10, 4, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [28, 3, 13, 3, 26, 25, 26, 26, 16, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [5, 42, 7, 6, 4, 11, 44, 9]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [29, 7, 6, 26, 5, 5, 5]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [13, 4, 5, 6, 5, 4, 7, 5, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [19, 26, 3, 3, 5, 8, 3, 5, 5, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [4, 12, 3, 16, 10, 16, 18, 12, 16, 11, 16]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [4, 3, 7, 6, 7, 8, 4, 7, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [4, 6, 9, 10, 6, 8, 10, 9, 9, 4, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 3, 3, 4, 3, 3]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 4, 5, 4, 18, 5, 5, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [3, 4, 7, 7, 165, 9]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [8, 9, 8, 9, 9, 9, 6, 11]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [8, 21, 4, 11, 5, 10, 5, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [8, 5, 5, 5, 6, 7, 6, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [3, 8, 7, 5, 10, 6, 7, 9]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [7, 6, 6, 7, 6, 7, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [9, 4, 5, 4, 4, 7, 3]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [11, 8, 10, 6, 22, 5, 10]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [4, 7, 9, 6, 11, 13, 18, 5, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [13, 4, 3, 4, 3, 3, 6, 3, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [4, 4, 7, 6, 6]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [6, 7, 6, 3, 6, 6, 41, 6, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [21, 10, 6, 5, 11, 7, 4, 3, 6, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [7, 7, 5, 7, 8, 10, 7, 8, 6, 7, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [12, 2, 5, 3, 10, 13, 21, 3]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [8, 16, 13, 14, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [8, 4, 5, 13, 4, 13, 17, 11]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [13, 15, 8, 8, 13, 3, 8, 8, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [6, 3, 10, 11, 14, 12, 19, 12, 12, 10, 14, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [13, 11, 11, 12, 10, 13, 4, 6, 7, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [5, 11, 5, 9, 4, 3, 5, 5, 6, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [4, 9, 10, 7, 4, 9, 4, 13, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [7, 5, 4, 6, 7, 3, 4, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [8, 10, 8, 4, 99, 10, 13]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [7, 12, 10, 10, 8, 12, 8, 11, 11, 82]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [12, 12, 12, 11, 16, 10, 74, 19]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [3, 9, 9, 10, 9, 8, 25, 10, 9, 9, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [7, 14, 8, 12, 13, 12, 14, 14, 19, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 4, 4, 4, 5, 5, 7, 7, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [22, 6, 7, 9, 7, 7, 10, 7, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [2, 5, 4, 6, 6, 5, 5, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [16, 4, 13, 16, 11, 46, 10, 11]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 7, 6, 5, 10, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [6, 3, 6, 13, 6, 7, 3]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [4, 5, 10, 4, 2, 5, 4, 5, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [2, 5, 5, 6, 5, 5, 5]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [3, 11, 11, 12, 12, 6, 9, 11, 11, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [4, 7, 8, 9, 6, 7, 6]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [11, 5, 5, 7, 6, 11, 6, 9, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [17, 6, 10, 8, 19, 6, 8]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [9, 7, 8, 6, 5, 8]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [23, 7, 8, 7, 8, 9, 8, 6, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [5, 5, 7, 5, 37, 6, 35, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [31, 16, 16, 18, 18, 17, 17, 16, 16]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 10, 15]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [2, 4, 3, 10]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [15, 13, 16, 14, 13]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [8, 6, 5, 6, 6, 4, 6, 3]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [8, 4, 23]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [2, 9, 6, 4, 3, 4, 4, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [8, 6, 3]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [5, 8, 6, 5, 6, 5, 7, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [8, 15, 17, 14, 10, 9, 35, 30, 17, 17, 16, 16]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [26, 6, 9, 6, 8, 12, 10, 6, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [5, 15, 3, 12, 13, 3, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 6, 5, 4, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 56, 6, 3, 2]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [3, 8, 8, 9, 8, 10, 6, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [5]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 7, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [2, 3]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 8, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [30, 6, 6, 7, 3, 6, 6, 4, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [7, 6, 3, 10, 5, 9, 5, 9, 20, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [6, 5, 6, 4, 5, 9, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [11, 10, 16, 8, 18, 6, 8, 9, 7, 8, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [11, 4, 7, 3, 7, 6, 6, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [8, 6, 5, 8, 5, 9, 3, 9, 4, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [6, 5, 5, 4, 5, 6, 5, 5, 5, 19]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 6, 8, 6, 6, 5, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [6, 7, 4, 5, 6, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [6, 8, 12, 8, 6, 7, 9]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [6, 10, 5, 4, 5, 6, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [5, 6, 8, 8, 12, 5, 8, 9, 14, 60]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [10, 11, 9, 8, 11, 11, 10, 14, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [3, 8, 11, 15, 10, 8, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [10, 9, 10, 9, 7, 8, 9, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [6, 4, 45]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [8, 6, 7, 6, 24, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [5]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [5, 7, 14, 7, 9, 7, 7, 8, 24]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [11, 5, 11, 6, 5, 13, 14, 10, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [19, 19, 19, 19, 31, 20, 19, 20, 22]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [5, 3, 6, 4, 5, 5, 3, 5, 5, 4, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [11, 5, 9, 6, 5, 5, 5, 5, 4, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [10, 7, 8, 6, 14, 7, 7, 4, 4, 5, 6, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 3, 5, 5, 5, 6, 3, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 5, 11, 4, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 4]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [10, 12, 11, 12, 12, 3, 12, 12]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [3, 6, 8, 5, 5, 7]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [4, 12, 13, 12, 14, 14, 63, 5, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 5, 6, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [3, 3, 3]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [8, 6, 13, 14, 13, 5, 3, 16]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [4]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [6, 8, 8, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [3, 8, 7, 7, 5, 7, 37]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 47]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [3, 4, 6]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [6, 3, 6, 7, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [4, 6, 6, 4, 26, 161, 5, 8, 14]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [3, 25, 5]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [3, 5]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [36, 4, 7, 10, 4, 10, 30, 10]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 172
termination = MathOptInterface.OPTIMAL
objective_value = 0.5861101003494572
thermo_feasible = true
