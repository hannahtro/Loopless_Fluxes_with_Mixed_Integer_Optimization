ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
RECON1
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

RECON1
----------------------------------
number of metabolites : 2766
number of reactions : 3741
number of genes : 1905

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 187
max_cuts = 75
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 3741 flux variables and 7052 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [5, 2, 2, 2, 2, 2, 2, 46, 5, 5, 5, 2, 5, 6, 4, 4, 8, 5, 5, 5, 11, 7, 3, 6, 7, 4, 2, 6, 5, 6, 4, 211, 3, 9, 5, 4, 6, 7, 5, 5, 3, 3, 9, 5, 6, 7, 9, 5, 9, 5, 4, 4, 6, 147, 5, 5, 31, 5, 5, 7, 7, 4, 7, 6, 6, 5, 4, 5, 5, 6, 4, 4]
length(C_list) = 72
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 2, 6, 6, 10, 2, 6, 4, 289, 5, 7, 5, 11, 6, 3, 9, 5, 8, 5, 67, 14, 9, 2, 309, 5, 5, 9, 4, 6, 7, 7, 2, 7, 79, 35, 3, 6, 7, 23, 9, 3, 3, 4, 367, 5, 12, 6, 2, 10, 25, 9, 6, 7, 27, 8, 9, 11, 23, 6, 3, 8, 23, 25, 3, 25, 540, 27, 5, 8, 6, 2]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [7, 3, 2, 4, 4, 3, 2, 3, 8, 7, 3, 5, 9, 9, 3, 9, 10, 4, 4, 4, 3, 10, 4, 5, 3, 15, 10, 4, 10, 5, 5, 8, 5, 4, 6, 6, 386, 6, 9, 6, 4, 8, 16, 7, 8, 3, 6, 5, 11, 5, 28, 12, 6, 8, 4, 7, 7, 232, 52, 7, 18, 12, 10, 5, 41, 4, 409, 4, 13, 5, 8, 4, 8, 8, 10, 5, 14, 5, 4, 10, 8, 4, 12, 4, 7, 6, 108, 2, 7, 5, 7, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 4, 7, 5, 5, 5, 5, 5, 11, 4, 5, 4, 8, 4, 60, 4, 4, 10, 7, 3, 362, 183, 10, 4, 10, 6, 8, 6, 3, 5, 6, 6, 7, 58, 12, 14, 8, 8, 43, 4, 5, 4, 8, 3, 6, 9, 4, 6, 28, 5, 4, 6, 4, 10, 5, 7, 7, 5, 4, 234, 341, 6, 10, 50, 3, 4, 291, 3, 10, 211, 8, 9, 249, 5, 95, 7, 16, 7, 7, 4, 6, 22, 4, 4, 10, 4, 3, 12, 69, 8, 14, 5, 7, 8, 6, 4, 5, 5, 4, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 10, 8, 7, 6, 5, 6, 4, 10, 7, 4, 4, 9, 4, 4, 5, 5, 4, 8, 458, 6, 5, 12, 6, 7, 4, 5, 9, 5, 7, 4, 7, 6, 52, 53, 5, 3, 4, 6, 4, 5, 3, 3, 5, 4, 4, 306, 9, 4, 9, 4, 440, 349, 9, 12, 22, 6, 6, 7, 4, 8, 10, 197, 5, 5, 12, 8, 200, 5, 242, 67, 5, 10, 8, 227, 5, 9, 11, 4, 6, 10, 13, 155, 13, 5, 141, 14, 54, 6, 10, 5, 145, 338, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [17, 6, 8, 6, 4, 4, 3, 3, 7, 5, 20, 4, 4, 6, 10, 48, 5, 23, 8, 4, 3, 4, 4, 5, 5, 7, 4, 8, 5, 9, 8, 4, 6, 4, 4, 7, 77, 6, 502, 10, 6, 47, 6, 6, 6, 14, 14, 559, 7, 7, 6, 6, 6, 6, 6, 4, 8, 6, 3, 6, 4, 6, 6, 212, 6, 9, 53, 5, 8, 6, 19, 10, 9, 2, 3, 11, 10, 20, 20, 49, 269, 103, 8, 4, 7, 51, 4, 18, 10, 4, 20, 108, 18, 8, 41, 7, 7, 11, 7, 4, 86]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [13, 5, 5, 11, 2, 2, 5, 6, 5, 5, 2, 6, 7, 5, 4, 6, 3, 4, 8, 7, 7, 6, 4, 8, 41, 4, 7, 7, 8, 10, 8, 3, 4, 13, 4, 5, 6, 12, 2, 4, 218, 10, 4, 4, 6, 5, 5, 8, 4, 4, 4, 6, 39, 5, 10, 8, 4, 4, 258, 7, 8, 8, 6, 10, 31, 197, 6, 10, 3, 4, 19, 6, 16, 171, 9, 5, 75, 8, 6, 5, 4, 8, 4, 10, 4, 6, 3, 7, 6, 4, 155, 4, 5, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 2, 4, 5, 2, 7, 4, 3, 6, 7, 51, 8, 5, 5, 6, 408, 8, 6, 9, 4, 11, 4, 7, 5, 27, 6, 4, 4, 5, 10, 4, 8, 537, 3, 7, 6, 3, 7, 301, 6, 8, 7, 4, 8, 58, 4, 5, 4, 16, 5, 3, 6, 8, 5, 26, 48, 3, 8, 6, 6, 7, 5, 9, 4, 4, 4, 8, 53, 32, 17, 4, 3, 4, 8, 138, 18, 9, 11, 84, 4, 6, 7, 3, 39, 7, 3, 4, 5, 9, 4, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [8, 3, 8, 9, 12, 6, 5, 7, 7, 4, 5, 5, 5, 5, 323, 5, 6, 4, 4, 5, 3, 5, 10, 9, 4, 3, 7, 7, 6, 152, 8, 8, 4, 8, 189, 4, 9, 4, 4, 7, 4, 5, 8, 4, 6, 3, 12, 7, 7, 386, 6, 27, 6, 10, 7, 8, 6, 9, 4, 5, 102, 7, 6, 9, 7, 7, 6, 6, 10, 7, 159, 3, 5, 50, 6, 10, 5, 6, 7, 4, 27, 4, 8, 8, 6, 6, 18, 8, 5, 5, 8, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [6, 3, 5, 7, 7, 4, 7, 4, 10, 4, 6, 8, 8, 97, 5, 7, 11, 4, 7, 4, 5, 5, 5, 3, 14, 4, 11, 7, 4, 130, 495, 6, 4, 17, 13, 4, 564, 4, 18, 5, 7, 4, 5, 19, 4, 5, 9, 61, 11, 4, 16, 14, 5, 13, 47, 4, 3, 7, 30, 304, 6, 3, 12, 4, 7, 7, 6, 91, 4, 4, 56, 4, 3, 4, 8, 18, 4, 4, 401, 4, 10, 13, 3, 4, 12, 7, 5, 6, 6, 4, 5, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [6, 5, 8, 5, 4, 7, 4, 6, 7, 9, 9, 4, 4, 8, 117, 6, 6, 6, 36, 5, 5, 4, 13, 7, 5, 7, 476, 6, 6, 7, 6, 4, 7, 4, 4, 6, 7, 3, 5, 198, 5, 5, 6, 8, 5, 6, 6, 4, 4, 5, 4, 7, 4, 4, 3, 11, 7, 8, 5, 7, 5, 213, 4, 7, 8, 8, 8, 6, 4, 4, 5, 46, 4, 49, 33, 6, 4, 5, 7, 15, 9, 7, 10, 152, 6, 5, 5, 8, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 6, 6, 7, 6, 15, 4, 7, 4, 6, 5, 4, 9, 8, 4, 7, 5, 12, 6, 3, 7, 6, 266, 7, 5, 6, 13, 5, 7, 4, 5, 4, 6, 11, 3, 13, 3, 7, 12, 8, 5, 4, 6, 4, 3, 7, 134, 5, 9, 294, 4, 10, 4, 3, 5, 7, 4, 6, 161, 7, 3, 159, 4, 11, 5, 17, 10, 441, 10, 4, 8, 8, 4, 4, 4, 10, 12, 7, 28, 4, 8, 81, 5, 22, 9, 4, 28, 4, 5, 4, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [4, 4, 7, 9, 4, 5, 4, 4, 13, 5, 4, 4, 4, 4, 5, 14, 7, 10, 4, 303, 9, 8, 8, 4, 10, 6, 11, 10, 8, 8, 5, 8, 8, 7, 9, 4, 8, 4, 4, 10, 7, 5, 9, 7, 6, 6, 15, 6, 4, 4, 4, 4, 4, 4, 7, 7, 5, 11, 9, 181, 116, 4, 8, 5, 4, 11, 9, 5, 5, 6, 17, 5, 5, 4, 5, 6, 4, 16, 11, 6, 16, 6, 9, 18, 46, 7, 4, 6, 6, 28, 8, 8, 5, 9, 13]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [10, 7, 6, 7, 7, 6, 5, 8, 7, 5, 5, 5, 7, 5, 7, 3, 66, 7, 6, 4, 6, 4, 4, 4, 7, 6, 4, 5, 5, 7, 10, 9, 6, 165, 6, 6, 4, 9, 7, 4, 6, 6, 6, 6, 4, 4, 9, 7, 4, 5, 4, 5, 4, 4, 6, 6, 7, 6, 6, 4, 8, 10, 7, 4, 6, 7, 8, 8, 65, 9, 5, 7, 7, 4, 5, 10, 5, 285, 5, 44, 4, 16, 17, 27, 6, 21, 6, 7, 9, 4, 8, 8, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [6, 4, 7, 6, 6, 7, 6, 10, 6, 8, 8, 9, 7, 63, 25, 8, 26, 4, 9, 184, 5, 6, 6, 7, 9, 7, 8, 10, 3, 9, 40, 10, 6, 4, 287, 10, 535, 5, 8, 45, 10, 7, 5, 77, 4, 252, 19, 8, 11, 280, 4, 96, 4, 12, 6, 4, 8, 3, 4, 6, 4, 19, 13, 7, 6, 16, 239, 6, 23, 10, 6, 51, 5, 60, 7, 11, 11, 208, 5, 7, 16, 7, 8, 9, 16, 12, 9, 18, 12, 6, 43, 6, 4, 7, 7, 4, 8, 8, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 7, 7, 4, 6, 6, 13, 5, 5, 8, 5, 9, 7, 7, 8, 8, 4, 5, 7, 8, 5, 4, 16, 9, 6, 6, 7, 7, 168, 4, 8, 7, 3, 4, 5, 3, 40, 4, 9, 275, 6, 6, 6, 5, 4, 4, 12, 9, 8, 5, 6, 8, 82, 7, 7, 192, 7, 5, 9, 4, 6, 22, 8, 10, 11, 25, 4, 16, 6, 11, 7, 11, 190, 5, 3, 9, 11, 7, 4, 8, 4, 4, 9, 4, 9, 7, 6, 9, 10, 6, 4, 6, 4, 7, 3]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [9, 7, 5, 6, 8, 8, 8, 7, 8, 7, 3, 4, 11, 6, 8, 16, 4, 11, 13, 4, 4, 9, 4, 30, 9, 10, 6, 6, 4, 4, 176, 8, 3, 6, 15, 4, 4, 7, 6, 7, 6, 4, 4, 9, 7, 6, 4, 9, 6, 5, 5, 5, 4, 10, 5, 6, 7, 7, 77, 3, 14, 13, 6, 256, 9, 8, 5, 8, 10, 4, 5, 17, 9, 357, 4, 56, 4, 8, 7, 128, 5, 6, 4, 21, 59, 7, 9, 4, 6, 4, 4, 4, 15, 23, 7, 66, 4, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [15, 6, 6, 5, 4, 6, 8, 5, 4, 8, 4, 4, 4, 7, 4, 4, 4, 3, 6, 7, 5, 8, 4, 11, 7, 4, 8, 5, 4, 3, 4, 6, 6, 10, 9, 4, 4, 7, 4, 239, 7, 5, 4, 5, 5, 4, 4, 5, 6, 138, 3, 4, 10, 6, 8, 97, 6, 6, 5, 4, 6, 7, 5, 5, 5, 4, 3, 8, 4, 5, 161, 7, 6, 4, 5, 10, 6, 6, 5, 113, 6, 3, 11, 10, 6, 6, 6, 159, 3, 13, 8, 10, 5, 6, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [3, 6, 5, 7, 4, 108, 4, 7, 9, 4, 3, 496, 7, 5, 6, 5, 9, 5, 3, 12, 4, 5, 4, 3, 5, 4, 3, 5, 5, 11, 16, 5, 5, 5, 11, 16, 8, 4, 4, 4, 4, 4, 4, 8, 5, 6, 10, 4, 7, 11, 6, 11, 4, 8, 6, 6, 4, 8, 6, 4, 8, 30, 8, 4, 8, 6, 5, 4, 19, 7, 6, 98, 5, 66, 8, 6, 4, 9, 5, 5, 6, 5, 4, 4, 12, 8, 6, 8, 9, 4, 5, 7, 5, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [36, 6, 5, 5, 6, 9, 6, 3, 5, 10, 8, 4, 4, 5, 6, 6, 3, 7, 7, 4, 5, 4, 4, 4, 4, 8, 6, 4, 4, 4, 9, 3, 374, 5, 272, 19, 5, 4, 5, 5, 4, 4, 195, 5, 4, 6, 4, 6, 11, 10, 5, 23, 6, 7, 7, 11, 40, 13, 6, 5, 4, 5, 38, 11, 4, 4, 6, 6, 8, 40, 18, 7, 40, 3, 55, 5, 8, 5, 7, 6, 7, 8, 6, 7, 29, 49]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [15, 6, 9, 5, 6, 7, 5, 7, 3, 5, 3, 4, 4, 6, 256, 5, 3, 8, 5, 163, 9, 5, 3, 6, 4, 6, 5, 4, 4, 539, 4, 9, 4, 7, 7, 23, 6, 8, 3, 5, 6, 6, 4, 4, 4, 8, 14, 13, 7, 7, 10, 6, 6, 5, 10, 5, 6, 8, 197, 87, 4, 5, 11, 4, 6, 11, 7, 4, 7, 4, 4, 118, 7, 6, 5, 8, 5, 6, 3, 6, 4, 7, 5, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [6, 5, 5, 4, 7, 3, 8, 4, 16, 8, 12, 4, 5, 11, 15, 7, 25, 8, 4, 4, 11, 40, 8, 6, 4, 12, 4, 3, 184, 4, 6, 8, 10, 23, 4, 11, 3, 8, 10, 6, 4, 5, 3, 23, 6, 107, 5, 6, 10, 9, 8, 5, 8, 13, 4, 9, 4, 10, 27, 12, 8, 8, 12, 7, 5, 9, 14, 6, 9, 3, 6, 8, 9, 11, 4, 83, 12, 4, 5, 7, 12, 8, 7, 8, 7, 7, 8, 7, 11, 12, 11, 7, 8, 7, 9, 6, 8, 120, 10, 82]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [32, 5, 6, 4, 6, 5, 8, 10, 4, 7, 5, 8, 4, 3, 6, 235, 15, 3, 198, 7, 7, 4, 10, 3, 4, 9, 5, 7, 4, 4, 6, 5, 5, 4, 4, 3, 7, 5, 4, 4, 20, 3, 12, 63, 6, 4, 6, 5, 5, 8, 8, 7, 9, 142, 4, 4, 10, 8, 4, 19, 3, 15, 4, 28, 8, 8, 8, 5, 3, 19, 13, 8, 5, 8, 4, 27, 19, 6, 8, 6, 5, 6, 18, 4, 9, 19, 10, 7, 19, 13, 21, 4, 7, 5, 9, 8, 6, 6, 4, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 5, 6, 4, 6, 8, 8, 9, 4, 7, 6, 6, 11, 10, 4, 7, 105, 5, 6, 4, 6, 3, 11, 9, 7, 5, 3, 4, 5, 5, 4, 5, 3, 4, 4, 6, 4, 13, 4, 306, 462, 4, 4, 12, 6, 4, 8, 4, 266, 11, 4, 7, 29, 6, 4, 10, 467, 5, 7, 11, 4, 4, 8, 6, 4, 54, 10, 9, 60, 10, 4, 8, 9, 9, 6, 5, 6, 7, 10, 7, 3, 8, 6, 4, 5, 4, 11, 4, 7, 6, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [11, 7, 6, 6, 5, 4, 7, 6, 3, 7, 4, 10, 6, 7, 5, 349, 9, 4, 5, 157, 8, 4, 4, 3, 10, 3, 92, 10, 507, 4, 459, 4, 9, 9, 4, 5, 8, 5, 4, 7, 4, 514, 130, 11, 5, 7, 4, 11, 4, 8, 9, 7, 12, 3, 6, 8, 8, 7, 8, 110, 6, 8, 10, 7, 5, 7, 4, 5, 5, 125, 13, 5, 5, 6, 274, 8, 4, 4, 4, 8, 4, 4, 6, 8, 11, 7, 4, 7, 4, 7, 4, 7, 5, 9, 9, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [6, 13, 11, 4, 4, 9, 8, 4, 12, 4, 4, 11, 11, 6, 3, 11, 6, 7, 7, 6, 8, 12, 6, 3, 3, 4, 9, 14, 4, 8, 5, 9, 42, 48, 15, 3, 10, 273, 6, 9, 7, 10, 10, 7, 5, 4, 7, 12, 7, 6, 6, 6, 31, 13, 10, 4, 9, 3, 142, 11, 4, 5, 19, 158, 7, 10, 8, 5, 11, 10, 9, 13, 69, 113, 5, 9, 19, 7, 11, 97, 10, 8, 349, 5, 32, 13, 5, 16, 4, 6, 7, 5, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [13, 7, 8, 4, 8, 7, 9, 5, 7, 5, 4, 9, 4, 6, 6, 5, 6, 6, 7, 6, 5, 5, 230, 8, 6, 3, 5, 4, 4, 4, 3, 9, 9, 44, 8, 138, 6, 8, 4, 3, 5, 4, 9, 4, 10, 6, 3, 9, 7, 7, 9, 4, 7, 4, 6, 6, 105, 4, 6, 183, 9, 8, 170, 4, 9, 4, 11, 7, 10, 10, 7, 6, 6, 7, 9, 8, 202, 4, 4, 435, 29, 99, 7, 8, 5, 22, 7, 22, 7, 6, 6, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [13, 8, 4, 5, 7, 4, 3, 8, 9, 12, 4, 4, 6, 12, 8, 10, 8, 4, 7, 4, 4, 80, 9, 4, 108, 5, 4, 5, 3, 4, 35, 6, 4, 3, 255, 4, 102, 367, 6, 6, 8, 7, 4, 6, 7, 7, 4, 11, 4, 4, 4, 108, 4, 6, 8, 3, 7, 54, 10, 47, 10, 9, 5, 7, 33, 4, 8, 54, 6, 8, 5, 9, 6, 5, 7, 8, 10, 6, 6, 5, 4, 5, 4, 3, 7, 23, 7, 11, 14, 4, 23, 10, 3, 6, 11, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [32, 6, 5, 6, 4, 7, 4, 6, 6, 7, 6, 8, 6, 5, 7, 4, 5, 4, 6, 7, 8, 6, 5, 5, 4, 5, 5, 6, 6, 4, 11, 10, 6, 27, 11, 8, 10, 4, 4, 12, 6, 557, 3, 7, 4, 4, 6, 7, 4, 6, 6, 5, 11, 8, 4, 7, 7, 8, 7, 7, 8, 5, 6, 6, 55, 7, 4, 14, 7, 7, 7, 25, 6, 39, 8, 7, 3, 5, 3, 4, 12, 4, 6, 6, 12, 4, 3, 7, 7, 4, 4, 7, 4, 12, 6, 6, 28, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [8, 4, 11, 8, 4, 6, 9, 7, 4, 9, 5, 5, 9, 5, 8, 23, 5, 6, 25, 13, 191, 5, 5, 5, 9, 4, 9, 7, 7, 5, 4, 17, 4, 12, 7, 9, 7, 78, 9, 5, 6, 4, 6, 5, 3, 5, 4, 5, 5, 5, 5, 4, 11, 3, 8, 5, 5, 5, 5, 4, 29, 6, 7, 6, 5, 4, 6, 8, 6, 4, 174, 4, 7, 8, 9, 6, 8, 9, 6, 4, 9, 4, 8, 7, 7, 4, 6, 7, 4, 19, 8, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 6, 6, 7, 5, 7, 6, 8, 9, 4, 5, 5, 173, 4, 17, 6, 8, 15, 9, 4, 4, 4, 6, 7, 4, 3, 28, 4, 18, 532, 6, 46, 20, 5, 7, 10, 380, 41, 6, 6, 4, 4, 6, 5, 6, 5, 170, 5, 3, 6, 4, 16, 7, 9, 4, 3, 4, 5, 13, 6, 7, 4, 5, 54, 6, 8, 4, 5, 5, 19, 5, 4, 155, 21, 7, 7, 5, 7, 6, 7, 7, 6, 3, 9, 6, 8, 5, 4, 8, 6, 8, 4, 5, 9, 6, 3, 5, 69]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 5, 7, 6, 4, 3, 7, 3, 41, 5, 5, 4, 9, 8, 7, 6, 5, 5, 10, 6, 190, 5, 3, 4, 7, 5, 8, 4, 8, 10, 4, 5, 4, 7, 6, 139, 4, 5, 18, 9, 4, 14, 12, 4, 4, 8, 540, 6, 4, 8, 6, 31, 4, 5, 313, 13, 4, 216, 4, 6, 52, 6, 7, 6, 5, 11, 3, 6, 5, 4, 4, 3, 70, 4, 24, 7, 4, 14, 6, 7, 7, 7, 8, 7, 4, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [8, 5, 9, 7, 4, 11, 6, 7, 7, 5, 8, 7, 7, 8, 6, 11, 6, 10, 14, 137, 6, 9, 8, 10, 5, 321, 7, 8, 4, 28, 150, 15, 5, 4, 12, 74, 172, 4, 8, 8, 9, 7, 7, 4, 8, 7, 10, 4, 9, 7, 7, 255, 5, 6, 5, 6, 10, 64, 6, 8, 6, 18, 8, 7, 6, 5, 8, 8, 5, 8, 4, 493, 9, 6, 8, 9, 7, 6, 10, 4, 12, 4, 11, 7, 7, 7, 8, 24, 6, 7, 9, 5, 8, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [8, 7, 4, 8, 5, 10, 7, 6, 10, 7, 3, 12, 4, 10, 6, 7, 5, 10, 507, 9, 31, 11, 4, 4, 5, 9, 4, 9, 25, 299, 12, 4, 12, 14, 6, 8, 433, 4, 4, 8, 6, 8, 8, 12, 5, 5, 6, 4, 7, 7, 3, 8, 5, 10, 12, 69, 11, 4, 9, 8, 11, 3, 8, 8, 11, 5, 6, 5, 5, 108, 6, 8, 6, 9, 6, 310, 54, 4, 4, 18, 5, 9, 21, 6, 4, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [18, 5, 7, 5, 4, 5, 5, 12, 4, 5, 4, 4, 136, 4, 342, 6, 4, 7, 4, 6, 4, 4, 739, 8, 8, 8, 4, 7, 9, 3, 13, 7, 304, 3, 4, 9, 45, 13, 76, 16, 5, 5, 8, 8, 10, 4, 7, 6, 6, 7, 5, 203, 5, 8, 7, 9, 8, 5, 6, 12, 5, 4, 7, 8, 5, 5, 10, 4, 7, 12, 11, 8, 4, 5, 6, 29, 6, 4, 3, 8, 5, 10, 11, 4, 3, 13, 7, 8, 13]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [5, 7, 6, 6, 6, 8, 10, 12, 4, 4, 9, 8, 11, 4, 7, 8, 4, 6, 119, 5, 7, 4, 13, 5, 3, 11, 7, 5, 7, 4, 6, 5, 20, 4, 5, 5, 6, 4, 4, 6, 5, 4, 5, 10, 18, 9, 8, 44, 6, 9, 6, 5, 4, 6, 7, 7, 6, 5, 6, 9, 198, 5, 6, 11, 10, 8, 9, 6, 9, 11, 5, 4, 6, 4, 10, 10, 3, 10, 9, 4, 100, 9, 6, 5, 10, 6, 4, 10, 5, 10, 6, 4, 8, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [12, 8, 9, 9, 7, 10, 10, 7, 48, 4, 12, 8, 7, 7, 8, 5, 8, 34, 3, 7, 6, 4, 9, 7, 6, 8, 8, 9, 10, 10, 4, 7, 4, 7, 4, 5, 494, 34, 8, 6, 4, 7, 9, 7, 12, 6, 108, 9, 7, 7, 5, 6, 3, 7, 11, 7, 5, 32, 26, 12, 142, 8, 5, 4, 27, 5, 5, 7, 18, 10, 8, 5, 10, 10, 10, 13, 5, 10, 9, 5, 6, 7, 4, 4, 3, 12, 8, 11, 6, 6, 8, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [4, 9, 6, 3, 4, 4, 4, 4, 4, 13, 5, 13, 4, 5, 5, 4, 191, 5, 6, 5, 5, 5, 5, 6, 4, 9, 4, 231, 7, 56, 6, 5, 6, 214, 6, 6, 27, 4, 178, 8, 5, 253, 6, 4, 4, 6, 5, 8, 11, 4, 3, 101, 8, 9, 4, 309, 145, 12, 59, 11, 9, 7, 7, 4, 5, 4, 4, 13, 5, 5, 4, 6, 5, 5, 5, 4, 4, 11, 432, 5, 12, 9, 4, 6, 11, 4, 6, 8, 5, 7, 10, 6, 4, 4, 6, 6, 3]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [8, 3, 4, 3, 10, 3, 3, 5, 9, 9, 109, 8, 7, 6, 5, 4, 7, 5, 5, 9, 57, 12, 10, 3, 13, 4, 7, 5, 10, 10, 8, 7, 28, 8, 11, 11, 4, 11, 34, 8, 3, 13, 9, 12, 6, 19, 4, 6, 6, 5, 9, 14, 7, 10, 7, 5, 12, 6, 4, 8, 4, 4, 7, 6, 78, 4, 12, 4, 10, 4, 5, 8, 4, 6, 9, 5, 4, 5, 11, 5, 7, 6, 4, 9, 3, 6, 4, 10, 12, 13, 9, 4, 11, 3]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 3, 7, 5, 4, 6, 5, 6, 9, 5, 6, 3, 9, 17, 11, 4, 3, 4, 8, 5, 3, 7, 4, 44, 4, 5, 10, 4, 10, 5, 10, 3, 5, 6, 7, 4, 8, 5, 4, 9, 4, 15, 51, 7, 10, 7, 3, 8, 4, 337, 246, 6, 4, 5, 68, 5, 6, 3, 5, 36, 4, 7, 5, 4, 7, 340, 5, 5, 9, 10, 6, 7, 15, 12, 9, 226, 7, 7, 8, 4, 6, 3, 9, 7, 11, 4, 5, 5, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [8, 7, 5, 9, 8, 4, 10, 6, 11, 8, 7, 6, 7, 11, 4, 6, 8, 5, 5, 396, 15, 5, 5, 4, 7, 5, 7, 6, 7, 7, 7, 12, 9, 60, 6, 4, 6, 5, 4, 9, 5, 10, 6, 4, 9, 6, 7, 8, 5, 8, 5, 4, 6, 11, 4, 4, 11, 6, 7, 6, 407, 10, 6, 9, 6, 4, 7, 7, 7, 5, 8, 6, 11, 11, 8, 4, 9, 7, 7, 23, 10, 5, 6, 10, 428, 6, 14, 7, 8, 22]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [5, 10, 5, 4, 4, 7, 6, 5, 6, 4, 4, 8, 7, 4, 7, 6, 9, 4, 5, 6, 4, 6, 4, 7, 3, 7, 7, 6, 4, 5, 3, 5, 5, 4, 5, 181, 3, 9, 5, 6, 8, 5, 6, 4, 5, 6, 10, 45, 5, 7, 20, 4, 6, 13, 10, 7, 10, 4, 4, 6, 4, 7, 5, 41, 4, 4, 10, 4, 5, 6, 7, 5, 7, 5, 7, 7, 2, 13, 3, 14, 5, 8, 5, 55, 8, 6, 5, 10, 6, 3, 4, 6, 5, 3, 6, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [4, 9, 8, 9, 9, 10, 3, 4, 5, 13, 10, 7, 9, 7, 7, 5, 4, 10, 6, 11, 4, 10, 10, 5, 10, 9, 7, 5, 10, 8, 4, 7, 11, 4, 5, 8, 4, 10, 6, 13, 12, 24, 6, 8, 4, 6, 6, 13, 4, 7, 10, 10, 5, 7, 10, 10, 4, 58, 5, 12, 7, 8, 5, 9, 9, 8, 19, 7, 5, 13, 6, 9, 7, 11, 10, 9, 4, 9, 6, 7, 4, 6, 7, 8, 9, 10, 6, 8, 6, 5, 4, 3, 9, 10, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [4, 7, 9, 11, 6, 10, 5, 6, 8, 10, 6, 7, 5, 78, 5, 6, 8, 12, 11, 6, 10, 5, 3, 4, 8, 17, 4, 9, 6, 6, 4, 8, 9, 6, 8, 7, 7, 8, 4, 11, 38, 4, 7, 5, 5, 8, 16, 10, 6, 4, 11, 3, 5, 4, 49, 6, 9, 5, 6, 6, 7, 12, 8, 6, 7, 166, 8, 9, 4, 14, 6, 8, 6, 34, 7, 3, 6, 9, 7, 8, 9, 4, 6, 43, 4, 4, 4, 22, 5, 6, 5, 20, 7, 8, 8, 10, 4, 9, 5, 5, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [23, 6, 10, 4, 12, 13, 8, 7, 4, 4, 4, 106, 13, 8, 12, 5, 13, 27, 12, 7, 8, 8, 4, 13, 8, 9, 5, 7, 10, 392, 4, 31, 11, 9, 3, 6, 10, 4, 15, 7, 10, 34, 6, 7, 7, 4, 5, 47, 7, 8, 491, 433, 9, 6, 49, 12, 6, 8, 4, 12, 17, 117, 11, 4, 6, 9, 10, 10, 9, 8, 13, 8, 23, 11, 7, 6, 7, 8, 7, 10, 4, 7, 4, 5, 11, 10, 10, 331, 11, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [8, 4, 11, 3, 3, 6, 4, 7, 9, 4, 93, 4, 12, 4, 3, 3, 4, 478, 9, 5, 36, 494, 4, 5, 11, 11, 5, 3, 5, 5, 226, 10, 12, 4, 9, 205, 6, 485, 5, 9, 15, 3, 9, 4, 5, 4, 12, 68, 25, 4, 284, 10, 12, 11, 11, 86, 4, 8, 16, 8, 9, 4, 6, 5, 34, 9, 3, 74, 5, 4, 4, 3, 181, 9, 18, 14, 4, 6, 7, 14, 4, 6, 4, 7, 10, 10, 6, 6, 13, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 6, 6, 6, 4, 7, 11, 6, 5, 11, 5, 6, 4, 8, 8, 12, 5, 11, 4, 5, 5, 4, 8, 5, 4, 4, 4, 4, 11, 6, 5, 9, 6, 5, 5, 14, 5, 3, 4, 7, 4, 11, 6, 9, 9, 3, 3, 9, 9, 109, 6, 6, 8, 15, 7, 4, 4, 4, 11, 165, 5, 4, 12, 12, 5, 6, 9, 4, 7, 7, 7]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [7, 4, 12, 7, 8, 3, 14, 7, 5, 16, 9, 9, 4, 7, 4, 12, 4, 4, 7, 8, 4, 6, 7, 4, 7, 301, 10, 6, 6, 3, 5, 6, 15, 5, 18, 11, 5, 13, 5, 8, 9, 191, 4, 8, 12, 149, 5, 4, 3, 4, 131, 7, 4, 10, 29, 14, 6, 5, 9, 5, 13, 6, 5, 6, 7, 4, 4, 7, 4, 26, 43, 7, 5, 9, 4, 5, 7, 4, 6, 9, 8, 10, 4, 7, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [12, 6, 5, 9, 9, 6, 7, 9, 10, 9, 6, 3, 7, 10, 6, 6, 6, 4, 5, 5, 7, 3, 4, 9, 8, 8, 10, 544, 8, 4, 6, 4, 8, 7, 7, 6, 7, 5, 3, 205, 12, 9, 7, 4, 4, 9, 8, 4, 5, 4, 4, 108, 4, 6, 7, 7, 17, 8, 6, 387, 22, 7, 6, 6, 9, 6, 9, 4, 7, 6, 8, 6, 8, 6, 68, 4, 6, 8, 6, 9, 20, 7, 10, 11, 4, 5, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [12, 9, 8, 7, 10, 5, 5, 11, 20, 4, 195, 4, 9, 10, 9, 13, 4, 6, 9, 12, 4, 12, 93, 5, 4, 4, 8, 4, 4, 7, 9, 6, 6, 7, 8, 5, 7, 16, 7, 30, 64, 43, 4, 37, 4, 6, 7, 4, 12, 15, 8, 7, 4, 7, 7, 10, 8, 12, 5, 8, 4, 17, 5, 3, 10, 4, 113, 9, 14, 6, 4, 8, 8, 7, 8, 85, 4, 6, 5, 8, 5, 6, 7, 5, 9, 9, 25, 5, 3, 14, 9, 3, 65, 10, 3, 5, 8, 7, 9, 11, 8, 11, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [8, 4, 7, 10, 4, 7, 7, 4, 4, 6, 6, 13, 6, 6, 3, 13, 6, 9, 22, 9, 20, 132, 42, 6, 7, 12, 11, 12, 4, 7, 9, 8, 17, 4, 6, 6, 22, 5, 4, 4, 5, 4, 11, 4, 5, 7, 9, 7, 9, 8, 96, 11, 7, 5, 7, 8, 8, 17, 10, 59, 7, 4, 136, 7, 11, 9, 132, 10, 9, 23, 13, 8, 10, 6, 4, 5, 7, 7, 9, 11, 4, 9, 10, 6, 9, 7, 6, 15, 9, 6, 10, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [4, 7, 7, 5, 4, 8, 18, 4, 6, 6, 4, 8, 282, 3, 11, 8, 7, 5, 9, 13, 11, 6, 4, 8, 6, 9, 8, 9, 11, 6, 12, 11, 6, 4, 8, 7, 4, 12, 26, 4, 11, 9, 10, 4, 5, 10, 7, 8, 9, 12, 11, 47, 8, 11, 7, 5, 12, 8, 4, 56, 13, 9, 6, 4, 7, 4, 14, 4, 6, 12, 7, 10, 12, 13, 4, 7, 15, 9, 4, 7, 11, 5, 5, 5, 10, 7, 4, 10, 176, 4, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [10, 9, 9, 7, 5, 3, 11, 5, 6, 9, 4, 8, 9, 161, 3, 11, 4, 9, 9, 7, 13, 7, 6, 26, 7, 8, 71, 129, 7, 10, 9, 11, 7, 202, 11, 6, 6, 7, 11, 22, 470, 5, 7, 10, 4, 6, 10, 7, 9, 8, 9, 6, 11, 93, 9, 11, 8, 8, 266, 6, 6, 6, 84, 8, 6, 7, 12, 7, 7, 6, 8, 60, 10, 15, 4, 9, 6, 4, 7, 10, 6, 5, 90, 11, 9, 15]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [16, 5, 7, 7, 9, 8, 4, 7, 7, 8, 3, 5, 7, 10, 3, 6, 34, 8, 7, 4, 3, 7, 5, 10, 5, 13, 4, 6, 6, 10, 42, 12, 4, 38, 5, 8, 6, 3, 6, 116, 10, 7, 8, 5, 6, 5, 10, 25, 5, 7, 33, 9, 9, 8, 31, 3, 5, 10, 9, 31, 5, 9, 4, 11, 7, 6, 16, 14, 6, 8, 12, 9, 8, 9, 6, 11, 9, 5, 11, 36, 12, 11, 5, 8, 8, 9, 4, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [30, 10, 6, 5, 6, 67, 20, 5, 8, 4, 7, 8, 7, 12, 4, 5, 3, 6, 4, 28, 9, 5, 49, 6, 18, 16, 9, 410, 5, 6, 4, 4, 6, 3, 70, 53, 6, 8, 11, 3, 18, 7, 11, 10, 4, 132, 4, 13, 6, 10, 23, 8, 11, 6, 9, 6, 41, 10, 5, 12, 47, 31, 6, 4, 9, 342, 5, 6, 23, 253, 19, 9, 63, 8, 9, 6, 5, 11, 7, 10, 8, 5, 7, 297, 9, 5, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [8, 4, 8, 7, 5, 8, 8, 6, 6, 8, 8, 7, 4, 10, 11, 4, 8, 7, 4, 5, 5, 16, 5, 8, 10, 11, 6, 6, 3, 5, 6, 6, 4, 4, 4, 7, 6, 12, 7, 12, 6, 13, 12, 6, 6, 6, 4, 6, 10, 12, 4, 5, 6, 4, 310, 5, 6, 12, 4, 223, 15, 12, 5, 12, 23, 10, 7, 12, 13, 8, 9, 12, 11, 8, 4, 5, 94, 8, 7, 5, 5, 7, 6, 10, 90, 21, 7, 11, 8, 10, 5, 4, 6, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [15, 8, 6, 5, 5, 6, 4, 4, 5, 6, 8, 5, 3, 4, 10, 5, 13, 4, 11, 7, 10, 8, 159, 11, 11, 325, 6, 8, 4, 6, 10, 3, 4, 4, 6, 12, 4, 10, 6, 8, 6, 12, 7, 8, 7, 4, 30, 6, 4, 7, 115, 50, 5, 4, 12, 9, 7, 6, 9, 11, 8, 11, 6, 6, 5, 8, 21, 10, 109, 263, 4, 7, 8, 4, 6, 12, 8, 9, 4, 15, 5, 4, 4, 5, 8, 5, 4, 13, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [3, 7, 9, 5, 6, 8, 7, 4, 8, 4, 4, 6, 10, 513, 333, 5, 4, 13, 4, 4, 4, 7, 30, 5, 7, 10, 4, 7, 6, 4, 4, 13, 10, 7, 8, 5, 20, 26, 8, 4, 4, 6, 4, 4, 12, 196, 3, 227, 4, 58, 8, 11, 4, 5, 4, 7, 10, 10, 5, 12, 6, 7, 12, 10, 7, 5, 8, 7, 5, 10, 9, 6]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [6, 7, 12, 13, 3, 6, 9, 5, 4, 4, 4, 4, 7, 5, 8, 5, 84, 4, 11, 16, 4, 10, 63, 138, 9, 23, 8, 4, 8, 8, 3, 8, 4, 4, 62, 8, 8, 9, 5, 7, 6, 8, 6, 6, 73, 6, 8, 4, 5, 6, 4, 4, 7, 116, 7, 7, 5, 7, 16, 15, 4, 6, 7, 14, 8, 7, 6, 5, 6, 6, 7, 6, 11, 7, 42, 8, 5, 10, 6, 12, 8, 6, 6, 12, 4, 4, 56, 4, 8, 6, 7, 3]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [21, 8, 7, 7, 7, 6, 5, 5, 3, 6, 11, 4, 5, 10, 4, 8, 6, 12, 3, 9, 5, 5, 89, 382, 8, 12, 25, 6, 439, 4, 10, 4, 10, 6, 3, 5, 278, 11, 451, 3, 8, 4, 7, 5, 12, 4, 16, 6, 10, 4, 4, 7, 4, 10, 4, 28, 11, 9, 8, 9, 9, 9, 10, 10, 7, 9, 15, 8, 6, 8, 13, 8, 6, 8, 4, 10, 5, 6, 6, 10, 9, 10, 6, 7, 7, 8, 7, 8, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [8, 7, 12, 6, 7, 7, 9, 4, 7, 6, 10, 5, 4, 7, 6, 7, 8, 41, 5, 4, 6, 4, 12, 7, 7, 40, 9, 5, 11, 7, 9, 339, 5, 7, 5, 5, 8, 5, 7, 13, 3, 8, 6, 7, 5, 4, 13, 7, 9, 8, 16, 10, 11, 4, 6, 4, 8, 6, 107, 7, 7, 6, 5, 4, 20, 3, 3, 5, 7, 4, 4, 10, 5, 5, 7, 9, 4, 7, 7, 7, 9, 4, 12, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [5, 5, 11, 6, 7, 5, 8, 4, 11, 7, 10, 6, 8, 3, 24, 10, 4, 357, 8, 4, 9, 9, 4, 11, 7, 4, 5, 11, 8, 8, 5, 6, 11, 4, 9, 5, 8, 7, 16, 8, 148, 11, 6, 7, 9, 9, 9, 9, 27, 6, 4, 9, 9, 7, 22, 8, 10, 7, 17, 10, 7, 14, 6, 7, 8, 5, 5, 34, 7, 10, 7, 7, 3, 10, 10, 11, 11, 6, 11, 8, 5, 8, 8, 7, 5, 7, 10, 5, 8, 10, 11, 7, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [6, 5, 7, 6, 8, 4, 7, 5, 11, 4, 10, 9, 4, 8, 11, 8, 5, 4, 14, 4, 13, 14, 49, 27, 8, 6, 337, 23, 6, 10, 6, 6, 6, 8, 12, 3, 68, 6, 91, 14, 9, 6, 83, 7, 7, 5, 6, 7, 6, 4, 6, 6, 27, 10, 11, 10, 9, 5, 5, 8, 8, 6, 10, 8, 10, 4, 7, 6, 307, 4, 6, 5, 5, 5, 10, 7, 6, 10, 7, 13, 9, 12, 9, 10, 8, 12, 5, 15, 29, 9, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [21, 12, 10, 9, 12, 11, 6, 4, 4, 9, 8, 36, 9, 6, 11, 103, 11, 10, 5, 10, 4, 12, 9, 6, 10, 5, 12, 6, 10, 9, 4, 7, 13, 10, 6, 15, 9, 6, 10, 14, 10, 6, 10, 7, 8, 43, 8, 4, 20, 13, 10, 3, 13, 5, 13, 10, 28, 9, 7, 7, 9, 10, 10, 17, 6, 7, 9, 6, 9, 8, 4, 9, 11, 11, 4, 350, 11, 10, 11, 5, 8, 7, 7, 10, 7, 13, 14, 10, 8, 5, 9, 5, 10, 41]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [11, 6, 5, 8, 8, 6, 7, 4, 8, 6, 11, 7, 9, 11, 5, 9, 6, 4, 7, 7, 3, 5, 4, 9, 4, 20, 13, 9, 5, 5, 4, 9, 4, 11, 7, 3, 53, 14, 5, 16, 7, 298, 7, 6, 8, 4, 13, 14, 4, 6, 37, 8, 119, 5, 9, 6, 10, 10, 6, 4, 6, 6, 7, 9, 7, 8, 8, 5, 6, 8, 4, 6, 111, 14, 7, 10, 38, 7, 8, 6, 6, 5, 5, 6, 8, 140, 8, 40, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [6, 8, 10, 6, 5, 4, 4, 8, 3, 5, 8, 6, 7, 6, 8, 4, 3, 8, 4, 5, 4, 4, 3, 4, 15, 6, 13, 11, 8, 8, 4, 8, 10, 10, 8, 8, 5, 4, 6, 23, 6, 8, 10, 8, 7, 6, 4, 8, 14, 7, 4, 38, 8, 13, 6, 4, 5, 9, 7, 4, 8, 9, 4, 3, 8, 9, 9, 7, 5, 7, 7, 7, 48, 9, 3, 7, 10, 5, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [5, 6, 10, 6, 5, 10, 9, 9, 6, 9, 8, 5, 8, 8, 8, 11, 10, 11, 7, 8, 8, 9, 3, 4, 11, 14, 9, 7, 4, 225, 11, 8, 8, 15, 7, 4, 7, 6, 9, 14, 8, 5, 7, 4, 5, 335, 81, 8, 9, 16, 7, 11, 6, 144, 7, 4, 7, 7, 8, 7, 9, 5, 7, 7, 209, 7, 9, 11, 5, 33, 10, 7, 9, 17, 9, 9, 7, 10, 8, 6, 7, 9, 6, 5, 9, 7, 5, 11, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [12, 12, 3, 10, 4, 5, 7, 7, 6, 7, 8, 5, 5, 5, 10, 6, 4, 8, 6, 7, 3, 9, 4, 7, 8, 30, 8, 71, 9, 6, 8, 11, 13, 4, 10, 5, 10, 9, 4, 8, 5, 10, 4, 9, 5, 13, 7, 4, 9, 7, 7, 10, 9, 10, 7, 11, 4, 10, 9, 6, 11, 6, 8, 9, 8, 11, 9, 6, 4, 8, 8, 5, 81, 6, 8, 11, 4, 8, 12, 9, 7, 6, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [7, 7, 7, 7, 5, 4, 6, 11, 6, 10, 12, 5, 11, 16, 7, 8, 6, 9, 8, 14, 9, 5, 9, 8, 5, 11, 7, 10, 129, 5, 5, 8, 7, 6, 12, 4, 11, 6, 9, 9, 6, 264, 5, 6, 10, 5, 9, 4, 12, 317, 6, 11, 7, 12, 9, 6, 7, 14, 7, 9, 10, 13, 7, 4, 8, 5, 5, 6, 10, 7, 6, 8, 6, 6, 9, 68, 5, 6, 11, 10, 11, 15, 52, 8, 8, 8, 8, 9, 6, 8, 5, 6, 11, 12, 6, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [6, 6, 4, 7, 4, 19, 6, 9, 5, 9, 4, 4, 4, 9, 5, 8, 4, 9, 8, 6, 28, 8, 45, 10, 6, 4, 66, 3, 5, 8, 4, 9, 12, 6, 6, 6, 9, 11, 7, 11, 6, 8, 13, 4, 10, 14, 36, 9, 14, 7, 9, 11, 8, 8, 8, 20, 32, 10, 5, 10, 175, 12, 8, 7, 8, 5, 6, 8, 9, 11, 43, 6, 5, 316, 33, 5, 6, 4, 13, 9, 117, 8, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [6, 8, 6, 7, 9, 5, 5, 8, 6, 11, 8, 7, 6, 8, 5, 6, 5, 13, 8, 3, 5, 8, 9, 10, 7, 7, 6, 8, 8, 9, 7, 4, 7, 14, 48, 7, 6, 10, 7, 4, 9, 13, 5, 8, 4, 8, 6, 4, 4, 9, 13, 5, 11, 6, 9, 4, 8, 5, 9, 11, 6, 5, 10, 5, 5, 8, 14, 16, 9, 4, 8, 6, 7, 5, 10, 4, 6, 6, 12, 10, 4, 7, 10, 9, 4, 9, 9, 8, 6, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [9, 7, 8, 5, 7, 11, 4, 5, 3, 7, 5, 3, 5, 8, 5, 6, 4, 6, 5, 4, 9, 103, 8, 5, 4, 8, 4, 5, 3, 95, 545, 6, 4, 6, 18, 4, 6, 4, 6, 3, 8, 56, 4, 8, 12, 6, 2, 4, 4, 36, 5, 5, 5, 5, 8, 584, 3, 4, 15, 7, 10, 8, 6, 8, 5, 7, 7, 8, 4, 9, 8, 5, 7, 8, 4, 9, 4, 5, 12, 8, 9, 8, 7, 5, 8, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [11, 5, 9, 8, 11, 4, 9, 11, 9, 8, 7, 3, 11, 6, 5, 5, 47, 8, 8, 15, 4, 6, 8, 7, 11, 13, 4, 55, 11, 7, 8, 6, 10, 344, 12, 9, 11, 9, 6, 14, 9, 11, 6, 9, 16, 6, 8, 9, 6, 8, 6, 6, 9, 10, 11, 7, 10, 254, 12, 31, 10, 9, 12, 10, 10, 7, 7, 166, 5, 8, 7, 3, 9, 463, 9, 9, 6, 11, 10, 15, 13, 9, 6, 11, 7, 6, 4, 7, 9, 6, 22, 13, 7, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [9, 9, 4, 3, 5, 7, 4, 5, 11, 8, 234, 4, 13, 7, 4, 9, 8, 399, 8, 5, 5, 4, 3, 346, 6, 6, 9, 4, 9, 6, 4, 5, 8, 6, 15, 6, 6, 8, 5, 10, 5, 9, 4, 4, 8, 11, 7, 6, 7, 9, 11, 8, 6, 4, 8, 5, 9, 5, 6, 5, 7, 14, 7, 32, 5, 4, 4, 4, 4, 9, 9, 11, 4, 21, 8, 16, 7, 4, 4, 8, 3, 10, 8, 6, 6, 9, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [13, 3, 8, 3, 12, 6, 7, 8, 5, 6, 6, 6, 6, 4, 361, 6, 4, 13, 9, 9, 7, 6, 374, 8, 10, 6, 9, 8, 15, 8, 10, 8, 12, 147, 11, 10, 8, 74, 9, 4, 6, 12, 6, 8, 4, 4, 6, 5, 6, 4, 4, 12, 8, 10, 7, 8, 11, 3, 4, 7, 12, 5, 27, 5, 18, 8, 5, 4, 4, 4, 9, 8, 4, 181, 12, 12, 4, 7, 8, 10, 8, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [4, 13, 8, 9, 11, 7, 4, 8, 11, 8, 6, 7, 8, 6, 8, 5, 22, 8, 14, 7, 4, 351, 10, 18, 12, 9, 4, 13, 11, 19, 53, 12, 14, 5, 13, 13, 8, 6, 4, 17, 17, 8, 9, 12, 9, 12, 7, 4, 116, 16, 16, 9, 11, 6, 20, 12, 12, 13, 5, 10, 24, 7, 12, 11, 10, 8, 428, 18, 9, 19, 42, 10, 5, 6, 13, 12, 7, 12, 5, 18, 10, 8, 12, 9, 8, 6, 3, 7, 5, 4, 9, 8, 3, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [14, 7, 6, 7, 5, 7, 6, 8, 5, 10, 6, 12, 12, 6, 10, 15, 6, 3, 5, 6, 4, 5, 5, 10, 4, 74, 13, 28, 92, 6, 9, 9, 3, 6, 34, 5, 6, 123, 13, 8, 75, 6, 12, 4, 30, 20, 4, 8, 10, 28, 7, 8, 6, 55, 12, 8, 9, 4, 29, 7, 7, 6, 465, 6, 4, 4, 33, 5, 7, 6, 8, 9, 7, 8, 6, 5, 6, 7, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [10, 8, 8, 6, 8, 4, 7, 6, 8, 6, 9, 7, 225, 7, 8, 87, 10, 11, 4, 6, 7, 6, 10, 5, 11, 16, 8, 6, 8, 25, 8, 22, 8, 5, 131, 5, 7, 6, 9, 12, 6, 9, 8, 10, 8, 5, 8, 9, 7, 9, 13, 16, 4, 10, 6, 44, 5, 13, 4, 7, 4, 8, 6, 9, 6, 12, 9, 6, 7, 8, 8, 30, 7, 4, 9, 9, 8, 7, 8, 8, 8, 4, 9, 9, 4, 9, 11, 10, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [12, 11, 6, 6, 5, 8, 4, 7, 6, 9, 21, 11, 13, 10, 7, 11, 40, 8, 16, 7, 5, 3, 446, 9, 15, 6, 4, 6, 213, 6, 8, 9, 8, 5, 6, 6, 8, 6, 12, 7, 9, 6, 8, 9, 7, 129, 6, 12, 7, 6, 27, 5, 15, 5, 6, 5, 14, 8, 8, 18, 6, 12, 12, 12, 13, 6, 5, 12, 15, 11, 6, 6, 3, 7, 6, 6, 10, 9, 4, 13, 11, 184, 10, 5, 13, 10, 7, 9, 6, 6, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [7, 13, 16, 5, 4, 12, 7, 12, 7, 4, 15, 6, 3, 4, 275, 8, 6, 9, 5, 6, 6, 11, 13, 8, 13, 531, 8, 7, 15, 7, 11, 8, 11, 6, 9, 11, 9, 12, 8, 10, 7, 11, 14, 8, 12, 17, 12, 5, 11, 10, 8, 5, 12, 9, 13, 8, 10, 13, 19, 81, 10, 43, 10, 9, 6, 4, 8, 8, 7, 11, 4, 8, 15, 9, 10, 13, 5, 10, 12, 15, 7, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [4, 8, 6, 10, 7, 7, 7, 7, 8, 9, 12, 4, 11, 6, 8, 8, 5, 8, 6, 25, 12, 5, 32, 10, 7, 6, 8, 4, 8, 6, 8, 322, 11, 8, 6, 6, 9, 8, 79, 7, 7, 6, 9, 5, 5, 6, 8, 11, 8, 26, 7, 11, 11, 5, 11, 11, 96, 9, 10, 8, 9, 12, 7, 6, 15, 7, 5, 355, 4, 8, 10, 10, 14, 8, 4, 10, 20, 10, 5, 6, 17, 8, 6, 6, 9, 12, 9, 8, 8, 9, 4, 10, 9, 11, 10, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [10, 11, 6, 7, 7, 8, 9, 7, 8, 78, 7, 7, 8, 11, 7, 4, 17, 7, 9, 11, 17, 7, 9, 9, 185, 8, 17, 9, 15, 6, 20, 7, 10, 21, 6, 8, 8, 67, 10, 4, 11, 8, 10, 9, 10, 9, 4, 13, 9, 6, 15, 7, 7, 6, 9, 8, 14, 7, 9, 9, 239, 11, 8, 7, 8, 10, 5, 9, 4, 9, 10, 6, 10, 65, 6, 8, 5, 10, 9, 9, 9, 10, 9, 9, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [11, 11, 5, 4, 9, 4, 9, 13, 9, 9, 4, 5, 9, 10, 10, 102, 8, 8, 9, 14, 8, 154, 7, 5, 12, 11, 12, 7, 10, 4, 7, 8, 11, 7, 11, 7, 7, 6, 4, 7, 7, 7, 7, 5, 6, 7, 8, 6, 9, 5, 17, 6, 8, 40, 6, 11, 8, 9, 8, 5, 7, 12, 9, 7, 6, 8, 6, 4, 10, 6, 14, 14, 4, 8, 8, 8, 9, 11, 7, 11, 4, 7, 9, 15, 9, 10, 9, 6, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [3, 10, 6, 4, 10, 10, 9, 10, 8, 19, 10, 319, 8, 13, 12, 9, 5, 9, 14, 11, 11, 9, 546, 10, 10, 22, 12, 43, 5, 15, 9, 9, 4, 134, 532, 9, 7, 11, 8, 11, 10, 4, 8, 9, 11, 9, 10, 10, 9, 9, 6, 12, 9, 7, 12, 13, 9, 12, 6, 3, 8, 14, 10, 10, 10, 10, 8, 9, 5, 9, 6, 122, 7, 23, 10, 21, 10, 11, 4, 12, 254, 7, 7, 10, 6, 19, 8, 60, 47, 9, 9, 10, 10, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [3, 5, 6, 17, 9, 5, 4, 5, 6, 4, 4, 5, 6, 9, 5, 10, 2, 10, 6, 5, 4, 6, 6, 6, 4, 289, 6, 10, 4, 4, 6, 4, 6, 8, 4, 7, 8, 6, 5, 8, 8, 6, 7, 6, 4, 5, 5, 8, 10, 7, 6, 7, 8, 9, 2, 5, 4, 4, 11, 33, 180, 5, 7, 6, 12, 6, 4, 8, 7, 12, 383, 78, 5, 4, 15, 5, 8, 6, 4, 6, 8, 8, 9, 3, 7, 5, 4, 52, 4, 56, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [4, 10, 7, 8, 10, 6, 11, 4, 9, 8, 13, 7, 24, 26, 9, 11, 7, 6, 9, 6, 6, 6, 3, 11, 13, 22, 15, 5, 36, 10, 9, 12, 6, 12, 11, 9, 7, 8, 8, 6, 10, 13, 9, 4, 11, 10, 10, 11, 8, 175, 9, 13, 7, 9, 9, 142, 11, 5, 6, 176, 7, 9, 9, 10, 7, 7, 14, 9, 7, 10, 11, 8, 7, 11, 10, 10, 8, 5, 115, 9, 10, 11, 19, 114, 7, 9, 3, 7, 10, 6, 7, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [7, 6, 7, 6, 6, 53, 10, 9, 10, 8, 10, 11, 8, 10, 6, 8, 21, 7, 10, 6, 5, 10, 484, 4, 7, 10, 14, 9, 7, 9, 18, 12, 12, 6, 10, 3, 11, 4, 4, 3, 5, 9, 14, 10, 4, 16, 6, 11, 4, 4, 9, 9, 7, 7, 5, 10, 10, 9, 10, 6, 8, 10, 8, 4, 8, 6, 15, 10, 8, 7, 36, 391, 8, 13, 11, 11, 12, 11, 9, 7, 9, 7, 4, 8, 8, 4, 33, 6, 10, 4, 11, 6, 12, 7, 16, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [3, 10, 15, 10, 5, 5, 8, 16, 8, 4, 12, 6, 14, 5, 12, 6, 12, 8, 6, 10, 10, 8, 15, 179, 19, 3, 3, 7, 8, 5, 7, 9, 8, 7, 12, 21, 8, 17, 16, 4, 8, 4, 9, 11, 52, 18, 5, 5, 10, 4, 7, 9, 7, 5, 10, 9, 145, 8, 9, 3, 10, 6, 11, 4, 9, 12, 5, 12, 5, 6, 8, 37, 8, 8, 16, 9, 8, 11, 27, 21, 188, 10, 10, 55, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [4, 7, 12, 4, 12, 4, 10, 9, 5, 6, 6, 9, 16, 10, 13, 86, 13, 9, 5, 11, 153, 8, 4, 12, 12, 9, 8, 11, 4, 8, 53, 15, 10, 15, 11, 10, 14, 14, 10, 18, 6, 153, 9, 6, 15, 8, 12, 6, 10, 9, 12, 11, 8, 7, 27, 4, 10, 8, 8, 6, 14, 11, 11, 10, 549, 7, 9, 130, 10, 259, 15, 10, 9, 3, 11, 5, 327, 10, 9, 13, 10, 12, 9, 9, 9, 14, 9, 5, 8, 11, 9, 15, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [12, 4, 9, 4, 11, 4, 9, 5, 12, 7, 9, 9, 6, 5, 12, 7, 7, 52, 13, 10, 10, 6, 13, 7, 9, 7, 348, 8, 8, 4, 13, 101, 10, 6, 10, 8, 13, 15, 14, 5, 15, 9, 9, 18, 7, 10, 10, 386, 11, 7, 10, 7, 26, 9, 8, 10, 9, 12, 10, 11, 8, 12, 40, 5, 9, 4, 6, 12, 7, 36, 9, 9, 6, 10, 11, 8, 11, 8, 7, 7, 267, 44, 9, 8, 12, 8, 6, 7, 8, 7, 15, 8, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [8, 9, 11, 8, 3, 7, 11, 9, 15, 5, 5, 8, 13, 368, 7, 11, 10, 7, 4, 14, 9, 10, 7, 8, 209, 10, 9, 7, 12, 5, 14, 8, 3, 8, 11, 6, 73, 11, 23, 7, 6, 4, 4, 7, 9, 8, 7, 13, 15, 175, 18, 9, 4, 11, 9, 11, 12, 12, 11, 9, 10, 10, 10, 7, 6, 11, 10, 17, 11, 5, 10, 4, 5, 10, 38, 9, 7, 7, 5, 12, 7, 9, 4, 5, 37]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [11, 9, 3, 4, 13, 4, 14, 8, 11, 7, 11, 12, 13, 361, 4, 10, 12, 12, 11, 10, 13, 26, 6, 11, 5, 16, 12, 12, 9, 7, 10, 48, 20, 10, 4, 8, 14, 9, 12, 6, 15, 3, 9, 6, 7, 10, 9, 10, 10, 5, 7, 9, 15, 32, 14, 22, 15, 8, 11, 13, 7, 13, 17, 10, 36, 12, 11, 4, 12, 12, 11, 10, 36, 8, 13, 7, 4, 11, 12, 12, 10, 13, 16, 12, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [4, 7, 8, 14, 4, 11, 5, 8, 7, 11, 9, 13, 4, 5, 3, 9, 13, 9, 12, 12, 13, 4, 6, 3, 10, 6, 13, 361, 7, 13, 4, 5, 12, 8, 5, 21, 7, 11, 7, 7, 42, 7, 5, 501, 8, 22, 12, 8, 6, 10, 11, 16, 11, 6, 11, 50, 13, 10, 5, 5, 7, 9, 12, 12, 8, 10, 3, 13, 5, 7, 4, 5, 10, 6, 9, 6, 8, 10, 5, 20, 9, 12, 11, 5, 6, 12, 10, 12, 5, 49, 10, 10, 11, 9, 7, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [18, 6, 9, 14, 4, 4, 9, 8, 4, 5, 6, 12, 5, 392, 8, 7, 8, 5, 5, 11, 10, 11, 11, 169, 6, 7, 10, 40, 12, 10, 6, 37, 4, 7, 8, 6, 10, 7, 115, 12, 9, 10, 26, 6, 6, 9, 10, 5, 10, 7, 8, 12, 9, 7, 8, 6, 7, 9, 7, 6, 10, 7, 12, 6, 13, 8, 6, 149, 6, 3, 8, 7]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [4, 8, 3, 4, 4, 7, 5, 5, 5, 5, 4, 4, 6, 7, 9, 4, 3, 8, 4, 8, 5, 6, 4, 4, 6, 7, 5, 6, 7, 4, 68, 3, 63, 6, 5, 8, 12, 7, 5, 103, 5, 7, 4, 6, 5, 5, 11, 4, 7, 340, 4, 6, 8, 5, 4, 13, 9, 5, 6, 7, 44, 4, 10, 5, 3, 8, 11, 5, 185, 4, 6, 5, 5]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [6, 14, 4, 4, 4, 7, 13, 4, 7, 13, 4, 4, 4, 14, 5, 6, 16, 6, 13, 11, 4, 51, 12, 4, 10, 12, 11, 5, 15, 5, 13, 12, 4, 11, 4, 269, 266, 11, 14, 8, 5, 295, 12, 8, 5, 5, 7, 11, 5, 12, 10, 14, 12, 5, 6, 11, 11, 15, 7, 10, 5, 10, 13, 11, 42, 13, 7, 14, 22, 13, 6, 5, 7, 7, 12, 5, 13, 157, 166, 10, 13, 12, 7, 4, 244, 46]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [7, 10, 4, 6, 12, 6, 6, 4, 11, 7, 6, 8, 10, 5, 10, 8, 6, 6, 5, 6, 7, 12, 11, 11, 68, 9, 9, 10, 10, 10, 9, 6, 6, 188, 80, 8, 5, 12, 11, 7, 11, 7, 13, 3, 7, 6, 8, 5, 15, 5, 13, 10, 14, 10, 9, 6, 10, 10, 7, 6, 7, 9, 11, 12, 12, 11, 9, 5, 5, 4, 8, 11, 157, 9, 6, 12, 11, 12, 8, 6, 13, 11, 76, 12, 3, 12, 277, 5, 8, 10, 13, 6, 6, 5, 8, 10, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [4, 8, 6, 4, 4, 4, 7, 9, 6, 6, 9, 6, 11, 7, 13, 11, 5, 7, 8, 11, 14, 7, 6, 12, 15, 9, 12, 4, 181, 23, 385, 6, 9, 9, 7, 11, 9, 12, 6, 8, 8, 8, 9, 73, 12, 30, 8, 9, 15, 6, 327, 14, 11, 5, 7, 11, 11, 10, 26, 13, 19, 6, 7, 8, 7, 10, 9, 9, 8, 14, 9, 12, 8, 7, 8, 7, 9, 8, 7, 6, 18, 7, 7, 10, 21, 7, 3, 16, 13, 8, 10, 13, 11, 7, 10, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [15, 8, 6, 11, 9, 5, 7, 6, 6, 8, 6, 12, 6, 9, 10, 10, 11, 43, 6, 12, 11, 7, 11, 15, 9, 75, 29, 10, 10, 9, 8, 9, 37, 9, 14, 164, 5, 6, 15, 12, 11, 11, 8, 13, 7, 9, 8, 6, 8, 8, 8, 6, 9, 5, 8, 10, 13, 9, 73, 6, 8, 6, 6, 10, 8, 10, 7, 11, 34, 11, 11, 7, 11, 11, 6, 8, 6, 8, 11, 6, 4, 7, 6, 8, 22, 7, 8, 11, 326, 12, 9, 6, 9, 7, 12, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [4, 8, 10, 13, 10, 4, 12, 8, 8, 7, 13, 12, 8, 9, 6, 9, 9, 4, 14, 11, 11, 13, 13, 8, 6, 12, 9, 4, 12, 7, 11, 4, 10, 9, 6, 13, 8, 10, 14, 11, 12, 8, 7, 4, 10, 4, 9, 6, 16, 7, 12, 6, 13, 7, 5, 5, 12, 18, 6, 7, 9, 8, 16, 5, 8, 8, 11, 8, 12, 13, 9, 7, 11, 4, 29, 6, 6, 12, 8, 11, 27, 9, 14, 11, 9, 12, 10, 7, 7, 19, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [9, 4, 6, 6, 9, 9, 7, 9, 6, 10, 8, 6, 4, 6, 8, 11, 5, 8, 9, 11, 6, 7, 42, 3, 8, 6, 6, 13, 12, 47, 11, 4, 5, 14, 157, 7, 9, 8, 8, 7, 6, 8, 8, 7, 6, 5, 5, 13, 3, 9, 14, 9, 6, 7, 7, 42, 295, 4, 10, 11, 8, 7, 10, 6, 7, 8, 18, 8, 5, 11, 5, 52, 7, 2, 9, 4, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 11, 13, 14, 6, 274, 9, 6, 7, 5, 6, 16, 9, 5, 8, 9, 4, 6, 8, 9, 5, 6, 4, 15, 4, 4, 4, 4, 10, 4, 402, 116, 6, 12, 9, 7, 4, 5, 5, 13, 12, 4, 5, 4, 11, 4, 4, 10, 16, 19, 11, 20, 14, 10, 11, 8, 9, 6, 10, 4, 14, 5, 6, 16, 13, 8, 224, 10, 5, 11, 12, 4, 12, 37, 10, 11, 11, 16, 12, 6, 18, 9, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [10, 4, 9, 4, 4, 7, 7, 6, 5, 4, 4, 6, 5, 7, 11, 4, 4, 4, 4, 7, 8, 6, 10, 10, 8, 4, 3, 10, 11, 11, 4, 6, 4, 7, 7, 6, 10, 7, 6, 49, 8, 11, 4, 6, 6, 7, 7, 4, 7, 42, 8, 7, 5, 16, 10, 10, 5, 5, 6, 7, 7, 12, 7, 7, 7, 5, 9, 10, 3, 6, 95]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [12, 8, 5, 4, 4, 4, 8, 5, 7, 4, 6, 8, 6, 23, 8, 4, 4, 4, 5, 3, 8, 7, 7, 279, 27, 7, 6, 10, 11, 495, 8, 10, 8, 3, 6, 6, 6, 23, 8, 8, 6, 6, 8, 9, 5, 7, 6, 11, 13, 28, 7, 9, 11, 5, 25, 75, 8, 5, 16, 7, 5, 7, 4, 5, 23, 32, 154, 5, 5, 10, 337, 4, 7, 12, 8, 14, 9, 8, 11, 7, 6, 7, 4, 8, 3]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [27, 16, 14, 5, 8, 4, 11, 9, 8, 4, 241, 7, 7, 4, 14, 9, 11, 6, 11, 433, 7, 4, 7, 15, 9, 7, 13, 6, 8, 4, 11, 10, 7, 5, 6, 5, 6, 6, 8, 8, 4, 6, 10, 45, 13, 7, 6, 4, 8, 6, 4, 5, 178, 11, 6, 6, 9, 16, 7, 8, 5, 216, 4, 6, 6, 29, 12, 7, 16, 7, 8, 19, 9, 8, 4, 5, 7, 14, 16, 6, 4, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [6, 11, 3, 4, 4, 7, 3, 6, 3, 6, 7, 4, 5, 7, 9, 8, 9, 4, 9, 7, 12, 10, 5, 10, 10, 4, 6, 12, 7, 8, 6, 10, 3, 6, 6, 3, 8, 10, 9, 33, 36, 9, 11, 8, 4, 12, 4, 8, 122, 7, 9, 3, 3, 11, 7, 9, 13, 10, 3, 12, 11, 10, 10, 8, 12, 65, 5, 4, 16, 9, 11, 8, 4, 12, 12, 11, 9, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [15, 9, 7, 12, 12, 13, 8, 13, 8, 6, 13, 4, 14, 10, 9, 4, 8, 15, 8, 4, 10, 8, 7, 11, 196, 12, 12, 9, 11, 9, 13, 8, 8, 12, 7, 8, 3, 6, 8, 78, 4, 14, 12, 10, 11, 6, 13, 109, 13, 13, 8, 10, 8, 10, 10, 12, 13, 6, 13, 15, 11, 10, 12, 7, 6, 14, 9, 12, 13, 16, 7, 10, 6, 13, 16, 12, 8, 13, 11, 11, 12, 4, 14, 11, 11, 12, 13, 9, 14, 12, 8, 8, 15, 13, 6, 10, 14, 13, 11, 9, 24, 162]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 6, 4, 11, 8, 7, 10, 14, 30, 4, 4, 9, 5, 9, 3, 5, 6, 4, 7, 6, 12, 4, 6, 7, 5, 12, 5, 6, 10, 12, 11, 6, 10, 8, 4, 13, 9, 11, 8, 4, 7, 5, 13, 12, 16, 12, 367, 6, 6, 4, 5, 7, 14, 7, 9, 202, 5, 6, 10, 11, 9, 12, 13, 6, 12, 8, 11, 4, 5, 6, 7, 9, 4, 15, 9, 5, 10, 10, 10, 11, 14, 15, 8, 6, 9, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 9, 11, 4, 6, 8, 10, 12, 9, 12, 8, 7, 12, 292, 12, 12, 11, 4, 5, 11, 4, 4, 13, 14, 9, 56, 5, 6, 13, 22, 13, 13, 8, 6, 11, 10, 8, 4, 11, 10, 5, 5, 11, 5, 6, 15, 459, 4, 7, 4, 61, 5, 5, 17, 16, 6, 166, 14, 10, 9, 9, 4, 12, 15, 4, 7, 6, 7, 6, 9, 7, 9, 8, 8, 6, 8, 6, 13, 7, 15, 5, 4, 89, 13, 5, 6, 8, 10, 7, 13, 5, 6, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [6, 8, 4, 4, 7, 9, 11, 9, 4, 7, 4, 6, 4, 8, 9, 4, 7, 9, 10, 10, 4, 9, 11, 7, 4, 4, 7, 6, 334, 25, 10, 11, 4, 11, 11, 6, 9, 8, 7, 6, 5, 6, 6, 7, 5, 4, 11, 8, 8, 8, 12, 4, 8, 153, 55, 36, 8, 8, 4, 9, 4, 7, 9, 11, 7, 9, 20, 10, 4, 9, 11, 18, 12, 8, 10, 246, 7, 4, 8, 6, 9, 8, 8, 6, 5, 10, 9, 11, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [9, 15, 6, 9, 14, 8, 7, 7, 11, 47, 8, 5, 11, 8, 14, 7, 22, 6, 104, 8, 7, 14, 11, 6, 17, 39, 273, 4, 15, 10, 8, 351, 14, 11, 7, 14, 8, 6, 10, 9, 9, 11, 9, 6, 10, 67, 7, 4, 8, 4, 8, 12, 6, 7, 4, 11, 8, 11, 11, 9, 11, 279, 11, 6, 12, 14, 8, 12, 6, 14, 9, 11, 11, 18, 8, 10, 11, 11, 6, 9, 9, 8, 4, 8, 11, 6, 10, 13, 6, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [14, 10, 10, 6, 6, 11, 9, 10, 11, 6, 10, 9, 9, 10, 9, 5, 9, 7, 31, 10, 14, 12, 19, 8, 7, 9, 6, 8, 10, 6, 8, 16, 198, 8, 9, 8, 11, 13, 18, 11, 24, 7, 20, 9, 11, 16, 12, 9, 15, 11, 29, 14, 20, 9, 10, 8, 10, 9, 89, 12, 8, 9, 11, 10, 11, 8, 3, 8, 6, 12, 9, 7, 5, 8, 66, 8, 11, 12, 7, 9, 6, 11, 12, 10, 6, 6, 36, 11, 10, 6, 8, 37, 9, 12, 10, 10, 6, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [10, 5, 5, 5, 9, 6, 7, 6, 6, 6, 10, 19, 9, 6, 13, 5, 7, 10, 9, 7, 10, 8, 8, 6, 6, 4, 10, 6, 6, 9, 8, 12, 8, 9, 7, 7, 8, 11, 8, 7, 8, 11, 10, 9, 13, 4, 7, 12, 4, 156, 9, 7, 9, 13, 7, 5, 9, 8, 11, 9, 9, 10, 8, 8, 7, 7, 36, 9, 7, 9, 16, 6, 28, 44, 90, 9, 7, 14, 8, 13, 9, 7, 8, 4, 5, 9, 8, 7, 7, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [4, 10, 7, 4, 4, 10, 7, 20, 3, 6, 10, 8, 7, 10, 4, 17, 4, 10, 8, 15, 6, 9, 7, 4, 6, 10, 5, 32, 4, 7, 9, 7, 18, 12, 9, 8, 9, 67, 10, 11, 4, 2, 361, 19, 8, 13, 6, 4, 11, 23, 6, 4, 7, 9, 6, 21, 17, 17, 7, 6, 4, 9, 7, 9, 9, 21, 15, 11, 6, 4, 18, 5, 4, 7, 36, 10, 9, 4, 7, 8, 9, 4, 6, 12, 7, 11, 10, 3, 11, 11, 8, 10, 20, 5, 4, 17, 8, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 9, 9, 7, 6, 9, 9, 7, 182, 4, 7, 11, 6, 4, 9, 7, 6, 41, 9, 8, 10, 4, 4, 9, 4, 7, 4, 9, 10, 9, 16, 13, 13, 10, 9, 7, 5, 8, 333, 12, 10, 11, 5, 5, 8, 6, 43, 10, 20, 8, 10, 4, 9, 7, 14, 8, 8, 8, 9, 9, 4, 9, 11, 8]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [17, 4, 11, 9, 7, 14, 11, 10, 4, 17, 11, 11, 90, 7, 9, 4, 9, 16, 13, 10, 10, 7, 10, 7, 8, 11, 15, 7, 12, 20, 8, 8, 15, 9, 10, 14, 21, 3, 16, 14, 7, 9, 8, 9, 7, 46, 10, 6, 8, 10, 11, 15, 16, 13, 237, 333, 9, 14, 10, 6, 7, 6, 11, 46, 11, 14, 8, 47, 12, 12, 25, 11, 166, 5, 9, 17, 17, 7, 9, 30, 7, 11, 12, 11, 15, 14, 4, 5, 8, 9, 9, 10, 15, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [4, 10, 28, 8, 4, 12, 6, 4, 9, 9, 8, 12, 7, 14, 6, 14, 9, 8, 7, 16, 7, 16, 8, 10, 11, 6, 7, 10, 9, 422, 55, 8, 11, 10, 10, 11, 9, 8, 8, 16, 7, 17, 8, 18, 8, 125, 9, 6, 7, 8, 17, 19, 8, 7, 4, 16, 4, 12, 14, 6, 211, 15, 7, 13, 8, 10, 8, 6, 12, 26, 5, 8, 47, 11, 9, 9, 8, 10, 6, 11, 10, 12, 3, 16, 13, 9, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [22, 4, 10, 10, 11, 14, 7, 12, 8, 10, 5, 12, 5, 19, 4, 13, 13, 43, 15, 10, 8, 13, 6, 397, 12, 11, 8, 3, 7, 3, 14, 8, 3, 13, 7, 8, 9, 11, 64, 12, 11, 14, 12, 9, 12, 9, 5, 14, 9, 8, 4, 8, 15, 7, 14, 7, 13, 8, 13, 14, 7, 23, 13, 9, 16, 17, 10, 90, 10, 8, 10, 60, 12, 5, 13, 11, 9, 8, 8, 6, 10, 16, 9, 13, 7, 10, 8, 8, 11, 8, 12, 5, 8, 9, 8, 9, 9, 9, 14, 9, 8, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [7, 4, 8, 7, 6, 5, 10, 12, 10, 12, 9, 44, 10, 4, 33, 11, 6, 6, 11, 35, 7, 11, 10, 6, 11, 9, 13, 13, 7, 10, 11, 74, 9, 12, 10, 11, 10, 10, 7, 4, 14, 13, 6, 9, 10, 7, 4, 42, 8, 4, 12, 11, 6, 81, 13, 33, 7, 24, 8, 4, 6, 6, 8, 8, 9, 9, 8, 6, 97, 10, 11, 5, 12, 6, 10, 10, 12, 6, 11, 11, 11, 7, 9, 6, 6, 5, 10, 11, 52, 6, 7, 10, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [10, 11, 9, 10, 9, 11, 13, 15, 10, 9, 8, 6, 8, 11, 8, 5, 14, 8, 10, 12, 9, 12, 10, 11, 8, 5, 13, 11, 13, 8, 12, 10, 9, 36, 7, 114, 7, 9, 10, 15, 10, 20, 5, 8, 8, 4, 9, 13, 12, 11, 13, 8, 11, 12, 11, 8, 31, 15, 14, 12, 9, 4, 12, 10, 9, 10, 11, 5, 9, 12, 6, 11, 10, 15, 8, 12, 6, 10, 11, 11, 5, 6, 12, 8, 11, 15, 15, 11, 6, 12, 10, 9, 11, 14, 14, 9, 11, 9, 9, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [7, 4, 15, 18, 4, 33, 11, 11, 4, 12, 12, 10, 9, 11, 14, 112, 9, 5, 7, 13, 12, 14, 14, 8, 14, 9, 12, 11, 6, 9, 11, 4, 8, 11, 6, 15, 17, 15, 9, 14, 12, 491, 13, 8, 13, 8, 8, 9, 18, 24, 14, 9, 5, 12, 10, 13, 10, 7, 17, 11, 113, 12, 16, 12, 14, 8, 8, 16, 11, 10, 12, 11, 14, 13, 10, 14, 125, 11, 10, 14, 12, 8, 14, 10, 10, 9, 9, 12, 13, 10, 12, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [4, 7, 9, 10, 6, 4, 11, 10, 10, 7, 4, 5, 10, 9, 10, 48, 69, 60, 9, 6, 7, 7, 6, 9, 7, 8, 9, 10, 11, 4, 8, 8, 7, 6, 7, 10, 8, 3, 9, 9, 6, 9, 6, 9, 6, 8, 7, 7, 8, 8, 7, 28, 10, 4, 6, 7, 10, 6, 10, 6, 7, 13, 6, 6, 10, 6, 8, 8, 6, 8, 10, 7, 9, 6, 4, 7, 8, 8, 9, 8, 143, 76, 7, 9, 6, 7, 5, 8, 8, 3, 11, 10, 8, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [6, 7, 6, 7, 9, 6, 15, 20, 10, 22, 9, 8, 55, 5, 7, 14, 14, 5, 10, 11, 8, 7, 6, 5, 4, 11, 23, 7, 7, 8, 6, 9, 13, 7, 5, 19, 8, 7, 149, 6, 7, 12, 8, 6, 5, 113, 7, 8, 5, 9, 10, 9, 16, 7, 10, 7, 66, 6, 13, 5, 7, 7, 5, 8, 10, 4, 10, 6, 12, 8, 10, 5, 6, 9, 7, 8, 7, 9, 6, 7, 10, 68, 9, 177, 7, 9, 15, 15, 11, 7, 5, 7, 9, 14, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 7, 7, 5, 9, 7, 7, 9, 2, 8, 4, 9, 9, 12, 7, 10, 8, 8, 8, 13, 8, 6, 4, 4, 10, 10, 6, 6, 10, 9, 7, 9, 6, 5, 6, 6, 3, 9, 5, 11, 11, 8, 4, 12, 4, 14, 8, 6, 7, 5, 10, 11, 11, 40, 11, 11, 6, 11, 15, 7, 8, 9, 6, 15, 6, 6, 13, 5, 6, 7, 8, 6, 8, 64, 6, 8, 8, 11, 8, 9, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 8, 7, 6, 8, 5, 6, 6, 11, 9, 4, 9, 4, 5, 5, 9, 12, 6, 9, 9, 163, 10, 4, 14, 6, 10, 15, 5, 4, 7, 10, 7, 18, 4, 10, 6, 29, 7, 5, 9, 10, 72, 4, 11, 3, 6, 10, 204, 10, 6, 8, 10, 10, 10, 4, 7, 10, 4, 10, 9, 10, 9, 7, 10, 8, 9, 18, 5, 7, 40, 10, 15, 9, 51, 8, 5, 4, 15, 5, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [11, 4, 6, 8, 9, 12, 6, 5, 5, 3, 7, 6, 3, 8, 28, 8, 3, 10, 4, 8, 4, 4, 6, 7, 4, 5, 5, 6, 13, 7, 8, 5, 9, 4, 7, 4, 13, 10, 4, 63, 8, 4, 4, 7, 7, 5, 9, 12, 4, 469, 32, 8, 5, 70, 9, 10, 9, 7, 11, 5, 5, 11, 4, 26, 19, 10, 4, 10, 2, 10, 6, 8, 13, 7]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [6, 22, 23, 13, 4, 22, 22, 9, 3, 4, 5, 4, 4, 21, 22, 17, 23, 4, 26, 28, 22, 3, 2, 23, 22, 23, 3, 3, 3, 24, 5, 544, 21, 16, 191, 23, 3, 23, 20, 2, 6, 2, 22, 9, 3, 38, 74, 8, 2, 67, 9, 3, 23, 17, 12, 13, 22, 4, 11, 4, 10, 6, 25, 24, 22, 3, 24, 3]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [8, 4, 8, 3, 4, 4, 6, 6, 4, 8, 2, 4, 4, 4, 4, 4, 8, 93, 4, 32, 3, 4, 2, 8, 3, 12, 6, 4, 4, 4, 5, 5, 6, 9, 3, 4, 6, 3, 4, 33, 4, 4, 4, 4, 7, 5, 4, 4, 4, 4, 5, 464, 4, 227, 4, 4, 3, 21, 27, 114]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [3, 6, 9, 7, 5, 6, 7, 6, 6, 2, 8, 3, 5, 5, 3, 5, 7, 10, 6, 6, 7, 4, 4, 9, 9, 4, 22, 3, 3, 5, 14, 6, 3, 3, 4, 16, 12, 3, 4, 103, 4, 12, 6, 6, 4, 22, 4, 10, 4, 4, 4, 7, 4, 5, 15, 12, 5, 4]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [10, 7, 6, 4, 6, 4, 6, 6, 6, 4, 4, 5, 6, 8, 3, 5, 8, 4, 6, 5, 6, 6, 6, 6, 6, 4, 5, 4, 5, 3, 7, 8, 6, 6, 7, 6, 6, 4, 6, 6, 6, 6, 5, 4, 6, 4, 4, 5, 4, 5, 14, 10, 2, 4, 10, 7, 6, 5, 4, 6, 6, 6, 6, 8, 6, 5, 445, 4, 5, 6, 7, 4, 4, 6, 4, 382, 6, 2, 6, 7, 18, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [9, 5, 5, 5, 4, 4, 6, 8, 7, 7, 4, 8, 6, 4, 6, 8, 6, 6, 4, 4, 6, 5, 2, 11, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 4, 8, 6, 8, 6, 16, 8, 6, 6, 6, 6, 4, 102, 6, 4, 4, 9, 6, 7, 5, 6, 14, 5, 7, 6, 202, 9, 6, 5, 8, 4, 4, 5, 5, 6, 4, 4, 10, 8, 5, 5, 4, 70, 5, 6, 6, 5, 6, 7, 6, 6, 8, 355, 6, 4, 7, 4, 8, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 6, 7, 4, 6, 9, 4, 8, 6, 5, 4, 6, 321, 4, 4, 5, 6, 3, 4, 4, 6, 10, 4, 4, 6, 7, 4, 4, 5, 11, 5, 4, 3, 10, 6, 5, 7, 17, 4, 6, 7, 3, 12, 188, 4, 10, 12, 13, 7, 6, 3, 8, 7, 7, 101, 6, 11, 3, 4, 5, 4, 11, 6, 4, 12, 6, 10, 7, 5, 3, 146, 6, 10, 6, 10, 6, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [11, 4, 8, 6, 7, 4, 7, 6, 4, 8, 5, 6, 7, 298, 7, 6, 7, 6, 4, 7, 15, 4, 6, 7, 8, 9, 12, 8, 7, 6, 5, 7, 4, 8, 8, 8, 5, 6, 16, 7, 8, 7, 4, 7, 6, 7, 7, 5, 13, 12, 5, 339, 7, 4, 7, 6, 4, 6, 7, 5, 6, 7, 10, 4, 8, 3, 9, 7, 4, 8]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [23, 8, 4, 8, 8, 14, 5, 7, 332, 5, 7, 4, 7, 6, 5, 7, 24, 4, 4, 7, 4, 5, 24, 5, 376, 5, 8, 5, 13, 6, 10, 28, 9, 7, 8, 6, 9, 15, 12, 10, 6, 7, 146, 7, 7, 5, 4, 13, 13, 17, 2, 5, 6, 6, 4, 6, 8, 13, 210, 189, 162, 6, 6, 16, 16, 10, 6, 5, 10, 27, 4, 16, 5, 6, 6, 10, 6, 8, 8, 5, 9, 6, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 6, 6, 7, 4, 6, 4, 6, 4, 10, 16, 6, 6, 5, 3, 6, 6, 176, 6, 31, 6, 24, 4, 8, 4, 7, 20, 41, 4, 6, 25, 4, 6, 6, 7, 6, 4, 6, 6, 7, 6, 5, 6, 5, 7, 271, 5, 11, 8, 9, 60, 8, 6, 12, 3, 6, 6, 4, 6, 7, 6, 6, 5, 11, 6, 4, 15, 4, 4, 7, 31, 6, 4, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [19, 8, 4, 11, 4, 20, 6, 4, 6, 4, 4, 4, 9, 10, 10, 3, 8, 5, 36, 27, 4, 5, 6, 9, 11, 7, 10, 7, 15, 6, 4, 215, 9, 372, 44, 10, 11, 4, 10, 4, 6, 8, 4, 11, 11, 12, 3, 47, 13, 4, 4, 4, 9, 513, 13, 7, 4, 12, 6, 5, 6, 5, 15, 4, 6, 6, 23, 6, 6, 9, 8, 4, 6, 7, 5, 199, 10, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 4, 5, 6, 5, 7, 5, 4, 4, 11, 5, 4, 4, 5, 6, 4, 7, 3, 4, 4, 14, 5, 3, 2, 16, 4, 4, 13, 5, 66, 6, 357, 11, 6, 6, 42, 3, 180, 146, 4, 4, 6, 6, 5, 4, 12, 4, 5, 11, 5, 514, 5, 8, 20, 6, 6, 7, 10, 5, 11, 12, 6, 10, 7, 7, 5, 8, 314, 4, 6, 11]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [9, 7, 4, 6, 6, 18, 6, 8, 9, 8, 6, 6, 11, 4, 194, 11, 6, 7, 4, 4, 19, 7, 6, 7, 7, 4, 9, 8, 8, 9, 6, 7, 15, 322, 11, 4, 4, 3, 347, 10, 4, 6, 7, 11, 6, 63, 8, 414, 12, 6, 4, 8, 14, 8, 13, 2, 8, 8, 34, 3, 7, 7, 4, 6, 82, 7, 6, 7, 7, 4, 7, 8, 10, 10, 6, 80, 3, 11, 7, 6, 8, 3, 17, 38, 9, 7, 51]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [6, 6, 5, 4, 4, 7, 5, 7, 7, 4, 7, 37, 4, 8, 6, 4, 12, 4, 5, 3, 4, 10, 5, 21, 7, 19, 4, 2, 9, 12, 5, 5, 10, 6, 6, 6, 5, 4, 7, 6, 7, 6, 18, 7, 5, 5, 7, 9, 5, 3, 12, 39, 4, 4, 5, 9, 5, 4, 7, 7, 5, 6, 4, 5, 7, 11, 11, 10, 5, 8, 6, 10, 85, 7]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [3, 7, 5, 9, 10, 108, 12, 12, 7, 7, 8, 14, 10, 6, 10, 8, 9, 10, 375, 10, 5, 6, 29, 5, 23, 5, 6, 7, 10, 22, 49, 11, 7, 5, 4, 8, 7, 13, 5, 14, 11, 4, 24, 17, 5, 5, 5, 19, 8, 8, 247, 9, 11, 9, 19, 8, 8, 9, 7, 10, 9, 246, 4, 11, 6, 12, 7, 8, 13, 15, 8, 7, 8, 37, 12, 9, 11, 9, 9, 5, 9, 3, 13, 10, 17, 7, 9, 5, 7, 9, 9, 5, 9, 4, 5, 8, 10, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [17, 9, 7, 4, 5, 6, 7, 6, 7, 7, 5, 5, 6, 6, 6, 5, 13, 13, 4, 15, 7, 10, 4, 5, 7, 6, 4, 5, 4, 4, 5, 7, 6, 4, 10, 18, 6, 6, 6, 5, 6, 8, 7, 5, 8, 9, 5, 12, 13, 7, 30, 15, 18, 71, 7, 5, 9, 13, 12, 13, 7, 13, 9, 11, 12, 9, 7, 7]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [3, 7, 6, 6, 7, 5, 4, 4, 8, 4, 7, 7, 94, 10, 50, 4, 6, 7, 6, 5, 5, 7, 4, 4, 6, 6, 4, 9, 7, 7, 7, 37, 6, 6, 6, 7, 6, 9, 6, 30, 8, 7, 4, 6, 6, 9, 8, 8, 7, 8, 7, 8, 9, 7, 7, 8, 5, 12, 85, 6, 77, 7, 8, 6, 12, 8, 6, 46, 4, 8, 6, 9, 6, 7, 166, 7, 10, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [17, 11, 6, 11, 12, 4, 4, 9, 3, 12, 6, 181, 3, 4, 4, 6, 4, 9, 7, 2, 5, 35, 419, 189, 4, 4, 7, 15, 4, 9, 6, 12, 6, 10, 4, 6, 3, 81, 3, 4, 4, 4, 11, 4, 178, 4, 4, 8, 3, 4, 8, 8, 5, 30, 8, 7, 3, 18, 4, 4, 6, 17, 5, 5, 9, 18, 6, 7, 12, 7, 6, 4, 5, 8, 3, 14, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [22, 3, 4, 4, 5, 5, 4, 6, 6, 4, 71, 4, 4, 526, 50, 14, 5, 11, 4, 4, 4, 13, 4, 7, 5, 3, 8, 4, 5, 6, 3, 14, 4, 12, 4, 4, 17, 151, 199, 19, 56, 4, 4, 5, 12, 4, 18, 12, 4, 7, 5]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [5, 4, 6, 3, 6, 6, 4, 4, 10, 7, 6, 13, 21, 5, 8, 9, 45, 9, 4, 4, 9, 4, 5, 19, 4, 9, 3, 11, 8, 370, 222, 69, 180, 5, 17, 3, 13, 25, 8, 10, 10, 4, 5]
length(C_list) = 43
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [8, 4, 3, 4, 4, 5, 4, 4, 5, 4, 4, 4, 119, 5, 4, 4, 4, 196, 5, 4, 4, 4, 16, 7, 4, 26, 4, 6, 8, 8, 8, 10, 5, 9, 4, 4, 19, 5, 7]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 5, 4, 6, 5, 4, 4, 40, 6, 4, 273, 4, 4, 5, 178, 5, 6, 4, 7, 5, 4, 5, 7, 3, 8, 6, 6, 142, 7, 8, 103, 9, 11, 320, 11, 300, 5, 5, 8, 4, 5, 9, 5]
length(C_list) = 45
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [4, 7, 4, 8, 4, 9, 4, 6, 7, 6, 100, 6, 9, 8, 42, 441, 9, 12, 17, 6, 658, 6, 11, 23, 4, 7, 9, 4, 25, 8, 6, 3, 29, 26, 29, 5, 6, 4, 3, 6, 6, 6, 24, 3, 8, 4, 3, 10, 8, 7, 8, 8, 439, 6, 4, 25, 8, 6, 9, 6, 6, 7, 6, 12, 303, 8, 8, 10, 7, 10, 9, 6, 8]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [4, 10, 4, 8, 11, 9, 5, 14, 11, 8, 5, 14, 10, 8, 4, 5, 10, 387, 14, 14, 93, 8, 10, 13, 12, 4, 14, 27, 4, 4, 11, 12, 14, 14, 13, 13, 9, 4, 5, 95, 17, 9, 6, 9, 12, 13, 12, 15, 11, 6, 9, 9, 578, 7, 10, 12, 8, 4, 11, 10, 10, 43, 10, 6, 6, 9, 9, 12, 4, 12, 12, 14, 14, 6, 12, 11, 13, 12, 12, 9, 8, 24, 11, 11, 11, 11, 14, 15, 10, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [13, 10, 10, 11, 5, 16, 4, 10, 9, 10, 11, 11, 9, 10, 12, 4, 7, 6, 4, 7, 17, 4, 14, 4, 7, 10, 6, 511, 8, 10, 17, 8, 283, 7, 13, 7, 12, 22, 7, 10, 4, 10, 8, 7, 11, 6, 17, 7, 416, 7, 10, 6, 9, 10, 5, 4, 11, 11, 8, 11, 7, 12, 27, 12, 30, 8, 10, 12, 11, 4, 11, 7, 10, 8, 16, 5, 14, 8, 15, 10, 45, 8, 12, 6, 81, 27, 10, 15, 10, 10, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [8, 4, 14, 12, 14, 4, 4, 14, 17, 4, 9, 12, 7, 9, 8, 14, 133, 8, 9, 11, 8, 16, 7, 4, 6, 4, 12, 9, 4, 11, 7, 16, 6, 12, 6, 14, 12, 8, 7, 10, 10, 9, 12, 4, 220, 16, 16, 10, 10, 5, 18, 13, 9, 8, 9, 14, 10, 11, 198, 12, 10, 8, 9, 9, 10, 123, 9, 6, 6, 9, 15, 8, 16, 41, 13, 18, 8, 35, 22, 17, 12, 8, 10, 8, 12, 9, 14, 32, 15]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [14, 9, 8, 9, 9, 10, 5, 9, 3, 8, 8, 7, 251, 6, 8, 12, 10, 8, 8, 10, 262, 4, 17, 8, 6, 13, 5, 8, 6, 8, 9, 5, 15, 8, 13, 9, 7, 6, 6, 9, 10, 7, 8, 11, 149, 9, 9, 14, 7, 9, 12, 8, 6, 38, 13, 14, 9, 8, 7, 9, 8, 8, 8, 11, 4, 9, 9, 12, 8, 9, 6, 6, 68, 9, 7, 8, 7, 8, 8, 14, 8, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [12, 8, 11, 9, 12, 8, 4, 12, 11, 9, 10, 10, 10, 8, 6, 11, 6, 10, 12, 6, 7, 8, 10, 10, 12, 11, 9, 14, 10, 9, 9, 10, 11, 14, 6, 9, 16, 10, 4, 10, 10, 6, 7, 11, 8, 8, 11, 11, 9, 16, 9, 17, 6, 304, 9, 17, 7, 24, 33, 7, 10, 63, 11, 8, 9, 13, 10, 10, 430, 8, 498, 9, 10, 9, 11, 8, 4, 250, 10, 10, 10, 11, 8, 10, 11, 8, 4, 4, 10, 13, 11, 9, 9, 11, 10, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [14, 12, 7, 6, 8, 7, 5, 19, 4, 10, 8, 4, 13, 4, 8, 13, 8, 6, 6, 5, 5, 8, 10, 12, 11, 5, 6, 5, 6, 12, 17, 4, 5, 10, 9, 10, 13, 10, 9, 5, 6, 11, 4, 30, 10, 187, 12, 6, 32, 5, 10, 7, 10, 9, 9, 6, 4, 4, 10, 5, 7, 6, 7, 6, 10, 6, 10, 4, 6, 5, 8, 5, 5, 5, 69, 103, 9, 6, 8, 10, 17]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [9, 9, 3, 6, 6, 8, 10, 9, 5, 9, 6, 4, 12, 12, 6, 6, 7, 8, 11, 4, 9, 4, 8, 8, 9, 7, 8, 5, 11, 10, 6, 6, 9, 7, 10, 8, 6, 4, 8, 7, 4, 8, 5, 4, 6, 9, 9, 10, 26, 5, 8, 4, 3, 182, 15, 6, 7, 8, 9, 6, 9, 11, 60, 11, 7, 9, 7, 2, 9, 3, 9, 10, 7, 9, 12, 9, 11, 5, 5, 36, 7, 9, 4, 21, 9, 9, 11, 9, 5, 19, 10, 9, 15, 22]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [5, 7, 4, 7, 4, 3, 7, 9, 7, 6, 36, 6, 8, 8, 8, 8, 8, 9, 7, 47, 4, 8, 7, 5, 8, 4, 6, 4, 6, 10, 4, 8, 8, 6, 6, 6, 6, 4, 10, 4, 4, 8, 8, 6, 7, 8, 9, 9, 8, 398, 5, 11, 8, 11, 9, 6, 3, 8, 2, 9, 6, 11, 11, 4, 7, 5, 8, 5, 7, 24, 6, 4, 6, 13, 8, 6, 10, 4, 6, 5, 8, 4, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [5, 9, 6, 9, 10, 9, 11, 8, 11, 8, 9, 7, 9, 9, 7, 167, 10, 13, 7, 11, 13, 249, 8, 9, 9, 10, 7, 11, 9, 9, 8, 10, 8, 9, 10, 10, 12, 9, 23, 6, 9, 10, 11, 8, 9, 11, 51, 9, 11, 8, 4, 23, 14, 8, 10, 12, 10, 6, 10, 5, 11, 9, 7, 11, 8, 8, 7, 8, 11, 10, 12, 8, 9, 12, 8, 10, 10, 11, 8, 99, 8, 10, 8, 11, 13, 10, 8, 8, 7, 10, 10, 8, 5, 11, 9, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [22, 11, 8, 8, 9, 10, 11, 7, 8, 12, 8, 12, 12, 9, 5, 11, 10, 6, 4, 6, 12, 14, 7, 44, 9, 11, 11, 10, 9, 8, 15, 16, 7, 10, 154, 14, 26, 11, 13, 10, 6, 9, 9, 11, 8, 11, 7, 11, 9, 7, 11, 12, 9, 5, 9, 13, 38, 11, 10, 17, 12, 9, 12, 16, 11, 12, 11, 10, 8, 7, 11, 11, 21, 10, 12, 5, 11, 11, 10, 9, 13, 10, 12, 163, 9, 11, 8, 11, 11, 243, 8, 10, 9, 11, 10, 12, 10, 11, 10, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
[length(mis) for mis = unique(C_list)] = [8, 8, 7, 6, 8, 8, 9, 10, 11, 5, 8, 11, 10, 12, 9, 9, 12, 10, 10, 6, 8, 9, 7, 6, 9, 11, 9, 9, 8, 12, 7, 5, 9, 152, 8, 12, 6, 10, 8, 9, 6, 11, 6, 10, 4, 9, 7, 7, 8, 8, 9, 9, 11, 20, 9, 5, 187, 9, 17, 10, 7, 169, 11, 6, 10, 11, 10, 8, 9, 8, 10, 10, 11, 7, 9, 10, 14, 14, 10, 8, 9, 8, 136, 9, 14, 10, 9, 9, 11, 6, 9, 10, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [19, 7, 4, 4, 5, 8, 3, 6, 11, 5, 7, 6, 5, 11, 65, 14, 5, 15, 48, 7, 9, 4, 5, 5, 6, 7, 5, 11, 7, 10, 387, 3, 4, 13, 10, 9, 5, 8, 6, 5, 10, 4, 6, 8, 4, 422, 141, 12, 4, 4, 5, 6, 5, 359, 7, 8, 6, 10, 4, 12, 5, 62, 5, 5, 9, 4, 9, 6, 7, 8, 24, 5, 7, 8, 74, 9, 13, 3, 10, 9, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [9, 5, 8, 12, 9, 88, 12, 9, 12, 11, 4, 6, 10, 10, 5, 11, 10, 9, 9, 10, 8, 7, 7, 8, 11, 9, 9, 9, 8, 9, 7, 9, 11, 9, 12, 56, 12, 10, 9, 8, 4, 10, 9, 8, 12, 15, 11, 4, 7, 9, 11, 8, 9, 10, 9, 6, 8, 9, 9, 9, 11, 9, 6, 8, 12, 7, 14, 10, 8, 8, 67, 10, 9, 10, 13, 9, 8, 11, 10, 9, 9, 9, 10, 9, 11, 14, 11, 11, 8, 9, 12, 213, 16, 19, 12, 14, 38, 10, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [17, 6, 6, 6, 8, 6, 6, 7, 7, 8, 6, 8, 5, 5, 10, 7, 6, 6, 5, 7, 7, 7, 5, 4, 5, 7, 6, 6, 6, 5, 5, 8, 6, 8, 10, 5, 6, 7, 8, 4, 6, 13, 411, 9, 11, 6, 6, 7, 6, 4, 6, 5, 25, 6, 7, 7, 7, 9, 8, 9, 4, 7, 5, 6, 17, 10, 5, 8, 9, 7, 19, 5, 8, 8, 7, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 8, 6, 7, 8, 8, 23, 4, 9, 5, 8, 19, 7, 200, 9, 216, 10, 9, 7, 7, 11, 12, 9, 11, 8, 7, 4, 9, 4, 8, 7, 10, 8, 10, 7, 5, 4, 63, 9, 74, 10, 7, 10, 7, 10, 9, 7, 135, 20, 9, 9, 4, 8, 16, 8, 3, 7, 10, 15, 7, 7, 4, 11, 12, 40, 5, 8, 12, 5, 5, 7, 6, 5, 12, 13, 48, 4, 8, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [4, 5, 7, 6, 5, 9, 10, 11, 139, 7, 7, 5, 10, 9, 8, 10, 10, 9, 6, 9, 6, 5, 8, 6, 12, 48, 10, 8, 9, 15, 8, 7, 22, 148, 4, 12, 5, 9, 9, 5, 8, 7, 9, 6, 7, 11, 97, 6, 16, 8, 10, 9, 6, 6, 17, 9, 10, 8, 101, 8, 8, 7, 5, 22, 9, 28, 12, 11, 10, 5, 22, 9, 10, 9, 5, 8, 8, 12, 8, 7, 11, 8, 10, 14, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [22, 7, 13, 9, 11, 10, 11, 8, 26, 26, 10, 13, 8, 10, 14, 9, 12, 9, 8, 6, 12, 5, 158, 9, 8, 5, 12, 9, 11, 8, 5, 9, 10, 12, 9, 9, 9, 7, 3, 10, 7, 11, 9, 7, 13, 6, 4, 15, 7, 9, 7, 3, 10, 10, 160, 9, 14, 6, 9, 3, 11, 8, 11, 13, 107, 12, 8, 11, 9, 13, 9, 12, 4, 12, 7, 11, 10, 72, 12, 272, 13]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [2, 8, 9, 4, 4, 10, 11, 14, 13, 5, 6, 4, 15, 7, 4, 9, 4, 11, 9, 8, 7, 4, 15, 33, 109, 8, 6, 5, 12, 5, 10, 10, 13, 7, 12, 5, 10, 10, 8, 12, 11, 5, 7, 5, 6, 10, 9, 11, 13, 4, 5, 6, 9, 8, 6, 11, 7, 10, 5, 11, 13, 26, 11, 8, 8, 5, 9, 5, 7, 392, 8, 4, 12, 8, 17, 11, 9, 9, 233, 6, 9, 10, 7, 5, 4, 9, 7, 10, 6, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [17, 10, 9, 11, 6, 10, 8, 11, 10, 14, 11, 7, 8, 10, 9, 9, 11, 7, 8, 12, 9, 8, 13, 10, 15, 11, 8, 9, 10, 6, 10, 10, 7, 10, 10, 15, 9, 6, 11, 12, 10, 9, 16, 4, 12, 12, 6, 7, 8, 14, 9, 138, 11, 14, 25, 11, 26, 14, 10, 94, 6, 10, 28, 10, 7, 6, 10, 12, 6, 10, 12, 6, 7, 12, 16, 8, 286, 5, 11, 9, 9, 10, 14, 10, 10, 12, 9, 44, 12, 10, 13]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [4, 11, 8, 9, 13, 7, 9, 8, 9, 11, 14, 19, 14, 39, 8, 10, 95, 10, 11, 7, 7, 7, 11, 10, 11, 10, 10, 11, 148, 8, 11, 10, 6, 10, 11, 4, 10, 12, 7, 7, 10, 7, 7, 10, 8, 10, 12, 31, 47, 10, 8, 24, 10, 10, 12, 10, 9, 11, 9, 10, 9, 13, 17, 6, 4, 175, 9, 10, 91, 6, 7, 21, 19, 11, 8, 10, 8, 7, 7, 59, 21, 11, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [3, 12, 4, 8, 9, 10, 7, 9, 7, 11, 7, 8, 11, 5, 5, 8, 7, 8, 11, 8, 8, 6, 4, 9, 4, 7, 8, 11, 9, 9, 9, 11, 7, 8, 6, 8, 6, 10, 6, 6, 10, 10, 6, 8, 9, 4, 9, 10, 13, 11, 231, 7, 9, 8, 6, 9, 9, 6, 8, 8, 6, 8, 7, 10, 5, 9, 53, 9, 7, 8, 9, 5, 10, 6, 4, 7, 10, 51, 7, 7, 7, 11, 8, 10, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [5, 8, 8, 10, 12, 6, 11, 10, 10, 6, 11, 8, 108, 8, 11, 9, 11, 9, 5, 73, 24, 7, 6, 8, 9, 12, 9, 11, 5, 8, 9, 11, 8, 10, 12, 10, 9, 6, 7, 11, 10, 9, 8, 10, 52, 8, 6, 9, 10, 11, 13, 119, 9, 11, 9, 5, 8, 9, 9, 6, 10, 10, 8, 13, 9, 10, 29, 10, 8, 9, 8, 11, 10, 11, 8, 12, 9, 9, 10, 11, 10, 120, 25, 10, 267, 5, 8, 11, 13, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [5, 11, 12, 4, 10, 12, 12, 10, 11, 38, 12, 11, 4, 12, 14, 12, 16, 13, 11, 11, 7, 8, 68, 8, 12, 5, 12, 9, 10, 11, 13, 13, 11, 7, 11, 10, 8, 4, 11, 10, 12, 8, 10, 11, 8, 9, 11, 12, 13, 11, 38, 9, 181, 7, 12, 11, 10, 11, 117, 11, 11, 14, 11, 9, 6, 9, 11, 9, 12, 11, 11, 11, 10, 11, 9, 9, 12, 13, 9, 11, 10, 12, 9, 12, 11, 16, 11, 11, 11, 10, 12, 20, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [3, 6, 13, 12, 10, 8, 5, 12, 10, 7, 8, 8, 6, 12, 10, 7, 13, 9, 10, 6, 8, 60, 14, 9, 10, 16, 8, 9, 5, 12, 6, 6, 11, 17, 14, 96, 13, 13, 6, 10, 6, 6, 10, 18, 16, 13, 8, 13, 13, 10, 11, 9, 14, 8, 9, 6, 5, 7, 12, 7, 5, 13, 9, 9, 15, 5, 9, 13, 12, 10, 11, 11, 72, 9, 14, 9, 11, 6, 11, 9, 16, 12, 11, 13, 9, 12, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [8, 6, 7, 8, 7, 9, 8, 5, 8, 9, 6, 6, 9, 292, 10, 10, 4, 12, 4, 6, 8, 12, 203, 3, 9, 16, 5, 4, 10, 10, 6, 10, 6, 7, 8, 8, 10, 8, 9, 10, 6, 9, 6, 8, 10, 335, 7, 5, 8, 10, 7, 30, 7, 10, 63, 11, 8, 7, 8, 10, 8, 9, 9, 8, 3, 14, 6, 4, 6, 6, 10, 7, 13, 54, 9, 7, 8, 10, 50, 7, 9, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [4, 10, 6, 8, 9, 10, 4, 9, 8, 7, 9, 11, 6, 5, 9, 8, 8, 7, 9, 11, 5, 6, 99, 7, 8, 9, 11, 7, 412, 7, 9, 10, 8, 7, 5, 10, 6, 7, 5, 397, 10, 7, 7, 9, 10, 10, 7, 9, 9, 7, 8, 188, 8, 50, 6, 6, 7, 4, 10, 14, 22, 9, 6, 8, 9, 8, 8, 7, 4, 8, 414, 6, 6, 5, 3, 4, 8, 27, 9, 6, 11, 6, 7, 4, 7, 207, 8, 6, 8, 7, 9, 4, 8, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [6, 10, 5, 8, 9, 7, 7, 9, 10, 5, 6, 10, 9, 14, 379, 7, 8, 9, 25, 10, 7, 6, 16, 114, 8, 9, 10, 11, 7, 9, 9, 9, 15, 441, 12, 12, 7, 10, 6, 10, 11, 8, 4, 7, 7, 7, 9, 6, 8, 8, 7, 17, 11, 8, 8, 11, 49, 4, 10, 11, 16, 27, 9, 8, 6, 8, 91, 7, 13, 13, 9, 8, 17, 9, 64, 10, 8, 11, 12, 8, 34, 9, 14, 11, 10, 12, 12, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [5, 9, 4, 4, 6, 5, 6, 21, 6, 5, 5, 135, 23, 5, 8, 3, 5, 9, 4, 9, 9, 64, 7, 8, 6, 14, 6, 8, 5, 9, 3, 6, 15, 5, 10, 6, 7, 5, 18, 7, 45, 8, 6, 10, 6, 11]
length(C_list) = 46
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
[length(mis) for mis = unique(C_list)] = [31, 11, 12, 10, 9, 11, 13, 11, 10, 10, 5, 10, 10, 10, 5, 9, 15, 165, 9, 5, 4, 6, 9, 9, 8, 29, 8, 12, 4, 11, 9, 12, 12, 7, 5, 9, 6, 6, 10, 12, 9, 12, 5, 12, 8, 10, 14, 10, 11, 9, 144, 13, 10, 11, 13, 56, 126, 11, 10, 10, 12, 10, 10, 14, 9, 11, 10, 10, 13, 12, 12, 13, 10, 13, 12, 11, 11, 11, 12, 13, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 177
[length(mis) for mis = unique(C_list)] = [18, 11, 8, 11, 15, 9, 17, 14, 12, 11, 13, 13, 11, 13, 10, 8, 6, 17, 8, 155, 5, 111, 11, 12, 9, 13, 4, 11, 13, 46, 9, 14, 11, 11, 12, 8, 8, 9, 12, 7, 9, 10, 12, 10, 18, 13, 5, 10, 13, 10, 11, 12, 5, 12, 11, 9, 12, 12, 10, 13, 11, 16, 18, 12, 11, 15, 10, 11, 11, 16, 10, 12, 9, 9, 13, 18, 8, 8, 9, 10, 12, 10, 27, 11, 11, 11, 14, 15, 80, 13, 19, 8, 195]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 178
[length(mis) for mis = unique(C_list)] = [26, 4, 11, 9, 5, 4, 6, 4, 9, 7, 7, 8, 5, 88, 9, 5, 9, 57, 7, 9, 6, 9, 9, 5, 9, 447, 4, 7, 21, 5, 7, 16, 24, 11, 5, 5, 4, 56, 9, 9, 5, 3, 7, 5, 3, 7, 6, 6, 5, 7, 11, 23, 4, 8, 9, 6, 7, 3, 27, 9, 5, 8, 7, 25, 8, 8, 7, 7, 8, 5, 7, 520, 94, 7, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 179
[length(mis) for mis = unique(C_list)] = [8, 11, 5, 11, 5, 5, 7, 6, 13, 6, 6, 5, 8, 7, 5, 12, 10, 5, 7, 9, 5, 8, 3, 6, 8, 9, 17, 5, 9, 5, 5, 6, 11, 11, 5, 6, 5, 10, 5, 9, 7, 8, 30, 12, 4, 4, 7, 10, 29, 6, 9, 78, 87, 12, 127, 9, 9, 6, 11, 6, 8, 8, 9]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 180
[length(mis) for mis = unique(C_list)] = [13, 9, 11, 6, 4, 20, 5, 20, 5, 13, 13, 15, 9, 4, 40, 22, 9, 6, 14, 14, 5, 5, 398, 11, 12, 8, 10, 4, 15, 11, 9, 9, 7, 10, 354, 7, 7, 262, 10, 13, 18, 13, 5, 14, 7, 278, 11, 10, 12, 13, 9, 5, 13, 12, 12, 9, 9, 12, 13, 14, 244, 12, 21, 5, 5, 15, 15, 11, 5, 12]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 181
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 4, 4, 6, 6, 16, 10, 5, 6, 11, 5, 10, 7, 10, 14, 9, 386, 7, 4, 13, 8, 10, 682, 80, 14, 7, 8, 5, 17, 6, 5, 10, 10, 8, 6, 5, 11, 8, 5, 9, 9, 8, 11, 6, 8, 10, 11, 15, 13, 6, 11, 4, 10, 7, 5, 13, 3, 6, 6, 6, 9, 9, 10, 7, 6, 9, 8, 10, 10, 13, 12]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 182
termination = MathOptInterface.INFEASIBLE
objective_value = 0.0
