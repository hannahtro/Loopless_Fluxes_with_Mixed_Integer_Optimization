ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
RECON1
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

RECON1
----------------------------------
number of metabolites : 2766
number of reactions : 3741
number of genes : 1905

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 150
max_cuts = 75
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 3741 flux variables and 7052 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [5, 2, 2, 2, 2, 2, 2, 46, 5, 5, 5, 2, 5, 6, 4, 4, 8, 5, 5, 5, 11, 7, 3, 6, 7, 4, 2, 6, 5, 6, 4, 211, 3, 9, 5, 4, 6, 7, 5, 5, 3, 3, 9, 5, 6, 7, 9, 5, 9, 5, 4, 4, 6, 147, 5, 5, 31, 5, 5, 7, 7, 4]
length(C_list) = 62
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [7, 2, 2, 2, 2, 6, 3, 4, 4, 2, 6, 8, 5, 12, 2, 10, 5, 7, 9, 4, 7, 7, 9, 7, 4, 4, 6, 12, 6, 7, 2, 2, 7, 3, 6, 4, 2, 9, 12, 10, 5, 4, 136, 8, 40, 4, 232, 19, 10, 7, 232, 2, 6, 6, 164, 10, 76, 5, 6, 8, 7, 11, 5, 10, 7, 171, 6]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 178, 4, 6, 8, 9, 7, 220, 3, 29, 2, 4, 4, 72, 362, 4, 4, 6, 4, 15, 6, 3, 4, 97, 7, 7, 6, 5, 4, 7, 7, 2, 12, 149, 5, 4, 6, 4, 6, 6, 7, 6, 3, 8, 4, 3, 6, 5, 9, 4, 6, 15, 9, 6, 7, 15, 4, 7, 18, 7, 467, 6, 4, 25, 19, 8, 277, 3, 6, 7, 4]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [9, 7, 4, 11, 5, 4, 4, 6, 4, 6, 3, 6, 9, 9, 3, 6, 8, 20, 12, 6, 4, 7, 9, 4, 5, 10, 9, 9, 3, 18, 4, 6, 8, 4, 4, 9, 9, 3, 4, 9, 6, 4, 5, 484, 5, 6, 8, 8, 5, 7, 8, 267, 6, 3, 8, 4, 303, 8, 56, 5, 4, 201, 10, 6, 31, 5, 3, 19, 8, 21, 13, 7, 4, 5, 7, 4, 18, 4, 5, 8, 7, 7, 70, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 6, 2, 6, 7, 5, 6, 7, 4, 6, 4, 7, 9, 4, 6, 4, 2, 3, 4, 5, 6, 4, 6, 4, 3, 7, 9, 4, 5, 3, 9, 5, 6, 3, 3, 4, 3, 4, 4, 7, 28, 9, 4, 4, 12, 4, 28, 8, 8, 5, 5, 9, 8, 9, 22, 15, 4, 7, 10, 6, 71, 6, 16, 6, 4, 7, 5, 231, 382]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [11, 7, 6, 4, 8, 5, 5, 5, 5, 5, 6, 4, 11, 40, 14, 383, 10, 196, 9, 5, 3, 422, 4, 6, 7, 10, 12, 3, 6, 4, 16, 7, 4, 7, 4, 3, 3, 6, 4, 4, 4, 331, 190, 6, 7, 6, 5, 4, 7, 6, 11, 12, 25, 5, 7, 10, 18, 22, 4, 231, 8, 4, 42, 6, 9, 35, 14, 12, 8, 105, 5, 75, 13, 22, 7, 4, 4, 39, 4, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [6, 9, 5, 6, 5, 3, 6, 4, 10, 5, 4, 4, 11, 7, 3, 15, 67, 8, 4, 220, 6, 3, 5, 10, 5, 4, 12, 4, 4, 6, 10, 4, 6, 4, 4, 6, 4, 5, 10, 237, 6, 4, 7, 4, 8, 10, 4, 8, 4, 4, 413, 10, 4, 12, 7, 7, 471, 9, 3, 5, 9, 8, 10, 4, 49, 16, 409, 6, 610, 7, 7, 21, 21, 93, 6, 5, 4, 20, 17, 25, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 8, 4, 4, 6, 5, 3, 9, 8, 6, 5, 5, 7, 5, 6, 4, 18, 6, 11, 5, 6, 5, 6, 3, 5, 13, 5, 5, 10, 12, 118, 59, 13, 8, 5, 6, 4, 3, 5, 63, 418, 9, 3, 7, 4, 10, 35, 41, 4, 7, 4, 5, 4, 10, 94, 7, 7, 59, 5, 4, 5, 4, 8, 8, 4, 15, 10, 6, 7, 35, 6, 5, 16, 16, 10, 10, 5, 7, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 5, 4, 6, 4, 9, 5, 10, 4, 11, 7, 7, 4, 4, 7, 3, 15, 9, 7, 4, 191, 19, 5, 3, 186, 6, 4, 6, 6, 71, 6, 4, 4, 4, 4, 4, 29, 8, 4, 7, 128, 9, 5, 4, 6, 6, 4, 4, 4, 7, 392, 41, 251, 4, 4, 3, 3, 3, 6, 4, 4, 6, 12, 14, 9, 6, 4, 13, 15, 4, 6, 10, 5, 10, 6, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [15, 4, 4, 3, 4, 7, 6, 7, 4, 10, 5, 4, 6, 5, 3, 550, 7, 4, 6, 5, 6, 4, 7, 3, 6, 4, 176, 9, 90, 5, 6, 4, 95, 3, 8, 41, 4, 15, 5, 6, 113, 6, 9, 4, 5, 4, 4, 8, 6, 8, 219, 15, 7, 18, 6, 3, 3, 5, 7, 15, 4, 4, 624, 54, 580, 7, 4, 5, 330, 89, 5, 3, 8, 4, 89, 4, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [16, 3, 4, 118, 6, 13, 6, 3, 6, 5, 5, 6, 5, 4, 6, 6, 10, 4, 5, 7, 7, 4, 5, 8, 4, 78, 9, 614, 3, 107, 20, 144, 4, 137, 6, 4, 4, 11, 6, 339, 35, 55, 6, 13, 3, 6, 4, 6, 8, 21, 5, 11, 14, 6, 8, 4, 5, 21, 4, 22, 14, 9, 9, 5, 14, 4, 15, 4, 16, 541, 21, 3, 289, 22, 8, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [10, 6, 6, 5, 6, 6, 5, 4, 6, 6, 4, 7, 6, 12, 19, 4, 8, 7, 8, 4, 18, 5, 6, 7, 3, 5, 6, 5, 5, 68, 6, 10, 6, 10, 4, 5, 6, 4, 6, 4, 7, 5, 6, 6, 8, 8, 4, 9, 37, 13, 4, 8, 8, 22, 243, 5, 9, 7, 8, 5, 4, 8, 10, 133, 10, 94, 11, 4, 11, 19, 3, 6, 10, 9, 10, 4, 23, 4, 6, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [18, 4, 4, 5, 6, 7, 7, 7, 6, 6, 4, 6, 5, 8, 30, 7, 116, 5, 6, 7, 5, 5, 3, 3, 9, 5, 7, 49, 29, 609, 4, 5, 6, 274, 4, 4, 9, 4, 5, 250, 6, 4, 4, 8, 8, 4, 96, 4, 4, 4, 5, 3, 4, 4, 4, 12, 7, 15, 7, 11, 6, 6, 8, 12, 5, 19, 9, 7, 10, 34, 202, 9, 17, 96, 26, 10, 27, 6, 18, 4, 5, 342, 7, 175, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [5, 5, 11, 8, 7, 3, 3, 4, 4, 26, 5, 4, 8, 9, 5, 6, 6, 9, 4, 7, 7, 6, 4, 6, 7, 3, 77, 15, 4, 6, 4, 9, 5, 9, 4, 6, 10, 3, 10, 4, 4, 8, 6, 4, 4, 6, 5, 4, 4, 19, 5, 5, 4, 5, 8, 4, 122, 19, 7, 6, 5, 7, 14, 9, 6, 6, 8, 11, 14, 10, 5, 16, 6, 4, 8, 46, 16, 6, 6, 8, 9, 20, 4, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [19, 4, 6, 8, 4, 5, 7, 9, 4, 9, 9, 5, 4, 3, 5, 10, 10, 10, 6, 8, 10, 6, 6, 6, 6, 4, 5, 5, 6, 4, 5, 4, 4, 3, 160, 6, 5, 79, 6, 4, 6, 96, 4, 4, 6, 114, 15, 11, 4, 4, 4, 6, 4, 11, 8, 4, 77, 113, 75, 12, 7, 5, 511, 13, 8, 12, 16, 17, 12, 9, 21, 21, 4, 10, 16, 18, 7, 7, 17, 4, 4, 8, 6, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 10, 3, 5, 4, 6, 4, 5, 8, 5, 7, 5, 7, 55, 6, 13, 7, 4, 8, 112, 5, 8, 4, 4, 7, 4, 8, 16, 4, 12, 28, 6, 9, 31, 4, 6, 10, 4, 6, 8, 5, 12, 16, 291, 5, 66, 6, 6, 5, 4, 7, 9, 16, 3, 8, 7, 4, 112, 6, 15, 9, 3, 20, 13, 6, 4, 15, 10, 4, 27, 5, 9, 14, 8, 55, 10, 8, 14, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [15, 4, 4, 267, 4, 5, 5, 6, 9, 5, 4, 5, 5, 6, 5, 12, 8, 6, 4, 5, 13, 7, 4, 4, 4, 5, 6, 50, 5, 4, 10, 5, 86, 4, 3, 7, 5, 6, 4, 5, 4, 5, 4, 11, 3, 10, 5, 590, 17, 6, 6, 4, 3, 7, 430, 5, 7, 4, 4, 8, 5, 8, 5, 575, 13, 91, 377, 5, 11, 19, 19, 4, 5, 5, 5, 11, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [6, 6, 4, 4, 4, 10, 6, 7, 5, 7, 9, 3, 4, 10, 6, 4, 4, 5, 4, 6, 5, 3, 4, 8, 3, 7, 4, 19, 7, 4, 4, 5, 3, 4, 3, 6, 4, 4, 8, 5, 7, 5, 39, 5, 8, 6, 8, 5, 6, 5, 6, 6, 4, 10, 100, 4, 4, 4, 507, 7, 6, 425, 4, 5, 65, 9, 69, 67, 5, 8, 4, 71, 19, 6, 6, 6, 4, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [8, 6, 7, 11, 5, 10, 4, 26, 12, 9, 7, 5, 8, 4, 7, 4, 6, 5, 6, 9, 9, 11, 4, 6, 4, 9, 198, 8, 3, 5, 18, 9, 13, 4, 13, 12, 4, 29, 5, 4, 4, 10, 23, 12, 11, 31, 290, 5, 9, 3, 5, 4, 9, 7, 12, 7, 4, 7, 336, 252, 4, 5, 10, 5, 10, 294, 5, 10, 4, 11, 23, 199, 25, 10, 4, 14, 6, 6, 7, 11, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [9, 6, 5, 4, 4, 4, 4, 7, 8, 4, 5, 5, 8, 4, 6, 3, 203, 10, 5, 7, 4, 141, 9, 8, 3, 9, 4, 46, 5, 5, 10, 5, 4, 4, 3, 8, 7, 6, 7, 14, 10, 7, 9, 9, 4, 4, 4, 4, 6, 4, 4, 38, 42, 5, 10, 69, 7, 11, 4, 8, 7, 17, 11, 8, 6, 8, 36, 9, 19, 13, 15, 6, 3, 3, 7, 9, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [5, 8, 4, 5, 5, 3, 4, 4, 4, 8, 5, 9, 11, 6, 6, 4, 5, 6, 10, 10, 4, 10, 11, 6, 40, 8, 7, 10, 10, 4, 5, 4, 6, 6, 5, 8, 124, 8, 8, 7, 5, 6, 10, 4, 4, 13, 56, 6, 19, 7, 9, 4, 4, 16, 179, 14, 8, 12, 7, 10, 12, 7, 13, 6, 12, 20, 10, 4, 4, 12, 12, 6, 8, 10]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [11, 6, 11, 5, 9, 3, 7, 9, 4, 6, 11, 4, 11, 5, 9, 8, 4, 6, 8, 18, 8, 6, 3, 4, 4, 12, 6, 11, 4, 7, 7, 12, 119, 4, 6, 8, 25, 3, 5, 8, 4, 13, 27, 5, 4, 11, 4, 7, 10, 4, 10, 72, 6, 11, 8, 16, 4, 4, 5, 29, 9, 33, 7, 11, 5, 12, 7, 17, 10, 6, 12, 124, 7, 15, 16, 8, 263, 8, 10, 4, 30, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [4, 11, 9, 10, 5, 5, 11, 3, 9, 9, 19, 6, 8, 10, 6, 9, 7, 4, 3, 11, 8, 7, 5, 10, 4, 8, 8, 310, 11, 11, 7, 8, 4, 3, 4, 5, 7, 6, 12, 10, 6, 4, 8, 9, 8, 5, 12, 154, 5, 8, 18, 17, 8, 12, 43, 4, 6, 11, 8, 19, 24, 4, 34, 35, 450, 19, 8, 10, 8, 17, 219, 234, 16, 10, 6, 10, 11, 5, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [10, 8, 4, 7, 4, 4, 5, 5, 3, 9, 6, 7, 8, 9, 7, 5, 6, 4, 6, 5, 7, 6, 4, 6, 6, 4, 4, 10, 7, 4, 177, 8, 4, 6, 10, 5, 6, 14, 4, 6, 5, 8, 9, 35, 10, 4, 9, 14, 5, 6, 11, 7, 10, 89, 6, 3, 16, 88, 5, 5, 11, 12, 7, 8, 14, 9, 250, 7, 6, 14, 22, 6]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 7, 6, 5, 4, 3, 10, 5, 10, 6, 11, 11, 10, 6, 80, 5, 8, 132, 3, 15, 332, 4, 13, 3, 3, 4, 9, 10, 4, 12, 82, 7, 4, 11, 4, 13, 7, 6, 3, 10, 304, 14, 4, 39, 5, 4, 4, 7, 4, 18, 10, 22, 682, 18, 6, 6, 8, 6, 484, 12, 10, 402, 8, 6, 13, 16, 12, 7, 497, 7, 11, 9]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [9, 8, 4, 5, 5, 5, 6, 7, 5, 4, 6, 3, 3, 5, 7, 4, 74, 7, 5, 4, 4, 6, 6, 4, 6, 8, 4, 7, 5, 9, 7, 2, 15, 7, 7, 6, 8, 6, 4, 5, 4, 4, 5, 5, 4, 7, 10, 4, 4, 4, 9, 4, 5, 7, 12, 7, 4, 26, 5, 5, 11, 7, 27, 10, 12, 5, 53, 39, 26, 17, 6, 5, 4, 8, 83, 36]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [13, 9, 4, 4, 11, 4, 15, 11, 4, 5, 5, 48, 13, 262, 8, 6, 8, 5, 7, 12, 4, 11, 4, 222, 109, 5, 8, 6, 5, 4, 4, 4, 8, 5, 10, 6, 5, 7, 8, 5, 7, 7, 4, 6, 9, 7, 8, 8, 5, 10, 13, 7, 6, 5, 5, 9, 6, 11, 4, 14, 5, 5, 5, 14, 4, 11, 11, 6, 12, 12, 14, 8, 26, 6, 17, 213, 4, 16, 263, 44, 17, 252, 11, 5, 94, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [4, 3, 6, 5, 4, 4, 4, 4, 6, 4, 7, 8, 23, 5, 6, 5, 6, 4, 6, 7, 7, 9, 6, 4, 87, 6, 7, 7, 30, 3, 4, 9, 5, 5, 8, 8, 4, 7, 4, 8, 5, 4, 4, 56, 4, 7, 4, 4, 4, 4, 5, 7, 4, 10, 7, 5, 4, 17, 126, 8, 6, 44, 5, 8, 7, 9, 8, 6, 6, 5, 4, 5]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 6, 4, 7, 4, 8, 7, 6, 8, 9, 11, 6, 5, 8, 4, 7, 3, 59, 4, 4, 8, 71, 230, 429, 5, 8, 323, 6, 7, 5, 6, 299, 9, 8, 6, 231, 11, 4, 10, 10, 8, 4, 4, 9, 4, 4, 7, 14, 7, 4, 94, 5, 5, 480, 10, 8, 26, 318, 11, 5, 17, 11, 36, 4, 202, 15, 10, 18, 13, 10, 8, 17, 10, 6, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [11, 3, 11, 3, 11, 5, 7, 4, 5, 5, 6, 3, 7, 11, 9, 9, 4, 4, 5, 3, 170, 10, 29, 5, 8, 13, 3, 25, 12, 8, 9, 10, 13, 5, 3, 9, 6, 4, 5, 10, 4, 7, 4, 4, 7, 7, 5, 6, 15, 132, 89, 9, 13, 4, 135, 6, 11, 205, 4, 14, 13, 17, 10, 4, 9, 76, 228, 7, 91, 77, 5, 4, 48, 10]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 4, 9, 6, 4, 10, 71, 5, 5, 5, 309, 7, 8, 6, 3, 4, 10, 4, 5, 414, 5, 4, 468, 6, 5, 9, 279, 4, 135, 3, 10, 11, 465, 8, 335, 5, 6, 12, 4, 4, 8, 6, 5, 107, 4, 4, 4, 333, 5, 9, 12, 16, 589, 4, 324, 6, 6, 6, 9, 5, 7, 18, 12, 12, 11, 9, 5, 7, 17, 11, 17, 7, 5, 4, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [16, 6, 7, 7, 8, 11, 12, 7, 11, 5, 7, 15, 5, 9, 6, 13, 6, 7, 8, 380, 6, 8, 9, 4, 7, 6, 13, 7, 6, 10, 3, 6, 28, 404, 7, 10, 5, 6, 10, 6, 9, 8, 4, 5, 10, 12, 11, 13, 5, 6, 40, 4, 6, 8, 5, 8, 6, 7, 6, 8, 16, 7, 13, 13, 7, 6, 6, 24, 20, 7, 16, 4, 11, 8, 4, 5, 107, 92, 13, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [13, 8, 15, 5, 5, 10, 6, 11, 9, 22, 17, 5, 6, 117, 7, 5, 8, 10, 4, 18, 12, 10, 4, 8, 3, 4, 6, 4, 7, 8, 4, 7, 11, 5, 7, 6, 6, 3, 7, 7, 8, 4, 4, 6, 14, 6, 4, 15, 8, 8, 4, 10, 6, 10, 45, 14, 12, 9, 6, 5, 9, 5, 8, 10, 6, 6, 4, 10, 7, 373, 3, 78, 151, 12, 13, 68, 9, 3]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [4, 8, 10, 9, 9, 7, 13, 4, 10, 5, 3, 6, 8, 7, 9, 6, 9, 7, 6, 521, 6, 9, 4, 633, 3, 8, 8, 394, 506, 6, 4, 5, 419, 5, 6, 11, 7, 4, 6, 13, 4, 5, 10, 18, 11, 4, 6, 11, 22, 5, 4, 8, 8, 155, 5, 14, 4, 6, 10, 6, 147, 12, 11, 11, 4, 9, 71, 4, 4, 8, 7, 14, 4, 16, 7, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [4, 5, 9, 9, 8, 11, 9, 8, 159, 12, 4, 4, 5, 7, 12, 8, 5, 9, 7, 364, 35, 6, 423, 4, 3, 15, 6, 4, 5, 10, 4, 6, 7, 7, 8, 10, 9, 4, 96, 5, 11, 12, 9, 5, 4, 5, 3, 66, 11, 8, 4, 48, 8, 15, 11, 9, 8, 8, 12, 77, 20, 18, 8, 11, 243, 5, 8, 22, 20, 12, 8, 327, 8, 13, 4, 4, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 6, 7, 3, 8, 7, 4, 4, 9, 8, 10, 15, 7, 4, 7, 6, 8, 379, 4, 4, 7, 8, 9, 3, 44, 138, 9, 3, 4, 5, 5, 11, 9, 10, 3, 35, 11, 7, 10, 6, 4, 7, 10, 4, 6, 4, 315, 4, 4, 20, 14, 8, 9, 12, 8, 18, 326, 6, 6, 6, 6, 4, 254, 5, 14, 4, 15, 5, 5, 6, 6, 8, 4, 10, 5, 6, 6, 6, 507]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 9, 5, 8, 6, 10, 5, 3, 7, 4, 4, 120, 5, 7, 5, 21, 622, 5, 5, 7, 88, 6, 3, 6, 6, 4, 5, 5, 4, 12, 5, 7, 4, 4, 3, 502, 3, 3, 204, 7, 3, 14, 7, 4, 18, 11, 3, 4, 6, 6, 7, 6, 28, 4, 8, 9, 8, 7, 4, 28, 4, 6, 9, 8, 9, 10, 5, 6, 39, 9, 35, 13, 15, 4, 22, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [9, 4, 4, 4, 7, 5, 3, 5, 9, 9, 9, 9, 5, 5, 399, 10, 4, 111, 349, 6, 5, 9, 6, 8, 603, 23, 106, 3, 8, 170, 6, 4, 7, 6, 4, 3, 10, 11, 6, 7, 10, 4, 5, 5, 4, 4, 4, 6, 26, 8, 7, 9, 11, 18, 4, 8, 5, 7, 6, 7, 11, 5, 20, 36, 4, 10, 8, 4, 17, 18, 14, 4, 4, 5, 4, 7, 10, 4, 4, 96]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [7, 4, 6, 4, 4, 4, 7, 6, 3, 14, 4, 4, 191, 8, 7, 5, 3, 4, 5, 5, 6, 3, 4, 4, 3, 17, 9, 4, 5, 4, 4, 4, 4, 4, 8, 7, 4, 6, 11, 14, 6, 54, 122, 5, 4, 5, 4, 8, 5, 271, 6, 9, 7, 11, 6, 9, 4, 5, 54, 25, 144, 8, 15, 6, 529, 4, 15, 5, 8, 14, 6, 4, 4, 8, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 3, 7, 4, 4, 4, 13, 5, 6, 11, 88, 9, 4, 5, 5, 18, 8, 5, 4, 4, 4, 6, 4, 10, 10, 4, 5, 7, 4, 4, 6, 201, 7, 4, 4, 5, 13, 6, 4, 6, 6, 7, 5, 5, 35, 3, 539, 6, 4, 6, 8, 6, 9, 4, 34, 222, 5, 10, 5, 7, 5, 9, 4, 14, 11, 5, 10, 12, 8, 387, 5, 9, 4, 6, 7, 5, 8, 228]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 10, 4, 9, 8, 8, 3, 11, 8, 127, 8, 4, 13, 3, 6, 6, 10, 182, 4, 7, 5, 238, 12, 13, 12, 13, 4, 6, 4, 43, 4, 5, 262, 4, 6, 6, 5, 4, 4, 4, 7, 10, 7, 8, 10, 7, 11, 171, 4, 3, 7, 5, 6, 4, 11, 10, 9, 12, 8, 4, 8, 138, 5, 9, 18, 18, 8, 5, 8, 18, 5, 21, 4, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [6, 6, 7, 7, 9, 3, 3, 9, 6, 4, 12, 4, 5, 4, 7, 4, 11, 443, 4, 5, 6, 7, 7, 4, 189, 5, 13, 33, 4, 5, 54, 7, 4, 29, 4, 12, 7, 7, 11, 9, 15, 4, 10, 4, 19, 5, 4, 7, 317, 7, 9, 6, 18, 9, 16, 6, 260, 4, 5, 7, 7, 8, 4, 10, 256, 7, 18, 12, 10, 18, 10, 10, 18, 6, 5, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [14, 4, 9, 7, 7, 3, 6, 10, 13, 5, 11, 9, 13, 9, 6, 6, 12, 6, 7, 5, 8, 5, 154, 5, 531, 7, 7, 6, 4, 6, 6, 14, 17, 14, 4, 9, 12, 5, 8, 7, 8, 6, 9, 6, 11, 5, 5, 8, 144, 5, 22, 4, 31, 6, 7, 6, 5, 9, 7, 7, 10, 7, 16, 3, 5, 393, 455, 199, 11, 8, 7, 13, 4]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [3, 7, 8, 7, 7, 9, 3, 12, 16, 5, 6, 3, 4, 7, 11, 9, 4, 242, 16, 6, 4, 12, 4, 5, 4, 11, 6, 7, 5, 10, 7, 7, 226, 8, 470, 6, 4, 7, 9, 7, 7, 7, 10, 11, 6, 7, 4, 9, 150, 4, 4, 310, 4, 277, 8, 13, 10, 11, 21, 6, 11, 3, 5, 13, 11, 4, 9, 12, 4, 11, 9, 8, 8, 5, 9, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [7, 8, 4, 8, 8, 7, 5, 10, 5, 6, 7, 4, 12, 4, 5, 8, 5, 8, 4, 5, 9, 8, 4, 256, 6, 6, 6, 7, 5, 5, 9, 3, 6, 146, 20, 244, 8, 8, 6, 6, 5, 4, 9, 4, 5, 5, 7, 11, 54, 8, 4, 6, 5, 8, 5, 7, 34, 5, 57, 5, 7, 9, 13, 4, 14, 7, 4, 6, 6, 8, 7, 6, 7, 4]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [9, 13, 8, 7, 4, 6, 5, 4, 5, 4, 4, 10, 6, 8, 10, 7, 9, 8, 10, 6, 9, 18, 8, 9, 9, 50, 6, 50, 5, 10, 8, 9, 7, 8, 4, 4, 6, 125, 7, 548, 15, 4, 4, 10, 4, 11, 4, 7, 7, 57, 5, 133, 4, 9, 10, 4, 5, 5, 30, 10, 27, 6, 4, 4, 6, 7, 8, 5, 6, 32, 37, 11, 4, 5, 9, 23, 5, 6, 182, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [8, 9, 4, 6, 5, 4, 5, 9, 8, 82, 7, 7, 7, 117, 8, 7, 6, 3, 4, 10, 5, 4, 6, 190, 9, 5, 8, 15, 6, 9, 4, 4, 21, 200, 16, 4, 5, 138, 43, 10, 11, 8, 4, 5, 6, 4, 7, 11, 30, 4, 4, 189, 9, 6, 4, 59, 5, 5, 7, 8, 5, 5, 4, 7, 6, 4, 10, 8, 4, 8, 5, 9, 13, 9, 5, 5, 6, 5, 5, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [4, 11, 4, 9, 4, 4, 8, 13, 5, 11, 9, 4, 9, 7, 12, 6, 13, 9, 14, 4, 6, 8, 7, 103, 12, 7, 35, 5, 6, 10, 10, 5, 5, 9, 6, 23, 11, 264, 55, 7, 11, 13, 9, 6, 12, 10, 8, 10, 10, 6, 4, 8, 11, 11, 11, 55, 9, 19, 4, 9, 10, 9, 12, 9, 7, 11, 3, 9, 11, 170, 9, 10, 6, 6, 7, 9, 6, 4, 11, 10, 9, 12, 7, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [3, 6, 9, 9, 7, 8, 7, 8, 7, 10, 7, 13, 6, 10, 9, 6, 8, 8, 405, 4, 7, 5, 6, 4, 69, 9, 4, 7, 23, 6, 9, 612, 5, 13, 38, 3, 5, 10, 5, 12, 13, 7, 4, 7, 23, 6, 7, 4, 7, 4, 4, 4, 110, 11, 5, 4, 13, 5, 5, 20, 4, 4, 8, 8, 26, 8, 9, 8, 8, 6, 9, 5, 10, 7, 11, 8, 9, 8, 10, 4, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [4, 8, 6, 4, 3, 8, 7, 4, 5, 9, 8, 4, 6, 4, 5, 6, 4, 3, 8, 5, 8, 9, 27, 3, 10, 5, 9, 10, 8, 4, 4, 5, 8, 5, 7, 6, 9, 4, 7, 8, 238, 7, 9, 5, 20, 11, 37, 8, 7, 7, 5, 5, 486, 10, 10, 24, 5, 7, 6, 6, 7, 116, 6, 5, 7, 8, 7, 6, 4, 8, 6, 7, 6, 7, 21, 31, 8, 11, 5, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [5, 7, 6, 7, 5, 4, 8, 6, 8, 5, 6, 5, 4, 7, 21, 6, 5, 10, 6, 7, 4, 4, 11, 4, 7, 9, 4, 5, 15, 11, 4, 16, 8, 16, 8, 89, 4, 4, 3, 7, 4, 6, 8, 326, 3, 36, 76, 6, 4, 4, 147, 6, 5, 4, 5, 4, 4, 7, 7, 7, 5, 7, 12, 8, 4, 8, 7, 7, 5, 5]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [5, 5, 7, 6, 3, 10, 6, 11, 8, 5, 8, 10, 3, 10, 11, 11, 7, 5, 9, 8, 4, 7, 52, 46, 6, 10, 6, 8, 8, 7, 6, 4, 7, 4, 287, 10, 3, 8, 6, 11, 3, 5, 10, 3, 12, 8, 5, 6, 8, 9, 6, 5, 6, 53, 4, 9, 31, 9, 7, 6, 7, 16, 14, 43, 7, 5, 7, 8, 9, 6, 9, 9, 7, 10, 8, 10, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [12, 7, 9, 8, 11, 12, 10, 34, 9, 9, 7, 6, 4, 9, 9, 164, 7, 6, 9, 6, 8, 5, 3, 4, 7, 4, 5, 5, 4, 22, 7, 331, 42, 13, 4, 8, 3, 5, 6, 7, 165, 9, 55, 5, 50, 7, 192, 47, 5, 8, 6, 9, 9, 44, 44, 6, 10, 179, 609, 23, 4, 8, 5, 32, 16, 13, 14, 8, 304, 11, 8, 9, 9, 3, 14, 10, 206, 8, 7, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [4, 9, 11, 10, 5, 8, 11, 4, 6, 12, 4, 8, 4, 5, 11, 5, 20, 7, 5, 5, 12, 15, 5, 77, 8, 6, 20, 20, 6, 4, 19, 46, 5, 322, 7, 26, 7, 10, 6, 4, 12, 7, 44, 9, 11, 11, 8, 6, 9, 71, 51, 5, 11, 15, 16, 6, 7, 10, 5, 56, 14, 3, 5, 4, 10, 9, 8, 14, 8, 5, 4, 12, 9, 6, 8, 10, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [10, 7, 11, 7, 5, 4, 9, 9, 6, 27, 9, 579, 10, 438, 32, 10, 4, 11, 5, 9, 6, 4, 11, 6, 7, 4, 6, 5, 9, 3, 5, 5, 6, 6, 23, 4, 40, 4, 5, 8, 7, 7, 5, 18, 6, 51, 6, 6, 4, 4, 8, 4, 11, 6, 4, 5, 12, 11, 9, 17, 8, 58, 5, 4, 367, 5, 5, 6, 11, 6, 10, 8, 5, 5, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 10, 6, 6, 4, 3, 9, 7, 7, 278, 7, 8, 10, 4, 102, 10, 5, 18, 4, 3, 10, 6, 10, 11, 11, 10, 5, 3, 9, 5, 3, 7, 5, 6, 9, 7, 6, 4, 11, 4, 9, 8, 4, 9, 8, 8, 24, 7, 8, 7, 5, 6, 5, 5, 4, 6, 7, 13, 75, 4, 14, 8, 8, 10, 10, 7, 14, 9, 11, 9, 13, 8, 12, 4, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [5, 9, 6, 8, 7, 6, 7, 10, 4, 3, 10, 8, 5, 555, 24, 8, 6, 12, 10, 69, 11, 5, 186, 8, 4, 8, 7, 4, 6, 4, 5, 8, 6, 10, 4, 8, 6, 4, 4, 4, 3, 6, 9, 5, 17, 4, 3, 8, 7, 55, 8, 4, 10, 5, 7, 12, 11, 23, 5, 8, 9, 8, 12, 6, 5, 5, 8, 9, 10, 7, 8, 5, 17, 6, 49, 14, 32, 6, 16, 8, 5, 6, 4, 10, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [12, 4, 5, 3, 4, 4, 5, 7, 4, 6, 4, 4, 33, 7, 8, 4, 5, 4, 183, 4, 8, 5, 5, 9, 4, 8, 3, 5, 8, 7, 6, 5, 5, 5, 4, 502, 6, 5, 6, 6, 81, 6, 16, 7, 7, 14, 4, 4, 10, 8, 5, 31, 4, 6, 7, 6, 4, 10, 8, 4, 6, 10, 7, 7, 12, 36, 6, 6, 4, 105, 4]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 4, 5, 19, 6, 3, 5, 11, 11, 10, 7, 6, 4, 4, 8, 4, 11, 8, 6, 12, 7, 13, 11, 7, 9, 7, 12, 7, 12, 7, 3, 7, 13, 8, 9, 8, 11, 5, 6, 86, 4, 10, 16, 163, 91, 115, 11, 7, 370, 17, 208, 9, 8, 12, 11, 4, 98, 23, 11, 9, 8, 8, 9, 13, 13, 11, 62, 8, 8]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [7, 4, 8, 9, 3, 9, 7, 9, 5, 7, 4, 8, 41, 125, 6, 8, 16, 10, 22, 6, 21, 5, 7, 7, 14, 6, 77, 5, 21, 304, 16, 12, 12, 9, 6, 7, 5, 18, 5, 7, 7, 9, 6, 4, 4, 4, 4, 4, 5, 7, 5, 15, 3, 11, 5, 7, 24, 9, 6, 4, 3, 11, 41, 8, 7]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [8, 8, 4, 6, 6, 4, 4, 8, 11, 6, 4, 8, 9, 4, 14, 8, 4, 8, 7, 9, 5, 6, 8, 161, 8, 7, 3, 4, 9, 9, 4, 10, 8, 5, 3, 104, 4, 8, 18, 4, 4, 6, 6, 4, 18, 6, 6, 6, 174, 9, 5, 6, 4, 10, 4, 5, 9, 9, 8, 8, 280, 4, 9, 52, 45]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [5, 6, 8, 8, 11, 8, 6, 3, 6, 10, 6, 5, 4, 280, 10, 8, 7, 7, 7, 11, 9, 3, 10, 7, 453, 323, 8, 10, 8, 8, 8, 8, 4, 6, 8, 10, 8, 9, 13, 6, 6, 6, 9, 13, 4, 6, 13, 6, 5, 5, 12, 5, 5, 4, 5, 8, 6, 137, 152, 6, 361, 9, 8, 9, 8, 6, 8, 9, 15, 12, 4, 10, 8, 7, 7, 14, 4, 6, 7, 6, 5, 5, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [8, 8, 6, 6, 6, 7, 7, 6, 6, 11, 10, 4, 5, 270, 7, 7, 6, 4, 4, 4, 7, 7, 445, 9, 8, 7, 7, 9, 4, 9, 8, 9, 5, 10, 8, 7, 3, 6, 20, 13, 9, 6, 7, 3, 8, 4, 6, 5, 9, 8, 6, 7, 10, 14, 3, 6, 10, 13, 5, 6, 5, 12, 13, 11, 10, 26, 6, 4, 8, 6, 10, 8, 5, 8, 8, 9, 5, 11, 121, 10, 7, 83]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [4, 8, 8, 11, 13, 11, 4, 6, 4, 12, 6, 4, 3, 12, 4, 11, 5, 7, 4, 42, 5, 10, 10, 4, 4, 9, 8, 9, 7, 21, 62, 8, 9, 10, 10, 12, 4, 39, 9, 6, 8, 8, 4, 5, 9, 12, 11, 7, 151, 11, 9, 10, 12, 9, 11, 10, 6, 7, 14, 6, 9, 3, 7, 9, 15, 166, 8, 7, 11, 10, 8, 7, 4, 9, 8, 13, 6, 34]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 6, 3, 7, 4, 5, 4, 4, 8, 7, 9, 3, 4, 5, 7, 4, 8, 5, 4, 5, 8, 12, 34, 4, 5, 14, 9, 5, 4, 7, 4, 10, 19, 10, 8, 23, 4, 6, 6, 7, 8, 8, 8, 11, 9, 8, 3, 8, 12, 7, 5, 6, 5, 5, 8, 20, 9, 541, 9, 10, 4, 10, 6, 6]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [4, 9, 12, 8, 9, 10, 4, 10, 7, 4, 8, 10, 6, 5, 9, 7, 5, 100, 4, 6, 5, 425, 5, 6, 9, 6, 4, 9, 12, 11, 10, 6, 7, 9, 11, 165, 6, 10, 8, 5, 4, 7, 7, 11, 5, 10, 5, 4, 12, 8, 9, 3, 9, 17, 4, 4, 5, 8, 10, 141, 5, 11, 7, 5, 7, 11, 6, 8, 8, 9, 7, 7, 9, 6, 5, 8, 14, 7, 6, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [9, 9, 4, 4, 4, 6, 5, 4, 4, 9, 5, 6, 7, 6, 9, 6, 8, 11, 7, 6, 5, 31, 5, 8, 4, 5, 6, 47, 7, 5, 4, 4, 10, 10, 4, 6, 8, 7, 7, 4, 4, 4, 10, 5, 6, 14, 4, 4, 17, 8, 13, 5, 8, 3, 4, 5, 5, 13, 6, 6, 5, 10, 5, 4, 8, 5, 10, 13, 5, 9, 6, 3, 8, 5, 4, 4, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [8, 7, 7, 12, 11, 9, 12, 5, 16, 8, 11, 11, 12, 10, 6, 4, 11, 4, 7, 16, 13, 12, 4, 11, 11, 8, 9, 11, 10, 9, 7, 11, 5, 12, 10, 9, 5, 125, 8, 22, 8, 11, 6, 10, 4, 10, 14, 9, 8, 8, 6, 12, 9, 6, 8, 10, 9, 6, 10, 30, 12, 8, 28, 4, 11, 7, 11, 6, 4, 4, 11, 13, 14]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [18, 7, 13, 5, 6, 5, 5, 9, 7, 9, 3, 5, 12, 11, 19, 69, 9, 10, 5, 13, 12, 21, 43, 5, 6, 185, 17, 6, 8, 10, 5, 3, 23, 193, 4, 111, 108, 17, 14, 9, 4, 5, 11, 8, 100, 10, 9, 4, 10, 9, 9, 8, 8, 7, 10, 17, 7, 9, 368, 12, 19, 16, 512, 10, 14, 11, 6, 12, 15, 9, 4, 9]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [11, 5, 6, 9, 4, 7, 7, 4, 4, 4, 5, 6, 4, 8, 5, 8, 11, 7, 4, 4, 9, 6, 7, 3, 218, 12, 8, 8, 36, 8, 4, 4, 6, 7, 6, 365, 4, 10, 12, 23, 7, 4, 15, 8, 12, 7, 5, 5, 9, 10, 7, 199, 6, 7, 5, 4, 9, 4, 19, 8, 3, 9, 6, 5, 8]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [8, 5, 4, 11, 7, 7, 10, 5, 11, 5, 8, 5, 4, 3, 225, 12, 5, 5, 10, 4, 5, 500, 4, 7, 4, 229, 6, 7, 5, 7, 7, 9, 4, 8, 9, 14, 4, 12, 4, 10, 7, 11, 7, 6, 10, 6, 13, 10, 4, 4, 6, 8, 8, 112, 4, 6, 4, 7, 7, 7, 7, 6, 4, 7, 9, 6, 5, 7, 9, 6, 6, 5, 8]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [3, 7, 4, 8, 11, 10, 4, 4, 5, 6, 6, 5, 6, 14, 3, 6, 4, 4, 6, 6, 256, 5, 3, 5, 4, 344, 5, 10, 4, 13, 23, 14, 7, 4, 8, 5, 5, 7, 4, 4, 111, 4, 13, 4, 240, 6, 7, 8, 6, 6, 8, 120, 147, 7, 9, 204, 47, 4, 5, 4, 12, 7, 17, 4, 9, 6, 11, 44, 12, 12, 9, 10, 8, 12, 13, 124]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 4, 6, 13, 10, 9, 4, 5, 8, 5, 5, 395, 4, 5, 4, 4, 4, 4, 6, 3, 131, 8, 6, 7, 4, 2, 5, 6, 4, 5, 11, 4, 4, 4, 11, 11, 4, 10, 6, 10, 9, 4, 6, 25, 8, 15, 6, 4, 4, 4, 9, 15, 69, 27, 4, 4, 3, 18, 13, 6, 5, 8, 5, 11, 373, 11, 9, 7, 10, 8, 6]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [4, 9, 8, 7, 4, 9, 5, 9, 9, 7, 5, 13, 22, 266, 5, 9, 7, 9, 6, 7, 4, 10, 10, 8, 4, 83, 223, 15, 8, 5, 8, 12, 5, 7, 7, 6, 8, 8, 14, 10, 8, 10, 7, 9, 8, 8, 10, 34, 246, 9, 8, 12, 13, 11, 13, 6, 5, 8, 9, 10, 17, 4, 11, 13, 8, 33, 7, 9, 4, 10, 7, 46, 10, 9, 7, 9, 4, 9, 7, 9, 9, 12, 7, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [3, 2, 4, 4, 3, 5, 29, 6, 10, 6, 6, 8, 8, 4, 8, 8, 4, 4, 9, 5, 6, 10, 4, 9, 16, 10, 9, 7, 5, 10, 11, 10, 11, 5, 7, 9, 4, 5, 9, 9, 4, 12, 9, 4, 447, 8, 8, 8, 8, 5, 8, 8, 10, 10, 5, 8, 8, 6, 7, 4, 13, 12, 8, 10, 4, 22, 6, 10]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [15, 5, 14, 5, 4, 10, 7, 12, 12, 10, 10, 8, 7, 7, 7, 13, 4, 7, 9, 10, 4, 8, 6, 8, 6, 7, 5, 7, 7, 7, 10, 7, 10, 10, 9, 5, 30, 11, 11, 8, 10, 4, 11, 3, 7, 8, 5, 34, 6, 6, 7, 6, 9, 3, 7, 8, 7, 4, 5, 10, 10, 7, 10, 9, 10, 13, 6, 7, 223, 43, 11, 9, 11, 8, 9, 5, 12, 8, 11, 7, 5, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [9, 3, 4, 9, 10, 6, 9, 6, 5, 9, 8, 11, 42, 10, 10, 15, 5, 6, 14, 4, 11, 4, 226, 4, 110, 5, 7, 6, 7, 9, 8, 7, 14, 8, 11, 9, 8, 286, 4, 6, 8, 12, 3, 8, 7, 52, 4, 10, 52, 8, 9, 5, 8, 18, 10, 7, 8, 9, 33, 413, 265, 16, 11, 16, 15, 5, 35, 12, 18, 8, 5, 3, 6, 6, 6, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [4, 20, 6, 7, 14, 11, 19, 16, 9, 9, 5, 4, 5, 8, 4, 15, 7, 4, 7, 4, 10, 4, 4, 15, 11, 8, 5, 7, 7, 10, 15, 60, 10, 16, 8, 5, 9, 7, 5, 6, 5, 5, 16, 20, 11, 15, 7, 23, 16, 9, 43, 9, 6, 3, 14, 5, 9, 4, 5, 5, 7, 11, 23, 20, 15, 9, 6, 12, 10, 15, 6, 12, 7, 11, 4, 8, 7, 11, 11, 3, 4, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [8, 7, 11, 7, 6, 5, 5, 6, 3, 7, 7, 5, 6, 335, 6, 7, 133, 10, 8, 3, 4, 86, 6, 6, 4, 14, 5, 22, 7, 10, 7, 6, 6, 4, 4, 14, 7, 9, 6, 9, 4, 5, 353, 6, 7, 7, 24, 282, 11, 236, 7, 6, 9, 61, 7, 5, 10, 12, 9, 6, 6, 13, 5, 7, 12, 16, 19, 8, 9, 12, 6, 15, 7, 12, 4, 17, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [4, 5, 8, 6, 7, 8, 9, 7, 11, 7, 8, 4, 7, 5, 5, 329, 9, 4, 6, 7, 3, 4, 4, 5, 3, 6, 4, 288, 4, 7, 111, 192, 7, 8, 4, 7, 6, 4, 8, 9, 11, 7, 7, 8, 4, 4, 11, 79, 6, 22, 7, 6, 4, 3, 6, 7, 9, 4, 18, 4, 10, 9, 13, 6, 135, 4, 11, 8, 8, 9, 7, 9, 4, 4, 12, 6, 10, 6, 10, 4, 10, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [10, 10, 10, 9, 6, 7, 6, 4, 10, 5, 3, 6, 7, 8, 10, 3, 4, 4, 27, 3, 4, 109, 9, 118, 4, 6, 7, 8, 8, 436, 30, 65, 9, 8, 4, 9, 4, 13, 7, 10, 19, 6, 4, 12, 54, 8, 13, 5, 9, 11, 4, 7, 9, 6, 9, 10, 7, 138, 6, 6, 8, 7, 11, 5, 8, 8, 5, 6, 10, 163, 7, 9, 6, 8, 8, 11, 6, 31, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [19, 3, 16, 7, 14, 6, 13, 8, 9, 8, 8, 8, 9, 10, 12, 7, 4, 252, 13, 3, 129, 6, 3, 4, 4, 13, 95, 11, 8, 9, 6, 4, 10, 7, 11, 12, 9, 5, 10, 32, 6, 18, 7, 13, 4, 13, 9, 8, 64, 6, 5, 6, 8, 9, 4, 5, 10, 8, 5, 13, 10, 6, 8, 10, 14, 11, 11, 26, 8, 16, 16, 10, 15, 9, 11, 16, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [8, 9, 4, 5, 4, 4, 7, 7, 11, 8, 4, 7, 7, 3, 4, 7, 10, 8, 10, 4, 6, 3, 10, 6, 10, 159, 11, 4, 3, 4, 5, 10, 6, 6, 4, 8, 580, 4, 5, 4, 96, 5, 3, 28, 9, 6, 7, 4, 7, 5, 494, 6, 4, 7, 23, 21, 97, 10, 10, 7, 5, 5, 10, 8, 149, 12, 25, 6, 6, 8, 5, 4, 55, 13, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [21, 9, 3, 7, 8, 5, 7, 4, 8, 6, 7, 9, 7, 7, 7, 3, 8, 10, 8, 9, 5, 4, 6, 10, 4, 4, 4, 471, 9, 4, 7, 3, 15, 11, 7, 4, 7, 4, 6, 8, 11, 10, 12, 4, 9, 3, 4, 9, 6, 7, 7, 7, 7, 6, 4, 12, 5, 9, 3, 6, 9, 11, 11, 69, 8, 9, 6, 5, 7, 7, 5, 9, 10, 6, 9, 14, 7, 10, 5, 3, 9, 6, 6, 42]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [25, 6, 10, 10, 4, 6, 8, 8, 10, 5, 6, 4, 18, 4, 5, 12, 8, 7, 8, 9, 4, 7, 35, 54, 9, 10, 14, 4, 10, 3, 4, 10, 7, 7, 11, 8, 7, 8, 8, 9, 9, 24, 18, 12, 5, 71, 10, 8, 327, 9, 9, 5, 10, 9, 8, 12, 5, 9, 4, 8, 7, 8, 45, 9, 10, 8, 7, 7, 10, 9, 33, 9, 8, 10, 10, 76, 9, 9, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 4, 5, 10, 9, 8, 9, 10, 7, 5, 10, 9, 7, 7, 7, 7, 10, 6, 8, 10, 5, 14, 9, 8, 11, 9, 9, 7, 6, 10, 8, 11, 6, 65, 13, 8, 8, 9, 10, 9, 12, 11, 8, 10, 22, 7, 11, 10, 12, 12, 13, 4, 8, 12, 9, 8, 7, 10, 10, 12, 8, 6, 7, 7, 10, 11, 75, 13, 8, 9, 13, 8, 12, 9, 8, 7, 16, 7, 9, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [9, 13, 7, 5, 6, 9, 6, 13, 9, 8, 4, 4, 4, 13, 9, 6, 6, 8, 8, 4, 9, 5, 8, 8, 13, 10, 6, 6, 10, 8, 6, 7, 4, 4, 21, 7, 4, 32, 11, 7, 20, 10, 9, 9, 9, 6, 8, 4, 9, 457, 11, 36, 4, 7, 6, 5, 8, 8, 8, 5, 6, 9, 312, 13, 4, 33, 6, 13, 10, 6, 7, 5, 7, 33, 171, 10, 9, 8, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [4, 8, 15, 6, 9, 4, 9, 8, 5, 10, 6, 6, 4, 10, 8, 4, 9, 9, 8, 7, 14, 9, 11, 10, 7, 12, 11, 11, 10, 8, 9, 9, 7, 10, 12, 10, 5, 4, 7, 12, 10, 4, 12, 13, 12, 13, 8, 10, 5, 26, 14, 9, 5, 14, 9, 9, 9, 6, 94, 10, 39, 10, 8, 10, 10, 4, 8, 10, 5, 12, 6, 11, 8, 13, 618, 10, 9, 11, 9, 12, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [18, 9, 7, 9, 9, 6, 8, 7, 8, 11, 10, 8, 11, 5, 12, 465, 8, 9, 6, 45, 10, 8, 10, 12, 8, 4, 8, 8, 11, 8, 11, 7, 10, 275, 6, 9, 4, 12, 6, 7, 9, 5, 11, 10, 8, 9, 10, 482, 7, 8, 7, 4, 7, 7, 185, 203, 7, 12, 324, 9, 8, 7, 9, 7, 9, 14, 9, 12, 5, 4, 6, 6, 10, 6, 10, 8, 8, 9, 9, 11, 7, 11, 7, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [3, 9, 7, 8, 7, 8, 4, 5, 4, 9, 11, 5, 5, 8, 18, 13, 7, 10, 4, 8, 3, 5, 9, 4, 8, 7, 7, 9, 8, 8, 8, 3, 4, 7, 12, 8, 4, 4, 4, 4, 8, 5, 7, 7, 7, 5, 4, 4, 9, 6, 7, 8, 9, 11, 12, 6, 41, 4, 6, 7, 6, 8, 6, 8, 9, 18, 6, 5, 5, 4, 6, 12, 8, 8, 11, 7, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [8, 9, 13, 5, 13, 8, 8, 8, 7, 10, 13, 9, 4, 10, 7, 9, 5, 4, 11, 9, 137, 10, 14, 9, 36, 4, 15, 9, 26, 11, 565, 9, 9, 17, 10, 5, 10, 5, 9, 13, 12, 6, 4, 43, 15, 11, 44, 9, 20, 4, 10, 21, 8, 9, 12, 344, 8, 9, 9, 10, 8, 18, 294, 12, 4, 10, 8, 69, 6, 7, 9, 6, 6, 9, 12, 48, 11, 11, 9, 10, 10, 11, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [13, 9, 8, 12, 10, 9, 3, 7, 9, 11, 10, 10, 12, 3, 5, 7, 8, 10, 4, 10, 8, 9, 6, 11, 6, 7, 11, 27, 12, 7, 10, 4, 9, 6, 8, 10, 6, 100, 155, 4, 9, 13, 9, 7, 6, 4, 24, 9, 5, 8, 6, 7, 5, 9, 10, 35, 12, 7, 11, 8, 5, 6, 11, 178, 10, 7, 6, 12, 10, 3, 8, 12, 10, 12, 8, 5, 7, 6, 9, 11, 12, 10, 7, 9, 8, 7, 8, 9, 7, 5, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [14, 7, 10, 8, 4, 10, 9, 8, 12, 5, 6, 11, 8, 5, 9, 4, 7, 6, 18, 9, 5, 7, 14, 11, 15, 7, 10, 4, 12, 10, 96, 8, 61, 5, 312, 9, 13, 9, 7, 33, 7, 7, 5, 226, 444, 4, 11, 6, 5, 160, 50, 17, 291, 8, 5, 116, 10, 5, 6, 4, 7, 8, 7, 8, 7, 10, 8, 8, 9, 10, 9, 170, 346, 5, 5, 10, 7, 4, 11, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 7, 7, 5, 15, 5, 6, 6, 6, 3, 4, 4, 6, 6, 212, 9, 6, 8, 6, 4, 11, 27, 9, 7, 6, 6, 360, 6, 4, 4, 6, 4, 11, 38, 15, 4, 4, 4, 7, 5, 11, 4, 5, 20, 6, 9, 4, 5, 5, 8, 12, 5, 15, 6, 6, 9, 5, 4, 5, 10, 5, 10, 5, 8, 5, 4, 10, 4, 6, 4, 6, 9, 7, 8, 10, 11, 9, 28]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [10, 10, 9, 7, 240, 46, 4, 6, 6, 11, 8, 4, 6, 6, 5, 9, 11, 4, 50, 13, 4, 4, 4, 6, 12, 7, 7, 8, 12, 6, 11, 11, 5, 4, 6, 5, 5, 4, 10, 6, 12, 10, 4, 8, 7, 10, 12, 136, 10, 55, 55, 5, 13, 10, 274, 75, 7, 8, 4, 7, 7, 8, 6, 11, 6, 10, 8, 7, 6, 4, 9, 6, 9]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [20, 7, 11, 12, 11, 4, 9, 12, 12, 146, 7, 14, 8, 4, 8, 9, 29, 10, 10, 18, 10, 8, 10, 8, 3, 14, 8, 11, 10, 12, 9, 7, 9, 13, 8, 9, 13, 7, 9, 13, 9, 31, 4, 16, 10, 11, 8, 4, 3, 13, 13, 6, 18, 11, 7, 158, 11, 10, 7, 12, 9, 10, 13, 14, 9, 6, 7, 5, 125, 12, 10, 7, 10, 12, 10, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [11, 9, 12, 4, 12, 6, 11, 10, 8, 9, 18, 9, 23, 6, 11, 12, 29, 13, 10, 8, 6, 6, 8, 6, 17, 10, 9, 34, 7, 4, 3, 7, 6, 11, 10, 16, 8, 14, 13, 14, 11, 6, 5, 5, 7, 6, 6, 14, 13, 11, 4, 8, 17, 153, 5, 12, 134, 9, 12, 13, 5, 11, 7, 4, 88, 9, 80, 10, 10, 7, 11, 15, 8, 8, 10, 6, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [16, 11, 5, 13, 12, 7, 4, 8, 7, 8, 9, 11, 9, 13, 10, 4, 9, 7, 12, 14, 6, 4, 7, 12, 9, 10, 13, 10, 9, 12, 11, 11, 12, 9, 17, 6, 10, 7, 514, 9, 8, 16, 10, 15, 12, 365, 11, 25, 12, 7, 11, 8, 11, 11, 76, 8, 7, 3, 12, 18, 9, 4, 9, 6, 9, 11, 55, 6, 20, 11, 8, 10, 8, 4, 9, 7, 4, 17, 12, 16, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 8, 10, 7, 4, 6, 4, 11, 6, 8, 10, 6, 12, 11, 11, 6, 6, 13, 9, 6, 9, 3, 9, 8, 6, 12, 10, 10, 91, 7, 11, 7, 7, 8, 8, 7, 12, 7, 4, 8, 7, 10, 8, 13, 7, 7, 51, 8, 5, 6, 6, 6, 10, 17, 141, 10, 7, 5, 332, 4, 7, 8, 12, 11, 9, 8, 7, 6, 9, 6, 8, 6, 5, 238]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [6, 5, 9, 10, 9, 5, 10, 10, 10, 4, 8, 8, 7, 5, 8, 9, 8, 10, 5, 12, 11, 9, 10, 9, 10, 10, 16, 11, 10, 4, 11, 9, 3, 22, 8, 8, 9, 9, 5, 6, 9, 5, 13, 8, 10, 5, 7, 8, 104, 408, 8, 9, 8, 9, 13, 11, 10, 10, 10, 7, 5, 7, 9, 9, 13, 10, 15, 11, 7, 11, 10, 10, 13, 15, 10, 16, 6, 12, 8, 5, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [5, 8, 6, 5, 4, 4, 4, 6, 7, 5, 8, 5, 4, 7, 205, 10, 5, 58, 9, 18, 5, 5, 8, 5, 8, 7, 8, 9, 6, 6, 6, 7, 9, 6, 7, 9, 9, 9, 10, 10, 4, 40, 12, 4, 5, 4, 15, 6, 7, 4, 9, 4, 9, 8, 199, 11, 7, 9, 8, 9, 9, 5, 11, 9, 10, 6, 4, 4, 6, 8, 4, 9, 9, 8, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [10, 4, 4, 5, 4, 4, 7, 4, 8, 4, 8, 6, 9, 11, 6, 7, 6, 4, 7, 6, 8, 5, 4, 8, 22, 6, 6, 8, 4, 4, 8, 6, 4, 7, 12, 6, 5, 7, 8, 6, 7, 8, 26, 45, 6, 6, 7, 7, 6, 6, 6, 7, 7, 8, 13, 7, 10, 7, 330, 5, 6, 4, 7]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [5, 9, 9, 7, 8, 14, 4, 6, 34, 10, 10, 9, 16, 7, 29, 6, 6, 9, 7, 9, 13, 6, 10, 6, 6, 8, 25, 67, 10, 9, 8, 8, 7, 4, 87, 13, 8, 7, 7, 14, 8, 4, 9, 8, 10, 11, 11, 12, 8, 9, 7, 11, 10, 6, 31, 14, 7, 14, 252, 6, 11, 11, 7, 6, 8, 7, 10, 9, 11, 9, 10, 13, 8, 16, 9, 9, 8, 8, 10, 7, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [3, 8, 5, 7, 5, 5, 6, 5, 8, 4, 8, 6, 9, 6, 11, 10, 11, 7, 7, 5, 8, 14, 8, 10, 8, 3, 6, 7, 4, 8, 4, 14, 10, 10, 12, 7, 6, 8, 11, 11, 12, 4, 11, 12, 7, 6, 18, 13, 5, 4, 9, 9, 5, 7, 5, 3, 5, 11, 12, 11, 11, 7, 8, 15, 97, 5, 6, 18, 8, 8, 7, 13, 7, 6, 9, 9, 8, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [5, 12, 10, 9, 7, 9, 4, 6, 7, 7, 9, 8, 6, 412, 6, 236, 8, 9, 8, 6, 7, 7, 10, 6, 5, 9, 13, 9, 6, 6, 23, 7, 8, 8, 11, 10, 7, 11, 10, 8, 9, 10, 9, 12, 6, 7, 5, 8, 6, 10, 6, 10, 105, 7, 421, 6, 8, 6, 11, 5, 7, 11, 10, 6, 157, 5, 8, 17, 126, 14, 5, 8, 7, 195, 9, 16]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [12, 6, 5, 11, 9, 10, 5, 6, 6, 9, 8, 12, 7, 8, 7, 5, 11, 7, 11, 4, 11, 7, 12, 538, 10, 8, 10, 11, 8, 20, 5, 9, 15, 11, 11, 10, 15, 11, 35, 22, 8, 9, 9, 6, 9, 4, 9, 28, 9, 19, 28, 6, 6, 13, 14, 7, 4, 6, 9, 143, 10, 36, 9, 11, 8, 55, 14, 8, 5, 17, 10, 6, 16, 6, 8, 4, 7, 13, 4, 5, 9, 10, 14, 14, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [12, 11, 9, 6, 14, 13, 9, 9, 9, 10, 8, 6, 11, 9, 5, 9, 193, 7, 12, 9, 4, 7, 11, 8, 12, 15, 10, 9, 4, 11, 10, 12, 9, 9, 9, 12, 12, 9, 8, 5, 8, 6, 7, 8, 16, 4, 12, 11, 13, 3, 9, 8, 12, 7, 7, 9, 11, 10, 9, 10, 211, 6, 10, 11, 9, 11, 15, 8, 8, 8, 4, 6, 159, 9, 126, 13, 114, 509]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [12, 9, 9, 9, 9, 9, 10, 4, 3, 12, 12, 13, 11, 13, 36, 7, 9, 48, 9, 6, 9, 12, 6, 8, 13, 12, 6, 8, 181, 14, 11, 5, 11, 6, 10, 12, 374, 10, 11, 11, 16, 8, 8, 9, 10, 7, 10, 7, 45, 6, 9, 14, 12, 17, 9, 11, 8, 9, 82, 6, 6, 8, 49, 9, 8, 13, 6, 9, 25, 12, 9, 8, 13, 9, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [2, 4, 3, 6, 3, 11, 10, 5, 8, 6, 9, 9, 7, 11, 5, 8, 14, 7, 27, 7, 6, 5, 10, 6, 9, 9, 6, 26, 19, 3, 61, 3, 12, 21, 11, 7, 6, 53, 4, 5, 10, 35, 9, 23, 35, 10, 18, 62, 10, 16, 7, 11, 8, 4, 8, 16, 8, 8, 10, 11, 7, 5, 11, 13, 9, 12, 10, 10, 10, 7, 10, 12, 6, 8, 12, 10, 7, 9, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [10, 8, 17, 4, 4, 9, 9, 9, 60, 14, 8, 7, 4, 9, 6, 3, 6, 6, 3, 296, 4, 158, 4, 4, 205, 8, 14, 12, 10, 4, 4, 9, 4, 10, 4, 6, 8, 9, 8, 45, 8, 4, 9, 8, 8, 5, 5, 9, 48, 8, 10, 7, 12, 9, 6, 12, 12, 5, 4, 11, 4, 16]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [15, 4, 4, 6, 4, 4, 3, 8, 5, 4, 4, 6, 7, 7, 6, 5, 4, 7, 4, 10, 5, 4, 4, 9, 8, 7, 5, 9, 8, 5, 10, 134, 8, 7, 21, 152, 13, 13, 8, 8, 4, 504, 9, 8, 6, 13, 7, 191, 4, 7, 68, 2, 6, 8, 11, 9, 9, 5, 10, 13, 11, 7, 10, 8, 9, 6, 9, 6]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [24, 8, 3, 9, 9, 7, 4, 6, 10, 3, 4, 7, 8, 6, 10, 236, 9, 5, 6, 8, 5, 7, 9, 16, 5, 9, 10, 14, 23, 6, 7, 7, 7, 27, 6, 7, 4, 9, 12, 10, 11, 9, 5, 4, 81, 9, 7, 13, 5, 37, 9, 10, 6, 8, 21, 5, 10, 8, 4, 9, 70, 8, 11, 11, 9, 15, 311, 5, 11, 9, 12, 8, 9, 7, 8, 319, 6, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [5, 4, 8, 12, 4, 4, 4, 8, 9, 5, 6, 7, 3, 7, 272, 9, 7, 4, 7, 12, 38, 9, 3, 9, 9, 10, 7, 4, 22, 7, 5, 9, 12, 9, 9, 4, 396, 6, 6, 11, 4, 130, 13, 78, 13, 3, 7, 24, 4, 6, 8, 4, 4, 4, 6, 11, 20, 11, 5, 5, 4, 11, 11, 303, 10, 13, 4, 9, 5, 12, 11]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [2, 5, 4, 6, 9, 7, 6, 9, 4, 8, 3, 4, 5, 10, 10, 8, 363, 10, 6, 4, 4, 10, 4, 5, 4, 351, 7, 4, 317, 5, 13, 4, 9, 4, 4, 6, 4, 5, 11, 8, 5, 11, 10, 188, 8, 8, 11, 6, 7, 7, 6, 108, 4, 12, 6, 8, 10, 6, 12, 3, 5, 8, 6, 6, 13, 4]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [4, 8, 3, 27, 10, 9, 11, 11, 8, 10, 9, 15, 4, 8, 8, 7, 4, 8, 424, 12, 10, 4, 9, 8, 158, 8, 6, 8, 12, 4, 11, 10, 4, 7, 12, 6, 9, 64, 456, 8, 8, 5, 4, 9, 9, 29, 7, 9, 5, 10, 37, 553, 7, 9, 39, 203, 8, 4, 7, 13, 11, 9, 9, 10, 7, 9, 13, 8, 8, 10, 9, 11, 45, 7, 9, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [10, 4, 10, 4, 9, 3, 6, 10, 8, 9, 6, 129, 4, 4, 91, 5, 11, 9, 9, 11, 6, 6, 12, 29, 11, 7, 9, 5, 9, 7, 7, 9, 17, 4, 9, 8, 11, 7, 92, 10, 8, 5, 10, 5, 12, 12, 8, 6, 4, 9, 4, 4, 15, 7, 8, 10, 14, 6, 8, 10, 10, 9, 5, 11, 8, 8, 5, 9, 30, 5, 6, 10, 12, 8, 7, 42]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [22, 14, 5, 11, 8, 8, 10, 10, 8, 12, 6, 10, 8, 7, 7, 8, 10, 13, 7, 10, 7, 6, 12, 13, 9, 13, 67, 7, 4, 9, 12, 12, 6, 11, 7, 9, 14, 4, 11, 9, 8, 6, 18, 6, 6, 11, 4, 4, 3, 12, 9, 7, 14, 9, 6, 14, 13, 13, 6, 7, 10, 9, 85, 12, 14, 11, 8, 5, 11, 9, 8, 12, 4, 11, 12, 3, 50, 8, 8, 12, 10, 10, 7, 11, 12, 7, 8, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 11, 11, 14, 4, 3, 6, 4, 8, 9, 13, 6, 5, 5, 9, 10, 42, 6, 5, 110, 9, 7, 6, 301, 5, 10, 8, 8, 7, 7, 17, 10, 7, 5, 8, 125, 8, 66, 147, 4, 7, 8, 4, 5, 10, 48, 7, 7, 10, 11, 8, 6, 4, 9, 13, 7, 3, 10, 9, 10, 4, 8, 11, 8, 4, 10, 8, 15, 4, 44, 8, 5, 5, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [7, 5, 6, 4, 8, 10, 59, 8, 8, 18, 10, 9, 11, 10, 241, 4, 11, 133, 16, 13, 7, 9, 9, 36, 4, 11, 12, 10, 8, 192, 6, 8, 5, 9, 8, 6, 9, 7, 8, 5, 12, 7, 7, 9, 6, 12, 10, 4, 10, 9, 9, 8, 11, 9, 11, 8, 9, 9, 9, 10, 9, 5, 11, 9, 10, 12, 5, 8, 5, 4, 4, 6, 15, 13, 8, 11, 9, 12, 8, 8, 15, 11, 13, 10, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 8, 5, 4, 8, 8, 8, 10, 8, 5, 4, 6, 8, 11, 4, 9, 6, 5, 10, 8, 10, 9, 4, 3, 10, 4, 9, 8, 6, 9, 4, 6, 5, 5, 6, 8, 4, 8, 12, 7, 7, 28, 6, 12, 44, 8, 35, 7, 6, 6, 8, 11, 5, 21, 8, 10, 4, 6, 11, 14, 5, 7, 10, 7, 10, 9, 12, 7, 10, 7, 7, 277]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [4, 13, 5, 10, 4, 9, 7, 10, 10, 4, 7, 10, 7, 8, 8, 11, 11, 9, 12, 10, 14, 10, 9, 7, 7, 8, 7, 9, 4, 9, 3, 12, 12, 20, 7, 14, 8, 6, 6, 7, 28, 13, 11, 9, 5, 5, 13, 13, 18, 10, 9, 10, 10, 7, 6, 4, 4, 4, 4, 8, 8, 14, 11, 8, 10, 12, 483, 10, 5, 3, 10, 11]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [3, 7, 7, 9, 8, 9, 5, 8, 5, 8, 10, 9, 4, 8, 69, 6, 12, 8, 5, 6, 9, 6, 9, 4, 4, 11, 8, 7, 11, 399, 14, 10, 9, 6, 4, 14, 8, 12, 8, 10, 9, 11, 8, 8, 3, 13, 8, 5, 9, 9, 8, 5, 215, 6, 11, 10, 10, 6, 10, 5, 9, 9, 8, 9, 9, 20, 8, 3, 7, 7, 8, 8, 9, 10, 10, 9, 10, 17]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [6, 10, 12, 11, 4, 7, 8, 10, 7, 4, 6, 12, 10, 5, 4, 7, 5, 9, 10, 4, 10, 12, 130, 11, 9, 13, 11, 8, 5, 9, 8, 12, 5, 13, 15, 6, 8, 5, 8, 6, 12, 12, 10, 10, 10, 5, 5, 10, 12, 4, 9, 4, 5, 111, 13, 5, 21, 6, 3, 7, 12, 7, 6, 126, 5, 8, 6, 7, 13, 4, 8, 10, 6, 6, 13, 5, 137, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [8, 6, 7, 7, 4, 4, 8, 4, 5, 37, 8, 3, 7, 383, 18, 6, 14, 7, 10, 8, 4, 7, 8, 18, 8, 5, 8, 11, 9, 9, 5, 9, 4, 10, 9, 5, 7, 46, 8, 5, 9, 4, 3, 2, 7, 4, 9, 6, 7, 10, 4, 6, 8, 4, 44, 13, 11, 11, 3, 7, 16, 67, 6, 7, 11, 7, 5, 11, 5, 59, 56, 8, 11, 14, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [35, 6, 3, 10, 12, 7, 6, 4, 3, 7, 8, 5, 275, 7, 5, 11, 10, 10, 8, 19, 5, 4, 23, 8, 4, 12, 6, 9, 5, 6, 15, 5, 8, 19, 10, 8, 4, 5, 7, 11, 5, 13, 5, 66, 5, 7, 9, 4, 4, 12, 19, 72, 17, 8, 6, 6, 6, 6, 9, 116, 5, 9, 5, 6, 9, 11]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [4, 8, 9, 7, 10, 7, 7, 5, 4, 24, 11, 9, 11, 13, 9, 5, 7, 9, 12, 9, 4, 14, 8, 20, 8, 10, 6, 12, 6, 8, 28, 8, 11, 14, 20, 9, 17, 5, 37, 6, 58, 8, 5, 9, 11, 10, 7, 9, 4, 7, 8, 9, 9, 6, 6, 6, 5, 12, 8, 7, 5, 10, 9, 4, 7, 9, 9, 10, 7, 6, 9, 8, 16, 9, 7, 9, 9, 12, 60, 11, 13, 7, 15]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [20, 18, 11, 16, 7, 12, 7, 8, 8, 14, 16, 7, 7, 14, 11, 9, 5, 8, 14, 4, 3, 8, 16, 2, 8, 11, 4, 15, 9, 8, 35, 10, 16, 45, 8, 8, 9, 13, 453, 15, 8, 11, 63, 9, 18, 19, 3, 5, 15, 10, 8, 15, 10, 9, 10, 13, 10, 12, 15, 37, 8, 3, 11, 8, 8, 13, 11, 9, 8, 166, 13]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [16, 17, 6, 5, 5, 8, 12, 9, 8, 4, 10, 10, 9, 4, 7, 9, 9, 6, 6, 7, 21, 9, 5, 17, 7, 12, 18, 9, 12, 4, 10, 14, 11, 12, 17, 13, 10, 108, 10, 9, 56, 6, 80, 12, 7, 13, 10, 11, 9, 6, 12, 7, 9, 13, 8, 10, 8, 10, 61, 6, 12, 4, 13, 9, 10, 8, 4, 12, 4, 8, 14, 9, 26, 9, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [8, 12, 4, 4, 4, 5, 2, 10, 11, 12, 4, 14, 5, 5, 6, 6, 4, 10, 11, 10, 4, 7, 2, 10, 6, 18, 10, 10, 48, 11, 9, 7, 8, 7, 9, 4, 5, 8, 7, 16, 9, 7, 6, 9, 11, 4, 10, 15, 16, 19, 6, 12, 9, 7, 5, 4, 10, 14, 5, 366, 4, 78, 10, 29, 10, 17, 13, 110, 6, 11, 10]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [12, 6, 5, 9, 8, 5, 9, 4, 9, 9, 10, 7, 10, 9, 7, 5, 4, 8, 3, 4, 7, 3, 6, 8, 5, 7, 61, 9, 5, 9, 10, 7, 6, 5, 34, 4, 8, 12, 10, 7, 73, 5, 4, 4, 8, 8, 7, 7, 4, 6, 4, 8, 6, 4, 302, 10, 8, 6, 6, 7, 8, 80, 4, 6, 5, 5, 6, 10, 6, 6]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [6, 6, 3, 6, 9, 6, 4, 4, 6, 8, 77, 5, 8, 3, 5, 4, 6, 4, 5, 21, 5, 5, 8, 7, 5, 12, 8, 4, 5, 6, 3, 6, 4, 5, 3, 5, 4, 4, 9, 6, 4, 6, 5, 8, 6, 5, 5, 8, 6, 6, 4, 8, 6, 5, 78, 7, 135, 6, 6, 124, 7, 8, 4, 3, 12, 7, 8, 3, 5, 7, 4, 8, 7, 5, 9, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [9, 4, 11, 9, 12, 11, 18, 7, 8, 4, 14, 8, 15, 11, 46, 10, 4, 51, 11, 9, 9, 7, 11, 6, 10, 9, 8, 13, 13, 4, 10, 13, 8, 8, 13, 14, 13, 5, 10, 12, 10, 11, 15, 11, 8, 12, 24, 11, 13, 6, 11, 10, 11, 8, 7, 12, 8, 21, 7, 9, 48, 13, 10, 6, 5, 11, 14, 8, 9, 8, 8, 9, 11, 9, 5, 12, 8, 14, 13, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [13, 12, 8, 8, 9, 7, 8, 4, 3, 7, 5, 95, 355, 4, 4, 6, 5, 5, 7, 9, 6, 5, 466, 7, 7, 15, 10, 5, 4, 4, 372, 8, 9, 10, 9, 7, 10, 7, 9, 5, 20, 5, 10, 13, 9, 8, 9, 9, 10, 7, 9, 10, 10, 11, 9, 9, 7, 5, 350, 8, 8, 10, 7, 10, 10, 17, 7, 7, 47]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [5, 5, 4, 6, 6, 4, 9, 6, 7, 10, 5, 5, 9, 6, 10, 23, 12, 12, 7, 4, 9, 4, 261, 13, 9, 7, 8, 5, 5, 9, 24, 5, 7, 3, 11, 7, 7, 8, 7, 4, 5, 10, 9, 10, 6, 4, 8, 10, 3, 5, 11, 4, 25, 6, 4, 7, 7, 3, 11, 9, 10, 12, 9, 7, 5, 7, 7, 4, 5, 9, 5, 6, 5, 7, 6, 6, 7, 4, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [6, 8, 11, 4, 4, 4, 11, 7, 7, 5, 6, 9, 5, 4, 8, 4, 6, 10, 6, 8, 5, 5, 6, 8, 14, 14, 8, 20, 6, 4, 17, 8, 12, 6, 9, 7, 8, 10, 5, 6, 8, 13, 6, 9, 9, 3, 8, 8, 13, 5, 8, 4, 6, 7, 5, 8, 6, 8, 8, 6, 9, 10, 18, 5, 9, 11, 8, 11, 6, 683, 9, 7, 12, 6, 6, 7, 6, 2, 7, 12, 6]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [7, 8, 6, 4, 6, 9, 9, 4, 9, 3, 6, 5, 8, 4, 7, 8, 10, 8, 6, 6, 9, 4, 83, 10, 3, 11, 7, 7, 7, 11, 9, 349, 8, 11, 6, 4, 10, 13, 9, 7, 11, 9, 11, 4, 102, 6, 21, 9, 13, 10, 10, 7, 10, 9, 6, 20, 6, 9, 6, 16, 3, 9, 3, 10, 10, 11, 8, 10, 8, 9, 11, 6]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [11, 6, 5, 5, 6, 13, 9, 5, 6, 15, 6, 5, 7, 4, 4, 9, 12, 4, 195, 3, 7, 6, 11, 13, 6, 3, 9, 8, 8, 8, 4, 8, 9, 9, 5, 6, 512, 8, 230, 5, 6, 169, 7, 15, 4, 6, 9, 17, 4, 6, 7, 6, 15, 4, 15, 4, 141, 6, 4, 8, 6, 7, 7, 11, 8, 8, 4, 6, 6, 5, 7, 6, 6, 6, 7, 7, 19, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 9, 10, 7, 7, 4, 3, 6, 4, 5, 5, 13, 12, 8, 6, 6, 6, 17, 6, 10, 604, 5, 10, 4, 99, 6, 6, 62, 11, 102, 9, 11, 4, 8, 4, 10, 4, 5, 8, 4, 12, 8, 5, 16, 5, 14, 4, 5, 7, 8, 9, 14, 5, 11, 11, 4, 5, 7, 13, 11, 12, 202, 37, 23, 6, 10, 4, 11, 5, 10, 10, 8, 46, 11, 8, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [25, 4, 13, 9, 15, 12, 16, 6, 15, 15, 30, 15, 15, 14, 5, 30, 12, 20, 15, 49, 5, 17, 17, 6, 14, 5, 7, 24, 540, 6, 18, 13, 4, 23, 13, 4, 152, 19, 4, 6, 10, 618, 74, 603, 14, 83, 20, 15, 12, 10, 11, 47, 12, 20, 13, 6, 7, 16, 16, 19, 13, 9, 15, 11, 16, 14, 6, 14, 11, 14, 19, 15, 8, 15, 12, 10, 13, 68]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [7, 9, 6, 7, 7, 3, 71, 10, 8, 8, 7, 8, 8, 6, 7, 12, 6, 12, 9, 4, 15, 7, 7, 10, 10, 6, 10, 6, 7, 9, 8, 4, 12, 8, 5, 65, 5, 14, 5, 10, 484, 10, 7, 7, 13, 7, 6, 8, 11, 8, 5, 7, 7, 6, 7, 423, 6, 9, 22, 11, 8, 4, 10, 4, 4, 11, 15, 61, 11, 8, 10, 6, 12, 6]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [4, 13, 13, 11, 10, 4, 11, 4, 9, 11, 13, 6, 9, 13, 8, 46, 15, 7, 10, 11, 4, 11, 6, 11, 10, 10, 7, 12, 15, 14, 4, 13, 9, 14, 7, 13, 6, 14, 6, 8, 10, 9, 6, 23, 13, 9, 11, 14, 16, 239, 15, 10, 6, 11, 12, 7, 15, 12, 8, 8, 565, 11, 14, 8, 7, 11, 45, 4, 7, 12, 10, 5, 11, 173, 12, 13, 11, 12, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [5, 8, 11, 7, 7, 10, 39, 7, 7, 6, 9, 5, 45, 9, 8, 5, 10, 10, 8, 6, 9, 6, 8, 9, 12, 349, 10, 7, 4, 9, 78, 6, 7, 9, 6, 6, 10, 7, 8, 6, 5, 6, 6, 13, 7, 46, 8, 9, 4, 7, 9, 4, 11, 23, 11, 17, 11, 4, 11, 10, 27, 8, 27, 11, 37, 11, 6, 7, 11, 7, 14, 12, 16, 7, 10, 10, 12, 9, 9, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 4, 9, 8, 4, 3, 4, 6, 5, 9, 4, 7, 5, 8, 13, 6, 4, 5, 6, 11, 7, 9, 5, 9, 6, 9, 11, 8, 11, 6, 4, 14, 4, 8, 5, 4, 7, 8, 4, 10, 7, 17, 6, 6, 6, 73, 6, 16, 7, 4, 466, 8, 7, 10, 8, 6, 5, 6, 8, 5, 7, 10, 12, 7, 9, 5, 4, 13, 4, 8, 8]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [10, 10, 9, 10, 8, 4, 6, 8, 10, 11, 6, 11, 9, 5, 8, 10, 6, 10, 8, 6, 9, 8, 8, 9, 13, 10, 9, 11, 10, 10, 11, 10, 9, 11, 8, 6, 10, 8, 4, 3, 4, 10, 6, 6, 8, 10, 9, 9, 9, 6, 12, 8, 9, 9, 12, 12, 9, 151, 8, 8, 12, 170, 8, 410, 7, 10, 10, 8, 12, 9, 9, 7, 108, 10, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [13, 8, 4, 3, 8, 9, 61, 9, 7, 5, 4, 4, 9, 8, 12, 17, 9, 236, 9, 6, 9, 17, 7, 9, 9, 8, 15, 5, 224, 8, 12, 6, 5, 8, 12, 7, 13, 8, 5, 8, 8, 4, 11, 18, 4, 10, 7, 8, 8, 7, 8, 8, 5, 9, 7, 8, 11, 7, 8, 14, 12, 9, 11, 11, 11, 13, 8, 7, 5, 9, 8, 10, 4]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [5, 8, 5, 7, 8, 7, 7, 5, 5, 7, 4, 10, 6, 7, 4, 3, 6, 4, 7, 4, 8, 4, 8, 8, 6, 8, 14, 7, 5, 167, 14, 10, 7, 9, 2, 10, 4, 9, 8, 4, 6, 11, 8, 5]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 4, 4, 8, 7, 4, 4, 2, 3, 5, 3, 3, 6, 6, 3, 3, 294, 7, 9, 5, 5, 6, 62, 6, 2, 3, 178, 11, 33]
length(C_list) = 32
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 4, 4, 4, 2, 4, 2, 5, 7, 4, 5, 104, 4, 551, 4, 6, 4, 5, 4, 265, 4, 4, 6, 4, 6, 12, 8, 5, 13, 11, 15, 6, 7, 68]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [4, 2, 4, 3, 4, 6, 4, 3, 4, 3, 5, 3, 9, 4, 7, 4, 3, 6, 6, 6, 8, 8, 297, 4, 8, 5, 9, 5, 7, 5, 4, 4, 3, 4, 3, 4, 5, 3, 6, 5, 3, 4, 7, 8, 4, 8, 4, 4, 3, 6, 11, 7, 3, 5, 3, 9, 3]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [8, 3, 9, 9, 4, 9, 8, 7, 11, 8, 6, 7, 10, 6, 9, 8, 8, 9, 8, 15, 10, 8, 11, 10, 11, 10, 2, 14, 11, 8, 6, 4, 8, 11, 10, 14, 8, 9, 7, 10, 12, 7, 8, 13, 21, 9, 90, 10, 144, 3, 212, 6, 9, 5, 9]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [10, 14, 5, 15, 7, 6, 18, 4, 15, 3, 14, 2, 7, 9, 8, 4, 16, 14, 6, 14, 14, 8, 15, 15, 14, 3, 13, 6, 2, 17, 4, 8, 227, 14, 16, 18, 13, 11, 3, 3, 18, 7, 3, 5, 118, 3, 13, 13, 16, 17, 15, 3, 15, 17, 13, 6, 16]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [9, 5, 4, 10, 7, 7, 14, 6, 6, 10, 4, 9, 9, 4, 3, 5, 13, 13, 16, 14, 7, 7, 14, 116, 5, 6, 4, 2, 3, 5, 8, 8, 7, 14, 3, 8, 6, 15, 13, 7, 5, 9, 5, 9, 11]
length(C_list) = 45
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [3, 4, 8, 4, 5, 6, 17, 9, 3, 8, 4, 3, 7, 6, 3, 3, 7, 3, 6, 3, 10, 3, 356, 17, 470, 16, 3, 4, 6, 10, 4, 3, 4, 3, 10, 3, 3, 5, 4, 7, 5, 5, 3, 5, 5, 4, 4, 3, 4, 4, 7, 6, 11]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [11, 3, 3, 5, 4, 13, 6, 6, 3, 146, 4, 5, 4, 5, 8, 5, 6, 4, 5, 4, 9, 3, 3, 3, 48, 5, 10, 8, 4, 6, 4, 4, 4, 5, 3, 6, 7, 3, 69, 6, 3, 3, 5, 4, 5, 5, 9, 3, 4, 3, 54, 10, 19, 10, 4, 4, 4, 12, 7, 4]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [8, 4, 5, 9, 4, 7, 60, 7, 4, 7, 4, 5, 94, 4, 9, 9, 8, 4, 331, 4, 9, 5, 12, 4, 11, 13, 4, 5, 6, 4, 10, 31, 9, 5, 4, 8, 4, 9, 224, 23, 5, 7, 4, 4, 6, 13, 7, 6, 9, 10, 5, 9, 14, 5, 5, 3, 15, 17, 11, 14, 10, 10, 5, 212, 7, 10, 13]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [5, 7, 8, 12, 8, 10, 5, 7, 4, 10, 11, 8, 4, 3, 9, 25, 15, 7, 9, 5, 6, 9, 9, 4, 12, 9, 23, 7, 23, 6, 508, 4, 9, 7, 4, 7, 6, 29, 10, 9, 11, 8, 336, 11, 8, 7, 7, 55, 10, 11, 8, 8, 6, 8, 8, 8, 12, 11, 9, 6, 7, 7, 59, 9, 9, 4, 8, 9, 274, 24, 8, 10, 5, 17, 7, 11, 9, 10, 7, 7, 4, 8, 10, 5]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [11, 7, 10, 16, 8, 10, 13, 13, 13, 12, 9, 9, 6, 16, 5, 8, 12, 22, 10, 9, 13, 9, 16, 24, 3, 19, 10, 10, 16, 12, 21, 9, 14, 9, 8, 24, 488, 21, 12, 16, 10, 250, 9, 19, 9, 21, 10, 17, 5, 11, 7, 75, 8, 13, 10, 9, 10, 12, 5, 7, 13, 9, 12, 15, 8, 8, 16, 45, 9, 4, 9, 12, 13, 14, 11, 9, 6, 179, 12, 9, 12, 14, 12, 10, 14, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [5, 5, 6, 6, 5, 15, 9, 6, 4, 9, 8, 7, 6, 147, 5, 5, 8, 7, 4, 8, 3, 6, 9, 11, 16, 9, 21, 9, 4, 168, 8, 7, 52, 7, 13, 7, 6, 6, 7, 17, 6, 4, 11, 12, 14, 14, 82, 6, 4, 7, 6, 148, 8, 33, 5, 8, 10, 12, 9, 5, 5, 18, 18, 8, 5, 10, 9, 7, 5, 9, 11, 8, 5]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [12, 5, 8, 6, 11, 4, 4, 9, 11, 8, 15, 10, 12, 7, 5, 8, 101, 11, 11, 11, 97, 12, 5, 8, 5, 9, 6, 10, 8, 9, 13, 13, 9, 10, 12, 12, 6, 12, 9, 14, 193, 7, 8, 9, 8, 9, 7, 9, 4, 13, 10, 13, 10, 11, 11, 7, 8, 15, 10, 4, 10, 9, 34, 12, 10, 6, 10, 7, 15, 8, 12, 7]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 7, 8, 5, 10, 7, 9, 4, 6, 11, 9, 7, 10, 9, 12, 5, 10, 7, 7, 8, 3, 4, 9, 4, 11, 5, 14, 6, 8, 10, 10, 92, 11, 9, 11, 10, 14, 8, 9, 9, 8, 7, 12, 9, 7, 11, 7, 13, 12, 6, 29, 11, 4, 9, 5, 5, 8, 10, 6, 80, 6, 7, 16, 6, 10, 16, 10, 11, 6, 7, 10, 10, 7, 8, 9, 8, 29, 11, 11, 9, 12, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [4, 10, 10, 10, 10, 11, 9, 9, 11, 12, 8, 12, 20, 5, 11, 15, 10, 8, 11, 9, 5, 10, 49, 11, 7, 11, 10, 10, 11, 11, 8, 10, 10, 10, 9, 12, 10, 11, 13, 9, 8, 10, 10, 9, 10, 13, 12, 29, 11, 6, 14, 5, 10, 15, 12, 5, 5, 8, 11, 9, 12, 10, 11, 14, 10, 9, 10, 11, 11, 5, 8, 10, 11, 14, 10, 12]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [18, 10, 9, 9, 8, 11, 8, 12, 12, 7, 9, 8, 10, 11, 8, 10, 7, 7, 8, 10, 8, 108, 11, 6, 10, 9, 9, 8, 8, 12, 9, 12, 9, 6, 11, 7, 10, 11, 10, 12, 9, 9, 9, 6, 9, 6, 10, 10, 8, 19, 8, 9, 12, 6, 9, 41, 8, 10, 10, 11, 9, 10, 10, 8, 17, 9, 26, 9, 18, 18, 8, 9, 17, 9, 10, 9, 14, 8, 9, 14, 10, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [5, 7, 5, 10, 6, 5, 25, 4, 3, 4, 4, 5, 219, 3, 12, 4, 4, 8, 9, 5, 6, 8, 9, 3, 7, 10, 6, 12, 7, 4, 6, 5, 4, 6, 6, 17, 10, 4, 6, 5, 4, 9, 4, 8, 6, 14, 6, 4, 5, 10, 11, 6, 8, 4, 4, 7, 6, 9, 6, 6, 215, 5, 4, 10, 6, 5, 4]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [5, 10, 8, 8, 8, 8, 10, 9, 4, 7, 8, 7, 3, 9, 7, 5, 9, 10, 11, 6, 7, 9, 11, 10, 11, 9, 9, 4, 7, 11, 10, 5, 9, 15, 82, 4, 9, 5, 4, 6, 4, 9, 14, 8, 8, 14, 8, 5, 9, 5, 4, 8, 9, 9, 10, 10, 12, 5, 4, 9, 5, 6, 7, 9, 11, 5, 51, 8, 7, 6, 3, 18, 9, 15]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [6, 12, 12, 4, 14, 12, 10, 8, 13, 12, 13, 22, 13, 12, 13, 4, 18, 16, 12, 14, 12, 21, 15, 12, 13, 4, 16, 15, 10, 12, 13, 11, 12, 15, 11, 15, 12, 12, 222, 12, 14, 15, 12, 6, 16, 13, 8, 15, 13, 12, 11, 16, 8, 10, 12, 10, 10, 11, 6, 13, 143, 23, 12, 14, 4, 4, 8, 17, 12, 7, 14, 12, 87, 14, 14, 13, 12, 13, 18, 16]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [9, 12, 12, 11, 12, 37, 10, 15, 7, 5, 4, 6, 24, 6, 4, 6, 27, 7, 7, 6, 7, 12, 9, 4, 10, 12, 9, 12, 6, 29, 7, 10, 13, 11, 315, 29, 23, 13, 11, 5, 11, 83, 9, 11, 23, 11, 5, 8, 11, 19, 10, 23, 6, 15, 11, 10, 9, 11, 14, 14, 12, 11, 8, 10, 11, 15, 29, 8, 10, 9, 12, 4, 29, 20, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [35, 12, 10, 9, 7, 10, 10, 10, 3, 11, 5, 19, 7, 11, 7, 391, 12, 372, 8, 8, 12, 8, 6, 10, 9, 8, 9, 4, 11, 214, 10, 9, 11, 9, 9, 7, 9, 10, 16, 9, 13, 7, 10, 11, 8, 9, 11, 36, 10, 7, 9, 8, 10, 10, 23, 5, 8, 10, 12, 8, 9, 33, 7, 52, 11, 8, 9, 11, 202, 13, 11, 21, 9, 10, 9, 7, 10]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [10, 7, 7, 11, 10, 9, 8, 14, 13, 10, 11, 7, 9, 10, 11, 73, 8, 17, 7, 9, 10, 8, 15, 13, 9, 9, 12, 18, 13, 13, 8, 16, 7, 9, 15, 9, 16, 17, 11, 11, 9, 18, 15, 12, 12, 11, 20, 12, 13, 10, 10, 38, 10, 11, 10, 13, 13, 12, 23, 11, 138, 9, 10, 18, 17, 11, 5, 9, 9, 16, 10, 149, 9, 9, 10, 8, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [8, 13, 12, 13, 9, 32, 11, 10, 13, 15, 13, 14, 11, 13, 13, 15, 6, 12, 13, 4, 14, 40, 16, 15, 9, 15, 14, 14, 18, 20, 15, 11, 14, 15, 13, 61, 26, 9, 11, 19, 15, 12, 13, 94, 12, 15, 14, 17, 12, 11, 13, 9, 29, 13, 11, 15, 16, 16, 14, 13, 20, 16, 5, 14, 11, 14, 5, 16, 14, 12, 34, 13, 11, 9, 15, 13, 15, 11, 15, 18, 13, 7, 213, 21, 18, 14, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [16, 17, 7, 12, 11, 11, 6, 4, 4, 10, 14, 11, 5, 13, 71, 15, 12, 14, 12, 8, 5, 3, 10, 9, 4, 8, 12, 10, 5, 6, 10, 13, 8, 9, 4, 7, 7, 10, 4, 6, 7, 10, 7, 12, 19, 6, 9, 12, 8, 13, 10, 6, 6, 10, 13, 17, 9, 117, 14, 20, 9, 15, 8, 4, 9, 549, 15, 18, 4, 76, 11, 10, 7, 6, 4, 6, 6, 10, 16, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [4, 13, 8, 4, 3, 3, 15, 4, 9, 11, 3, 13, 9, 14, 86, 15, 11, 16, 4, 15, 11, 4, 15, 11, 21, 10, 12, 12, 151, 184, 9, 11, 11, 22, 13, 3, 18, 10, 13, 14, 11, 7, 11, 14, 11, 5, 5, 10, 4, 9, 20, 13, 13, 19, 14, 13, 5, 15, 5, 13, 4]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 10, 7, 12, 9, 3, 5, 7, 6, 5, 17, 364, 6, 33, 5, 9, 5, 9, 5, 347, 15, 7, 11, 300, 8, 280, 13, 10, 6, 6, 12, 6, 6, 7, 7, 5, 6, 6, 14, 11, 4, 6, 10, 7, 11, 4, 11, 14, 6, 4, 7, 7, 6, 8, 5, 9, 53, 7, 9, 8, 8, 10, 5, 11, 95, 11, 10, 7, 11, 7, 8, 7, 7, 16, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [5, 11, 12, 10, 9, 12, 14, 8, 14, 18, 12, 9, 12, 5, 287, 10, 14, 10, 11, 9, 7, 12, 8, 9, 10, 9, 319, 11, 15, 11, 13, 9, 16, 30, 15, 13, 12, 9, 12, 9, 24, 7, 7, 10, 12, 15, 14, 10, 10, 10, 10, 8, 8, 16, 15, 12, 16, 14, 12, 6, 12, 8, 8, 14, 17, 9, 6, 10, 14, 16, 14, 14, 13, 9, 130, 10, 12, 29, 7, 10, 17, 8, 7, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [3, 12, 7, 10, 4, 11, 11, 11, 6, 6, 13, 9, 14, 12, 10, 6, 10, 4, 11, 12, 4, 10, 5, 14, 10, 11, 12, 6, 10, 8, 12, 12, 13, 8, 9, 6, 4, 10, 11, 14, 11, 11, 11, 9, 12, 5, 8, 8, 18, 404, 10, 7, 12, 15, 11, 6, 10, 12, 11, 6, 10, 6, 3, 11, 12, 12, 8, 6, 11, 9, 4, 9, 10, 14, 8, 10, 8, 10, 10, 14, 13, 9]
length(C_list) = 75
termination_sub = ┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [10, 9, 6, 8, 15, 9, 8, 7, 10, 8, 4, 15, 8, 10, 11, 11, 12, 6, 13, 9, 7, 23, 504, 4, 8, 11, 4, 4, 10, 11, 10, 4, 5, 7, 12, 14, 8, 7, 4, 8, 8, 14, 8, 12, 8, 10, 9, 7, 8, 7, 6, 12, 10, 10, 8, 12, 12, 10, 6, 13, 7, 10, 7, 7, 7, 10, 13, 16, 9, 23, 12, 88, 12, 8, 7, 10, 11, 11, 11, 8, 14]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [12, 7, 7, 4, 4, 7, 15, 6, 4, 4, 4, 4, 8, 6, 4, 13, 30, 8, 8, 5, 7, 8, 69, 4, 9, 7, 9, 5, 7, 4, 4, 6, 13, 10, 4, 8, 7, 12, 11, 8, 5, 5, 7, 8, 5, 15, 5, 6, 26, 8, 8, 6, 4, 11, 321, 7, 6, 6, 8, 5, 7, 8, 6, 9, 5, 6, 4, 7, 9]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
[length(mis) for mis = unique(C_list)] = [7, 10, 11, 9, 12, 4, 17, 12, 11, 13, 9, 9, 9, 11, 6, 9, 12, 13, 9, 8, 6, 11, 11, 11, 5, 16, 11, 9, 3, 10, 10, 9, 18, 11, 6, 13, 4, 17, 9, 9, 13, 7, 5, 16, 11, 9, 7, 9, 17, 12, 10, 10, 16, 9, 12, 4, 12, 12, 10, 8, 4, 10, 9, 12, 12, 411, 14, 6, 10, 11, 7, 12, 14, 10, 12, 10, 12, 9, 9, 19, 15, 5, 5, 9, 11, 9]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 177
[length(mis) for mis = unique(C_list)] = [15, 10, 10, 10, 11, 11, 4, 12, 10, 19, 41, 9, 10, 12, 11, 10, 12, 11, 10, 9, 10, 10, 11, 14, 10, 13, 3, 10, 10, 238, 10, 9, 10, 10, 16, 8, 10, 10, 12, 20, 9, 20, 6, 26, 11, 11, 12, 15, 11, 13, 8, 11, 10, 9, 12, 25, 12, 12, 9, 11, 11, 11, 7, 17, 10, 10, 4, 12, 9, 9, 10, 9, 4, 11, 11, 9, 8, 7, 11, 10, 11, 4]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 178
[length(mis) for mis = unique(C_list)] = [8, 5, 6, 8, 11, 9, 12, 7, 26, 8, 132, 7, 9, 7, 8, 11, 9, 10, 10, 8, 9, 5, 11, 5, 14, 6, 9, 8, 9, 10, 12, 5, 12, 4, 12, 6, 9, 6, 10, 16, 9, 12, 15, 5, 11, 3, 11, 9, 11, 12, 8, 26, 9, 12, 12, 14, 12, 8, 7, 10, 8, 4, 7, 42, 12, 9, 12, 7, 8, 105, 11, 7, 12, 7, 7, 10, 8, 6, 10, 22, 7, 26, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 179
[length(mis) for mis = unique(C_list)] = [13, 6, 7, 11, 8, 4, 8, 9, 5, 17, 8, 6, 7, 5, 12, 236, 12, 9, 7, 11, 4, 8, 6, 7, 12, 6, 9, 8, 11, 7, 5, 3, 47, 5, 8, 6, 6, 11, 9, 18, 4, 5, 137, 107, 6, 7, 10, 37, 9, 5, 10, 8, 7, 9, 16, 10, 8, 404, 4, 7, 5, 333, 6, 7, 4, 4, 4, 10, 6, 6, 6, 12, 5, 7, 7, 9, 16, 29, 7, 5, 32, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 180
termination = MathOptInterface.INFEASIBLE
objective_value = 0.0
