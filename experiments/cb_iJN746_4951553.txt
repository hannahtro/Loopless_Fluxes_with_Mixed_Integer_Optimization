┌ Warning: master problem cannot be solved
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:486
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN746
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN746
----------------------------------
number of metabolites : 907
number of reactions : 1054
number of genes : 746

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 5
max_cuts = 2
(indicator, big_m) = (false, true)
BIG M ADDED
model with 1054 flux variables and 2001 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 137, 3]
length(C_list) = 2
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [9, 3, 7, 19]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [16, 3, 5, 10]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [10, 7, 47, 5, 3]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [32, 5, 7]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [2, 25, 6, 32, 11]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [2, 6, 7, 10, 8, 142]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
termination_master = MathOptInterface.TIME_LIMIT
BoundsError((missing, Any[1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001], Any[1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001], missing, missing, missing, missing, missing, 1800.0639371871948, MathOptInterface.INFEASIBLE, 7, Any[(Any[435, 457], Any[430], 3), (Any[293, 299, 618], Any[290], 4), (Any[290], Any[293, 299], 3), (Any[65, 153, 430, 612, 615], Any[435, 457], 7), (Any[6, 99], Any[100], 3), (Any[84, 311, 404], Any[86, 312], 5), (Any[430], Any[435, 457], 3), (Any[821, 823], Any[33, 749, 804], 5), (Any[86, 312], Any[84, 311, 404], 5), (Any[171, 344, 368, 782], Any[100, 189, 367], 7), (Any[278, 758], Any[], 2), (Any[152, 345, 525], Any[158, 400, 925], 6), (Any[280, 759], Any[], 2), (Any[171, 387, 401, 782], Any[99, 189], 6)], Any[1.8426921367645264, 0.1962900161743164, 0.21909689903259277, 0.21962213516235352, 0.25228404998779297, 0.26028013229370117, 0.15292096138000488, 1800.0261220932007], Any[0.024672985076904297, 0.005831003189086914, 0.00545501708984375, 0.005822181701660156, 0.005620002746582031, 0.005681037902832031, 0.0056078433990478516], Any[3.537384033203125, 0.09056401252746582, 0.08428502082824707, 0.08264398574829102, 0.08716702461242676, 0.0759880542755127, 0.06090092658996582]), 16)
