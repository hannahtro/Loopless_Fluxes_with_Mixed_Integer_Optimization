ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iLB1027_lipid
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iLB1027_lipid
----------------------------------
number of metabolites : 2172
number of reactions : 4456
number of genes : 1027

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 22
max_cuts = 9
(indicator, big_m) = (false, true)
BIG M ADDED
model with 4456 flux variables and 8868 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [8, 4, 8, 311, 3, 3, 30, 3, 19, 431, 5, 5, 15, 19, 20, 243, 6]
length(C_list) = 9
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [6, 3, 7, 4, 11, 9, 8, 11, 3, 20, 4, 7, 11, 3, 7, 36, 28, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [3, 4, 8, 9, 4, 4, 8, 4, 8, 5, 4, 8, 4, 4, 3, 18, 4, 4, 4, 9, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [66, 4, 3, 4, 4, 89, 10, 8, 9, 3, 4, 6, 4, 4, 65, 10, 65, 93, 4, 21, 10, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 41, 3, 92, 31, 4, 10, 3, 4, 5, 4, 7, 422, 7, 4, 3, 3, 6, 20, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [10, 4, 3, 4, 4, 73, 4, 4, 12, 30, 5, 6, 4, 4, 4, 7, 4, 79, 4, 61, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [12, 4, 4, 48, 3, 72, 4, 4, 181, 21, 4, 6, 4, 4, 4, 7, 135, 80, 47, 3, 34, 8, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [8, 10, 6, 19, 3, 4, 74, 4, 7, 4, 3, 26, 4, 3, 4, 7, 4, 4, 4, 5, 36, 8, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 5, 3, 3, 11, 4, 3, 5, 4, 7, 4, 3, 4, 4, 4, 4, 23, 39, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 20, 4, 4, 4, 3, 10, 5, 4, 28, 4, 497, 70, 7, 8, 10, 4, 4, 4, 49, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 63, 3, 4, 17, 4, 7, 8, 4, 6, 5, 7, 34, 7, 34, 4, 4, 4, 20, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 4, 4, 52, 10, 6, 7, 7, 5, 97, 4, 4, 3, 7, 4, 4, 4, 35, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 5, 4, 68, 141, 99, 46, 4, 7, 4, 4, 7, 5, 5, 4, 7, 4, 4, 5, 5, 20, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [12, 8, 4, 18, 10, 4, 6, 4, 7, 5, 4, 6, 4, 4, 5, 7, 4, 4, 4, 4, 32, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 18, 5, 7, 28, 5, 7, 3, 4, 82, 4, 4, 4, 7, 4, 5, 5, 7, 20, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [3, 4, 8, 4, 4, 3, 4, 5, 9, 4, 4, 81, 6, 4, 4, 26, 6, 3, 4, 8, 45, 13, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [119, 4, 4, 4, 4, 7, 101, 4, 7, 55, 158, 5, 81, 82, 7, 82, 116, 4, 159, 11, 8, 142]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [11, 13, 4, 4, 4, 4, 4, 4, 6, 60, 8, 40, 7, 4, 4, 6, 4, 6, 4, 37, 11, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [8, 4, 3, 4, 4, 87, 4, 4, 4, 3, 8, 7, 4, 4, 38, 3, 38, 4, 4, 42, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [4, 4, 7, 7, 4, 4, 44, 4, 6, 4, 4, 41, 4, 4, 121, 38, 4, 7, 4, 20, 11, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [3, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 180, 4, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [16, 6, 11, 18, 12, 48, 19, 60, 21, 6, 15, 19, 20, 21, 80]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [3, 13, 9, 53, 8, 92, 8, 277, 6, 50, 4, 31, 4, 4, 4, 6, 4, 4, 6, 20, 11, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [11, 15, 6, 7, 9, 5, 3, 7, 6, 28, 10, 5, 7, 6, 58, 6, 9, 5, 12, 10, 23, 39, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [12, 12, 8, 10, 3, 5, 102, 3, 73, 4, 131, 23, 141, 65, 4, 371, 29, 79, 142, 61, 7, 125]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 6, 4, 3, 17, 3, 6, 458, 5, 29, 3, 4, 6, 3, 4, 11, 33, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 62, 3, 64, 4, 3, 7, 68, 4, 57, 4, 4, 5, 7, 6, 4, 5, 7, 53, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [10, 13, 4, 10, 4, 4, 6, 10, 55, 27, 135, 3, 150, 68, 9, 6, 73, 152, 61, 102, 134]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [4, 3, 8, 10, 10, 4, 33, 7, 6, 29, 10, 4, 4, 13, 6, 8, 9, 3, 23, 25, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [3, 14, 5, 3, 6, 88, 76, 3, 5, 58, 6, 51, 5, 8, 13, 6, 14, 10, 4, 4, 20, 64, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 4, 5, 3, 8, 4, 135, 34, 5, 36, 32, 3, 831, 5, 5, 6, 5, 4, 31, 3, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 11, 3, 4, 3, 4, 5, 22, 81, 30, 4, 4, 7, 5, 3, 4, 7, 20, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 4, 4, 4, 31, 3, 5, 75, 4, 6, 4, 4, 4, 5, 4, 4, 3, 20, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [3, 4, 8, 67, 4, 97, 105, 4, 5, 56, 168, 43, 92, 82, 5, 82, 102, 5, 169, 337, 5, 152]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 4, 4, 5, 4, 4, 5, 3, 4, 4, 4, 4, 3, 5, 4, 562, 4, 3, 34, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [4, 12, 3, 18, 4, 4, 3, 5, 3, 3, 5, 4, 9, 4, 21, 3, 3, 9, 3, 3, 5, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 43, 7, 11, 10, 5, 6, 53, 4, 55, 8, 5, 4, 216, 3, 3, 8, 20, 4, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 18, 3, 4, 11, 6, 5, 11, 5, 47, 3, 3, 4, 5, 4, 3, 4, 20, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [3, 4, 13, 3, 3, 3, 12, 6, 6, 37, 10, 4, 4, 10, 22, 44, 78, 5, 4, 4, 16, 6, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 3, 207, 5, 6, 4, 5, 8, 9, 3, 4, 3, 6, 8, 3, 4, 4, 21, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [4, 11, 4, 7, 4, 47, 3, 580, 4, 4, 30, 3, 7, 5, 3, 7, 4, 37, 3, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [6, 32, 4, 19, 3, 3, 16, 3, 453, 4, 3, 6, 5, 5, 9, 5, 7, 5, 3, 30, 13, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [4, 3, 7, 3, 3, 7, 4, 5, 89, 4, 4, 7, 4, 3, 4, 5, 3, 3, 22, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 3, 3, 6, 3, 3, 94, 4, 5, 3, 4, 4, 11, 3, 3, 4, 4, 49, 5, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 3, 4, 3, 61, 4, 5, 11, 8, 3, 3, 4, 184, 4, 3, 3, 11, 46, 99, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [3, 11, 407, 34, 4, 3, 23, 8, 7, 4, 11, 5, 3, 10, 551, 7, 11, 8, 22, 38, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [3, 3, 19, 3, 3, 3, 16, 3, 39, 22, 3, 3, 11, 8, 7, 5, 4, 11, 7, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [6, 12, 9, 5, 6, 52, 4, 3, 145, 3, 3, 6, 3, 4, 5, 5, 3, 3, 259, 3, 4, 46, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [5, 4, 11, 14, 3, 4, 61, 3, 5, 30, 5, 24, 4, 4, 4, 5, 5, 4, 11, 4, 33, 39]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [4, 12, 3, 35, 3, 8, 68, 3, 5, 25, 6, 3, 4, 4, 4, 5, 8, 7, 3, 20, 12, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 5, 3, 4, 29, 4, 43, 4, 4, 4, 3, 4, 7, 3, 4, 3, 4, 20, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 7, 4, 3, 4, 4, 5, 4, 3, 61, 4, 4, 12, 242, 4, 3, 3, 9, 43, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [6, 12, 4, 4, 3, 4, 24, 6, 5, 4, 8, 3, 4, 4, 11, 5, 11, 7, 5, 9, 4, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 3, 4, 3, 4, 4, 7, 4, 5, 16, 4, 4, 4, 7, 17, 4, 4, 56, 11, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 44, 4, 3, 4, 9, 5, 55, 5, 64, 4, 4, 4, 5, 4, 4, 4, 3, 4, 6, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [8, 4, 3, 35, 3, 4, 4, 4, 7, 4, 3, 4, 4, 4, 4, 331, 4, 4, 4, 4, 34, 8, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [6, 14, 8, 4, 4, 7, 3, 5, 4, 4, 63, 4, 3, 11, 5, 5, 4, 4, 48, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [5, 12, 3, 5, 8, 9, 31, 11, 5, 3, 9, 29, 4, 8, 7, 224, 7, 4, 3, 50, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [3, 12, 3, 43, 10, 83, 8, 7, 5, 5, 3, 8, 21, 23, 7, 5, 9, 5, 3, 3, 53, 155, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [7, 3, 4, 19, 4, 5, 3, 13, 60, 17, 3, 4, 3, 4, 4, 5, 5, 4, 6, 31, 74, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 11, 4, 3, 13, 3, 5, 24, 13, 3, 4, 5, 9, 4, 4, 46, 6, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [16, 14, 9, 4, 3, 3, 5, 5, 5, 24, 16, 4, 7, 9, 8, 6, 7, 4, 8, 8, 8, 11, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [4, 14, 4, 8, 11, 6, 4, 3, 5, 4, 7, 30, 10, 11, 9, 130, 4, 3, 22, 11, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [7, 4, 3, 34, 4, 3, 29, 3, 302, 3, 8, 4, 4, 4, 5, 3, 3, 3, 33, 60, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [6, 11, 4, 4, 3, 5, 16, 4, 50, 41, 6, 37, 3, 4, 4, 5, 5, 4, 7, 8, 43, 5, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [7, 11, 3, 5, 4, 5, 3, 6, 14, 14, 103, 5, 5, 3, 8, 21, 4, 10, 92, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 25, 4, 4, 32, 3, 5, 4, 4, 4, 4, 3, 4, 5, 4, 4, 4, 74, 5, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [5, 4, 32, 31, 4, 4, 5, 4, 8, 22, 4, 4, 5, 5, 18, 5, 4, 4, 4, 4, 20, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 3, 28, 4, 42, 3, 5, 3, 3, 5, 4, 3, 3, 5, 5, 3, 4, 6, 3, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 4, 4, 4, 3, 5, 5, 6, 111, 6, 11, 4, 5, 8, 4, 6, 4, 4, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [4, 13, 4, 3, 4, 3, 26, 7, 346, 33, 9, 4, 3, 5, 7, 5, 3, 4, 22, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [4, 7, 3, 3, 4, 3, 3, 4, 5, 51, 4, 10, 5, 8, 5, 3, 4, 9, 3, 33, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [4, 14, 9, 10, 4, 3, 4, 3, 5, 5, 24, 4, 9, 9, 5, 10, 22, 3, 3, 10, 6, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [3, 69, 4, 14, 4, 4, 4, 4, 5, 3, 3, 4, 3, 45, 51, 3, 4, 4, 4, 17, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 4, 404, 4, 4, 43, 5, 4, 4, 4, 4, 4, 4, 5, 4, 6, 6, 3, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [3, 10, 3, 19, 4, 4, 27, 4, 5, 63, 4, 6, 3, 4, 3, 5, 9, 4, 6, 3, 61, 23, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [5, 3, 3, 4, 3, 4, 15, 5, 4, 4, 21, 3, 3, 4, 5, 4, 4, 3, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 77, 4, 4, 4, 3, 5, 39, 4, 21, 4, 4, 3, 5, 4, 3, 5, 20, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [8, 13, 3, 4, 3, 3, 11, 4, 6, 8, 3, 22, 4, 13, 118, 113, 7, 3, 4, 11, 22, 12, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 6, 4, 7, 60, 4, 5, 42, 9, 27, 4, 4, 54, 5, 54, 4, 4, 24, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 5, 183, 23, 44, 5, 333, 4, 4, 5, 4, 5, 7, 5, 7, 4, 3, 20, 8, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 3, 4, 14, 4, 5, 9, 27, 4, 32, 3, 3, 5, 7, 3, 6, 4, 21, 264, 48]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [3, 4, 74, 4, 4, 17, 3, 7, 3, 4, 4, 3, 7, 4, 5, 8, 3, 3, 3, 5, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 13, 10, 22, 58, 4, 5, 61, 9, 6, 9, 10, 5, 11, 3, 3, 5, 20, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 4, 3, 51, 6, 5, 35, 4, 36, 4, 4, 4, 7, 4, 4, 4, 4, 76, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [5, 12, 6, 3, 4, 9, 16, 3, 5, 19, 3, 3, 4, 3, 5, 4, 7, 5, 38, 20, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 4, 4, 3, 7, 3, 5, 44, 4, 45, 4, 11, 4, 5, 4, 4, 3, 4, 42, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 5, 4, 4, 39, 3, 9, 36, 3, 36, 3, 33, 8, 5, 11, 8, 30, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 7, 7, 3, 3, 5, 5, 3, 29, 10, 8, 36, 493, 4, 4, 17, 4, 20, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [8, 5, 4, 4, 3, 3, 73, 4, 5, 29, 3, 32, 4, 23, 3, 5, 4, 4, 4, 10, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 7, 5, 9, 65, 3, 202, 45, 4, 5, 8, 3, 5, 3, 4, 8, 20, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 3, 58, 4, 6, 3, 11, 4, 3, 5, 5, 4, 4, 4, 4, 20, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 4, 4, 74, 4, 36, 66, 3, 44, 3, 4, 4, 5, 12, 70, 4, 4, 20, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 3, 4, 6, 3, 4, 194, 17, 4, 592, 5, 6, 4, 22, 4, 4, 4, 24, 57, 201, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 3, 3, 3, 45, 4, 196, 295, 4, 3, 4, 4, 3, 5, 3, 3, 541, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 23, 4, 4, 4, 5, 5, 19, 3, 58, 3, 10, 4, 5, 13, 4, 7, 30, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [3, 12, 3, 3, 57, 3, 8, 3, 5, 3, 4, 7, 3, 6, 7, 5, 11, 5, 23, 10, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 3, 4, 4, 53, 3, 5, 26, 7, 42, 9, 5, 4, 5, 4, 48, 3, 3, 20, 50]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 14, 4, 3, 4, 3, 12, 4, 4, 4, 4, 4, 6, 6, 3, 4, 4, 4, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 62, 4, 5, 4, 5, 23, 4, 58, 3, 4, 4, 5, 4, 7, 5, 62, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [8, 13, 4, 24, 4, 4, 4, 4, 5, 26, 4, 72, 4, 3, 4, 5, 4, 4, 4, 3, 81, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [3, 27, 4, 328, 3, 3, 3, 4, 9, 3, 4, 3, 4, 3, 6, 4, 29, 3, 95, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [7, 14, 4, 4, 4, 3, 4, 3, 5, 10, 191, 4, 4, 4, 4, 5, 3, 4, 4, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [4, 11, 7, 106, 13, 295, 3, 11, 5, 69, 4, 4, 4, 7, 5, 7, 3, 154, 3, 22, 9, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [4, 13, 4, 4, 8, 5, 7, 10, 10, 30, 10, 7, 7, 3, 9, 5, 10, 7, 3, 22, 24, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [9, 11, 4, 3, 3, 5, 3, 6, 8, 6, 56, 4, 5, 5, 56, 8, 3, 10, 3, 3, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [6, 4, 18, 13, 10, 9, 3, 4, 302, 36, 3, 3, 3, 3, 9, 5, 9, 4, 4, 3, 20, 5, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 19, 3, 3, 3, 3, 239, 3, 25, 3, 3, 337, 5, 13, 3, 3, 6, 20, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [10, 4, 3, 5, 3, 6, 3, 4, 7, 62, 5, 3, 4, 3, 8, 5, 7, 6, 4, 3, 60, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 3, 3, 3, 3, 3, 7, 27, 3, 28, 4, 3, 6, 3, 3, 4, 6, 20, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [7, 5, 3, 39, 3, 4, 3, 3, 5, 86, 6, 20, 3, 11, 35, 351, 4, 18, 66, 74, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [4, 3, 6, 4, 3, 4, 52, 4, 5, 4, 4, 4, 3, 5, 5, 3, 4, 4, 3, 19, 7, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [11, 3, 11, 3, 4, 3, 4, 13, 455, 24, 3, 8, 13, 14, 7, 463, 7, 10, 3, 20, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 3, 4, 5, 4, 4, 6, 57, 5, 62, 4, 4, 51, 22, 51, 4, 3, 5, 20, 6, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [28, 4, 4, 3, 6, 3, 32, 3, 5, 7, 3, 3, 3, 4, 5, 9, 3, 3, 4, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [6, 13, 4, 3, 11, 3, 3, 3, 509, 37, 10, 55, 5, 3, 6, 3, 3, 3, 3, 20, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 3, 13, 3, 28, 3, 82, 3, 7, 3, 3, 5, 5, 5, 3, 5, 4, 32, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 4, 11, 3, 25, 3, 6, 27, 66, 48, 5, 3, 85, 5, 85, 4, 3, 4, 28, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [10, 4, 10, 4, 4, 4, 31, 6, 280, 67, 3, 4, 5, 5, 5, 4, 14, 4, 4, 47, 44, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 46, 3, 36, 3, 3, 6, 38, 3, 37, 4, 10, 10, 4, 10, 6, 19, 22, 10, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 4, 4, 4, 5, 3, 366, 65, 4, 11, 3, 57, 4, 3, 4, 9, 19, 3, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [7, 13, 12, 8, 3, 3, 3, 3, 6, 3, 3, 27, 3, 4, 6, 153, 7, 6, 4, 5, 20, 11, 308]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 7, 5, 3, 4, 7, 3, 3, 9, 3, 4, 3, 6, 3, 19, 3, 3, 20, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [4, 13, 4, 4, 3, 3, 19, 4, 5, 29, 4, 35, 3, 5, 4, 7, 4, 4, 4, 4, 36, 84, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [5, 15, 4, 13, 25, 5, 4, 8, 5, 3, 17, 4, 7, 5, 3, 9, 4, 4, 3, 3, 62, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 3, 4, 5, 4, 5, 5, 30, 4, 3, 3, 3, 3, 5, 5, 4, 3, 11, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 3, 5, 4, 45, 4, 10, 3, 97, 3, 10, 5, 4, 5, 3, 3, 3, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [8, 3, 4, 4, 4, 3, 5, 3, 5, 8, 5, 3, 3, 3, 3, 5, 3, 32, 5, 13, 10, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 9, 4, 4, 3, 5, 3, 4, 19, 5, 4, 5, 4, 4, 21, 4, 11, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 3, 3, 3, 4, 5, 3, 4, 5, 3, 4, 6, 5, 7, 3, 5, 3, 39, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [7, 4, 6, 3, 11, 3, 5, 7, 33, 24, 4, 4, 13, 5, 13, 3, 5, 8, 9, 11, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 5, 3, 3, 32, 11, 6, 3, 8, 5, 4, 13, 6, 13, 6, 18, 11, 33, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 3, 49, 18, 6, 5, 6, 3, 3, 9, 13, 3, 5, 10, 3, 11, 22, 234, 10, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [4, 13, 4, 64, 11, 6, 45, 8, 25, 65, 3, 39, 9, 3, 13, 9, 13, 8, 4, 47, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [5, 5, 4, 256, 3, 5, 6, 4, 113, 32, 4, 27, 3, 4, 4, 274, 4, 4, 3, 4, 40, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [3, 6, 3, 8, 4, 9, 5, 3, 650, 27, 4, 4, 4, 4, 4, 5, 4, 65, 4, 20, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 3, 4, 4, 4, 7, 23, 4, 8, 4, 5, 4, 3, 6, 4, 3, 4, 53, 11, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [4, 14, 3, 6, 11, 3, 3, 5, 13, 10, 5, 4, 3, 5, 6, 27, 6, 3, 3, 5, 61, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [3, 6, 4, 11, 4, 231, 4, 3, 6, 3, 3, 4, 4, 4, 4, 5, 4, 3, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [6, 16, 3, 29, 5, 3, 3, 4, 5, 27, 4, 106, 4, 5, 4, 6, 4, 3, 4, 3, 17, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [4, 11, 4, 3, 3, 3, 597, 4, 9, 4, 4, 9, 4, 15, 9, 5, 3, 3, 22, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [4, 7, 4, 65, 4, 4, 71, 3, 5, 55, 3, 3, 4, 4, 51, 278, 51, 4, 4, 3, 33, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 4, 4, 3, 4, 6, 4, 4, 4, 4, 13, 6, 5, 4, 4, 3, 6, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 3, 4, 3, 4, 5, 6, 3, 4, 4, 6, 3, 4, 6, 4, 5, 3, 3, 4, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 4, 5, 5, 59, 4, 6, 12, 4, 52, 4, 4, 53, 9, 53, 3, 4, 8, 42, 7, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [4, 4, 45, 5, 4, 4, 3, 3, 6, 47, 3, 55, 3, 3, 5, 18, 3, 3, 6, 70, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 3, 4, 45, 4, 284, 31, 4, 23, 15, 3, 4, 88, 4, 5, 4, 4, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [4, 6, 3, 90, 4, 3, 3, 3, 5, 4, 3, 10, 3, 4, 9, 5, 7, 11, 3, 3, 11, 4, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [5, 12, 3, 4, 3, 4, 66, 3, 5, 65, 3, 35, 4, 3, 68, 6, 7, 3, 3, 4, 32, 8, 19]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [17, 12, 4, 3, 3, 3, 11, 5, 4, 4, 6, 4, 3, 6, 6, 5, 4, 27, 5, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [5, 9, 3, 5, 64, 10, 19, 4, 5, 26, 4, 27, 7, 4, 3, 5, 6, 4, 6, 3, 22, 6, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [4, 3, 11, 58, 5, 3, 3, 4, 131, 22, 12, 42, 6, 5, 8, 9, 5, 3, 20, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [4, 6, 3, 6, 4, 4, 4, 4, 5, 4, 3, 3, 4, 4, 4, 118, 4, 3, 4, 5, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [6, 11, 3, 4, 5, 4, 28, 3, 6, 50, 3, 26, 3, 3, 11, 6, 11, 4, 10, 3, 35, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [4, 11, 13, 39, 3, 4, 8, 3, 6, 29, 34, 139, 9, 3, 4, 9, 6, 3, 4, 62, 22, 6, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [6, 3, 6, 10, 8, 11, 31, 4, 9, 55, 5, 46, 4, 10, 5, 3, 4, 9, 64, 3, 59]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [6, 6, 3, 3, 3, 3, 25, 4, 6, 65, 3, 33, 4, 3, 57, 5, 60, 4, 4, 7, 29, 5, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [4, 13, 13, 4, 7, 3, 45, 3, 6, 5, 3, 3, 5, 3, 16, 5, 15, 3, 4, 20, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [5, 18, 4, 12, 3, 3, 4, 9, 3, 4, 13, 4, 4, 15, 5, 83, 3, 3, 4, 6, 10, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 37, 3, 4, 77, 7, 7, 29, 8, 86, 4, 4, 6, 4, 13, 58, 23, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 31, 13, 12, 3, 3, 6, 24, 4, 3, 3, 9, 9, 10, 8, 4, 3, 55, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 5, 5, 6, 14, 6, 50, 3, 11, 123, 5, 3, 5, 4, 3, 5, 38, 11, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [7, 4, 10, 20, 3, 3, 4, 18, 5, 3, 4, 3, 5, 4, 5, 19, 10, 4, 3, 4, 13, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [4, 14, 5, 4, 11, 8, 8, 12, 6, 4, 4, 5, 4, 4, 12, 9, 12, 4, 4, 8, 4, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [3, 14, 3, 7, 93, 5, 65, 3, 9, 30, 3, 3, 4, 13, 6, 13, 5, 8, 11, 20, 5, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 7, 3, 29, 25, 3, 9, 40, 4, 5, 4, 4, 67, 9, 14, 7, 3, 40, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 99, 4, 4, 4, 4, 5, 4, 4, 4, 3, 4, 4, 650, 3, 4, 4, 4, 5, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [21, 4, 3, 14, 4, 3, 3, 4, 7, 35, 3, 15, 3, 4, 4, 5, 4, 3, 4, 28, 18, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [4, 13, 4, 3, 4, 14, 9, 243, 25, 9, 24, 3, 3, 4, 5, 3, 3, 20, 11, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [7, 14, 3, 19, 5, 3, 75, 6, 9, 30, 4, 3, 3, 3, 10, 5, 10, 4, 4, 4, 20, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [4, 7, 4, 3, 4, 4, 70, 3, 5, 7, 4, 4, 4, 20, 3, 5, 3, 253, 4, 4, 3, 6, 3]
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 3, 4, 11, 4, 4, 5, 4, 4, 3, 5, 4, 4, 5, 4, 3, 5, 4, 4, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [7, 12, 11, 16, 6, 3, 62, 3, 9, 3, 3, 33, 7, 3, 11, 9, 11, 5, 5, 4, 35, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [9, 3, 3, 4, 3, 3, 7, 3, 8, 42, 3, 42, 3, 3, 4, 5, 3, 4, 14, 36, 478, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [4, 3, 13, 3, 4, 13, 8, 4, 11, 9, 4, 26, 8, 6, 14, 6, 14, 5, 4, 22, 31, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 18, 3, 4, 4, 4, 5, 19, 4, 4, 4, 5, 405, 3, 3, 3, 3, 22, 23, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 3, 11, 3, 47, 4, 16, 32, 4, 62, 4, 9, 3, 5, 5, 4, 4, 23, 4, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 177
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 37, 4, 4, 5, 4, 6, 39, 3, 42, 23, 6, 5, 4, 7, 3, 55, 25, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 178
termination = MathOptInterface.INFEASIBLE
objective_value = 0.3596067077757338
