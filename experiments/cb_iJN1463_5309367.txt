┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN1463
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN1463
----------------------------------
number of metabolites : 2153
number of reactions : 2927
number of genes : 1462

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 59
max_cuts = 15
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2927 flux variables and 5473 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 2, 4, 6, 5, 3, 3, 3, 132, 2, 5, 6, 4, 314, 6, 4, 8, 5, 6, 213, 6, 8, 5, 10, 3, 6]
length(C_list) = 15
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [5, 11, 9, 2, 3, 3, 6, 3, 3, 3, 3, 9, 4, 321, 4, 3, 57, 7, 6, 2, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [6, 2, 3, 2, 7, 4, 3, 5, 136, 3, 3, 4, 5, 3, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [4, 3, 2, 4, 24, 10, 4, 9, 3, 3, 3, 2, 5, 150, 6, 7, 35, 4, 4, 8, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 4, 3, 5, 4, 44, 3, 4, 5, 11, 4, 4, 5, 7, 4, 5, 4, 4, 4, 6, 5, 4, 6, 4, 9, 5, 5, 5, 5, 4, 10, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [20, 4, 6, 9, 6, 5, 20, 7, 12, 20, 5, 2, 4, 9, 2, 5, 4, 22, 6, 4, 4, 3, 4, 6, 5, 6, 2, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 5, 20, 6, 5, 7, 13, 5, 4, 5, 4, 15, 8, 4, 4, 5, 4, 15, 5, 5, 13, 18, 7, 6, 34, 6, 3, 5, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [8, 2, 6, 5, 15, 10, 136, 6, 7, 6, 10, 3, 6, 6, 3, 18, 6, 8, 4, 7, 7, 6, 6, 12, 13]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 6, 6, 5, 11, 13, 7, 5, 14, 7, 6, 7, 7, 21, 14, 77, 7, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [6, 12, 6, 12, 16, 9, 5, 102, 7, 9, 8, 11, 7, 78, 8, 6, 8, 13, 12, 15, 12, 4, 11, 32, 17, 21, 10, 6, 7, 7, 10, 17, 11, 4, 6, 7, 11, 15, 7, 4, 13, 22]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [2, 7, 7, 7, 12, 61, 9, 7, 9, 3, 7, 51, 14, 10, 9, 8, 16, 14, 31, 8, 5, 6, 13, 11, 16, 15, 6, 11, 14, 5, 3, 10, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [6, 5, 5, 8, 7, 14, 9, 16, 6, 5, 8, 5, 8, 5, 5, 7, 5, 5, 7, 8, 6, 87, 38, 6, 457, 6, 6, 5, 5, 8, 6, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 13, 4, 4, 11, 12, 14, 5, 13, 9, 11, 4, 7, 25, 4, 16, 19, 14]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 3, 6, 7, 3, 5, 4, 6, 5, 4, 9, 90, 4, 8, 4, 6, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [8, 6, 4, 100, 6, 6, 7, 12, 8, 7, 4, 73, 6, 8, 23, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 3, 6, 5, 6, 6, 4, 6, 4, 10, 28, 23, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [3, 5, 8, 101, 5, 17, 4, 6, 38, 8, 14]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [3, 5, 2, 10, 8, 5, 5, 4, 3, 9, 4, 10, 31, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [5, 7, 6, 8, 8, 10, 8, 4, 5, 4, 8, 16, 7, 6, 5, 8, 7, 6, 6, 8, 201, 16, 4, 7, 11, 7, 6, 142, 10, 5, 4]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [2, 5, 5, 6, 6, 6, 11, 7, 5, 8, 11, 4, 5, 7, 7, 7, 5, 16, 8, 6, 17, 13, 9, 9, 123]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 4, 6, 4, 4, 7, 4, 7, 4, 4, 5, 13, 3, 6, 13, 6, 6, 8, 9, 5, 5, 4, 4, 4, 6, 5, 3, 47, 5, 9, 4, 5, 8, 3, 4, 12, 6, 37, 6, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [8, 10, 10, 6, 3, 3, 4, 7, 4, 7, 7, 7, 9, 11, 10, 7, 5, 4, 4, 6, 4, 5, 6, 9, 8, 6, 6, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 3, 7, 8, 4, 6, 13, 6, 7, 9, 7, 6, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [5, 7, 7, 6, 8, 6, 9, 6, 6, 8, 2, 37, 7, 7, 6, 8, 20, 56]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [5, 9, 6, 8, 9, 13, 10, 4, 12, 10, 6, 6, 7, 4, 7, 7, 7, 5, 4, 12, 6, 9, 7, 9, 4, 7, 9, 3, 10, 4, 4, 6, 11, 10, 10, 11, 17]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [5, 5, 4, 6, 5, 4, 8, 3, 4, 10, 13, 5, 4, 4, 3, 17, 7, 5, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11, 6, 13, 7, 11, 6, 7, 8, 7, 9, 8, 6, 9, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [3, 2, 3, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [5, 7, 6, 8, 9, 7, 8, 9, 6, 8, 7, 7, 8, 24, 7, 6, 9, 7, 8, 8, 7, 7, 8, 8, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 6, 16, 6, 6, 6, 7, 7, 7, 7, 10, 4, 17, 10, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 30
termination = MathOptInterface.OPTIMAL
objective_value = 0.586117539023036
thermo_feasible = true
