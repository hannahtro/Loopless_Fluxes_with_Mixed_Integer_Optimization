┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iML1515
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iML1515
----------------------------------
number of metabolites : 1877
number of reactions : 2712
number of genes : 1516

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 54
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2712 flux variables and 5087 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 2, 2, 3, 2, 2, 115, 318, 3, 3, 3, 7, 2, 4, 2, 67, 14, 3, 3, 3]
length(C_list) = 15
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 2, 3, 2, 3, 4, 3, 5, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 3, 4, 4, 3, 65, 4, 4, 5, 4, 6, 5, 4]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 5, 8, 8, 7, 4, 9, 4, 8, 9, 6, 5, 4, 7, 8, 4, 7, 65, 6, 5, 5, 11, 4, 10, 16, 13, 10, 5, 4, 6, 10, 4, 4, 4, 4, 4, 4, 5, 342, 11, 4, 8, 6, 6, 7, 6, 359, 14]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [5, 13, 241, 29, 14, 6, 12, 11, 11, 9, 11, 11, 7, 14, 67, 8, 78, 8, 127, 19, 14, 8, 8, 14, 8, 8, 8, 10, 9, 31, 12, 33, 10, 7, 9]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 3, 3]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 13, 12, 10, 4, 10, 8, 166, 10, 10, 15, 12, 3, 11, 12, 12, 8, 8, 46, 17, 8, 11, 8, 8, 10, 96, 76, 8, 8, 8, 8, 10, 12, 8, 12, 8, 12, 21]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [9, 9, 14, 16, 31, 8, 15, 43, 21, 12, 10, 210, 12, 19, 9, 11, 18, 12, 67, 8, 20, 13, 8, 14, 9, 12, 10, 11, 8, 12, 14, 12, 8, 170, 8, 8, 9, 10, 11, 9, 12, 9, 10, 9, 11, 9, 10, 7, 12, 9, 12]
AssertionError("!(isempty(C_list_filtered))")
