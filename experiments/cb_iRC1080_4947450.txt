┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 44
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6]
length(C_list) = 29
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [7, 9, 2, 4, 3, 3, 3, 3, 4, 3, 8, 7, 4, 4, 3, 4, 5, 5, 3, 3, 8, 5, 8, 4, 3, 6, 2, 8, 5]
length(C_list) = 29
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [5, 3, 3, 4, 4, 5, 3, 6, 4, 400, 3, 17, 11, 4, 4, 5, 4, 3, 3, 6, 5, 7, 10, 3, 6, 3]
length(C_list) = 24
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [13, 4, 3, 4, 6, 5, 6, 3, 5, 5, 3, 21, 7, 4, 4, 4, 7, 5, 4, 7, 5, 3, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 8, 3, 3, 4, 3, 3, 4, 4, 9, 8, 3, 9, 3, 5, 4, 7, 8, 7, 9, 77, 3, 9, 64, 3, 53, 6, 8, 38, 7, 4]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [5, 2, 8, 5, 8, 8, 3, 7, 4, 10, 7, 7, 8, 8, 8, 8, 6, 3, 4, 8, 7, 4, 3, 3, 13, 8, 4, 11]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [8, 9, 5, 8, 5, 3, 12, 5, 9, 5, 8, 4, 7, 15, 9, 3, 3, 3, 7, 194, 13, 13, 4, 7, 3, 5, 6, 8, 5, 8, 8, 9]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [8, 7, 4, 6, 4, 7, 9, 3, 8, 6, 8, 3, 8, 7, 5, 7, 7, 8, 6, 8, 28, 5, 3, 7, 4, 7, 7, 7, 4, 10, 7, 5]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [10, 3, 3, 8, 9, 3, 116, 3, 7, 3, 9, 4, 5, 7, 8, 3, 9, 5, 14, 3, 19, 3, 3, 110, 47, 3, 3, 3, 3]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [3, 3, 10, 8, 19, 7, 3, 4, 7, 3, 4, 3, 13, 6, 7, 7, 7, 7, 12, 46, 6, 8, 4]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 4, 4, 8, 5, 3, 55, 3, 3, 5, 4, 6, 5, 5, 4, 5, 4, 6, 33]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 4, 10, 9, 9, 8, 3, 10, 6, 3, 18, 13, 7, 8, 7, 15, 6, 17, 9, 10, 4, 6, 3, 5, 8, 4]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 3, 3, 9, 8, 3, 3, 6, 7, 34, 13, 3, 4, 3, 6, 3, 6, 4, 4, 3, 3, 20, 4, 9, 4]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 3, 3, 132, 3, 3, 4, 26, 3, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [3, 5, 7, 3, 8, 8, 8, 7, 8, 9, 8, 7, 9, 4, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [4, 9, 3, 4, 16, 12, 6, 5, 5, 4, 5, 3, 3, 6, 6, 10, 8, 11, 6, 4, 43, 12, 116, 6, 3, 3, 4, 10, 10]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [9, 5, 14, 4, 16, 14, 15, 20, 14, 13, 4, 16, 4, 13, 12, 4, 7, 13, 5, 13, 14, 15, 7, 13, 3, 156, 20, 152, 17, 157, 19]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 9, 9, 4, 4, 11, 5, 5, 8, 7, 4, 3, 4, 54, 3, 6, 6, 8, 97, 6, 5, 4, 5, 10, 4, 3, 5, 8, 5]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [8, 6, 4, 4, 4, 7, 3, 4, 4, 4, 4, 11, 3, 4, 8, 3, 17, 3, 5, 5, 4, 10, 9, 18]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [12, 9, 4, 13, 3, 12, 3, 9, 14, 24, 14, 4, 4, 8, 4, 3, 5, 4, 3, 15, 12, 12, 15, 22, 11]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [3, 8, 7, 16, 8, 5, 8, 7, 4, 14, 15, 16, 8, 14, 14, 7, 8, 8, 14, 14, 16, 33, 7, 7, 7]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [8, 10, 9, 3, 338, 7, 8, 3, 22, 30, 5, 4, 4, 12, 3, 7, 4, 7, 12]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [7, 3, 14, 3, 9, 11, 13, 19, 4, 7, 13, 7, 8, 25, 11, 34, 10, 13, 20, 17, 7, 13, 15, 12, 10, 15, 114, 20, 14]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [7, 4, 8, 13, 4, 3, 4, 10, 7, 8, 10, 29, 6, 7, 4, 4, 7, 8, 6, 11, 6, 4, 4, 3, 7, 3, 7, 4, 20, 18]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [10, 4, 4, 8, 4, 4, 4, 5, 5, 43, 6, 8, 6, 10, 80, 9, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [14, 6, 6, 4, 3, 20, 6, 4, 19, 5, 9, 4, 3, 3, 5, 6, 6, 8, 14, 8, 14, 18, 8, 16, 4, 15, 5]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [4, 3, 13, 11, 12, 8, 4, 11, 104, 13, 3, 5, 5, 7, 8, 4, 3, 16, 9, 17, 4, 4, 12, 14, 9, 11, 5]
length(C_list) = 24
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [12, 4, 4, 5, 6, 5, 6, 4, 12, 6, 5, 10, 3, 5, 5, 5, 12, 4]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [8, 3, 6, 4, 5, 5, 19, 17]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [8, 8, 18, 17, 7, 10, 16, 11, 11, 84, 261, 9]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [3, 9, 3, 4, 9, 4, 6, 4, 4, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [16, 3, 9, 8, 12, 8, 15, 9, 22, 16, 15, 17, 18, 4, 16, 24, 22, 8, 16, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 11, 7, 6, 7, 526, 6, 6, 6, 7, 6, 7, 6, 7, 7, 7, 6, 6, 6, 48, 49, 7, 8, 6, 7, 6]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [13, 13, 12, 14, 14, 14]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [4, 3, 9, 3, 9, 8, 9, 4, 3, 12, 9, 50]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [8, 10, 14, 4, 10, 11, 335, 12, 10, 15, 9, 10, 9, 10, 10, 12, 9, 10, 14, 13, 8, 9, 9, 11, 12, 8, 9, 9, 10, 97, 14, 8]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 7, 5]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 37
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
