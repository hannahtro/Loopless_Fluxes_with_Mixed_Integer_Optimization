┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 44
max_cuts = 22
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6]
length(C_list) = 22
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [8, 9, 4, 4, 3, 3, 3, 3, 3, 2, 8, 3, 5, 4, 3, 4, 5, 4, 7, 2, 8, 7, 6, 6, 6, 4, 5, 241, 3, 45, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 9, 3, 5, 4, 4, 4, 3, 4, 3, 3, 3, 3, 4, 5, 3, 4, 3, 8, 3, 3, 5, 3, 11, 7, 4, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [8, 11, 4, 450, 3, 10, 9, 6, 8, 5, 5, 10, 4, 4, 8, 4, 7, 3, 9, 238, 4, 5, 9, 9, 4, 7, 8, 3, 3, 8, 9, 7, 5, 7, 8, 14]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 8, 4, 3, 3, 5, 4, 6, 124, 4, 5, 147, 7, 3, 4, 6, 7, 96, 4, 5, 4, 9, 24, 5, 7]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [7, 9, 7, 7, 3, 4, 9, 7, 9, 6, 7, 9, 9, 8, 154, 9, 9, 7, 3, 7, 5, 8, 7, 8, 8, 7, 9, 7, 8, 7, 5, 8, 7, 8, 12]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [9, 3, 9, 4, 6, 9, 9, 275, 3, 3, 4, 8, 3, 4, 6, 15, 6, 3, 7, 7, 3, 3, 6, 25, 14, 9, 3, 3, 7, 3, 4, 9, 8, 8, 20]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 9, 3, 4, 4, 3, 8, 6, 3, 3, 8, 16, 3, 4, 8, 5, 8, 6, 3, 73, 7, 187, 10, 56, 7, 10, 8, 9, 4, 8, 8, 12]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [8, 3, 18, 3, 5, 4, 5, 16, 4, 5, 5, 5]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [7, 3, 11, 3, 8, 3, 177, 3, 8, 3, 7, 8, 234, 5, 18, 18, 8, 8, 4, 4, 13, 8, 28, 16, 8, 8, 8, 3, 26, 4, 8, 11]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 4, 5, 76, 5, 384, 8, 9, 7, 4, 8, 8, 8, 4, 5, 26, 107, 200, 5, 5, 13, 5]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 10, 3, 4, 7, 8, 3, 4, 3, 4, 3, 5, 4, 3, 3, 6, 5, 5, 3, 10, 4, 8]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [9, 3, 8, 8, 8, 8, 16, 8, 4, 9, 8, 12, 8, 3, 9, 9, 4, 8, 5, 8, 10, 6, 7, 3, 8, 7, 7, 7, 8, 9, 16]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [7, 9, 7, 3, 4, 7, 6, 7, 3, 8, 3, 4, 7, 7, 6, 7, 7, 6, 8, 4, 7, 7, 4, 3, 8, 5, 8, 11, 7, 8]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [5, 9, 3, 3, 3, 3, 9, 9, 12, 8, 3, 3, 3, 9, 8, 3, 5, 13, 4, 9, 3, 20, 4, 50]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [3, 4, 11, 9, 11, 7, 7, 12, 10, 4, 8, 15, 8, 6, 15, 8, 26, 17, 16, 10]
length(C_list) = 20
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [18, 7, 17, 5, 3, 3, 16, 13, 9, 4, 16, 6, 6, 3, 24, 18, 15, 30, 19, 12, 15, 7, 20, 14, 15, 10, 5, 4, 19, 32]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [7, 6, 8, 7, 3, 4, 5, 14, 9, 7, 8, 8, 4, 5, 4, 3, 4, 10, 13, 7, 12, 14, 4, 4, 6, 8, 5, 8, 474]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [9, 3, 3, 4, 3, 3, 10, 5, 11, 4, 13, 3, 5, 10, 7, 9, 5, 9, 7, 4, 5, 6, 5, 6, 351]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 5, 8, 5, 9, 3, 4, 4, 7, 8, 8, 13, 4, 11, 8, 4, 10, 5, 9]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [11, 8, 10, 8, 10, 4, 9, 7, 3, 6, 9, 8, 15, 3, 10, 9, 9, 7, 9, 7, 7, 7, 10, 8, 9, 15, 14, 8, 65]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 4, 4, 5, 5, 4, 5, 5, 3, 5, 4, 4, 4, 3, 4, 3, 4, 514, 5, 6, 5, 5, 4, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [7, 2, 5, 9, 8, 5, 4, 4, 6, 6, 3, 5, 12, 8, 6, 5, 6, 19, 11, 6, 9, 5, 4, 7, 6, 5, 8]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [8, 7, 16, 10, 17, 17, 10, 9, 10, 21]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 5, 4, 5, 11, 3, 4, 4, 4, 4, 3, 4, 3, 3, 4, 8, 78, 6, 6, 18, 4, 5, 8, 4, 8, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 8, 4, 4, 9, 270, 9, 8, 7, 14, 11, 7, 7, 12]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 5]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [12, 14, 9, 4, 4, 4, 4, 7, 10, 11, 22, 17, 13, 4, 6, 17, 9, 6, 3, 16, 12, 4, 8, 4, 8, 4, 93, 10]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [17, 4, 4, 3, 5, 7, 4, 4, 25, 18, 26, 42, 23, 11, 24, 20, 10, 12, 5, 25, 6, 11, 19, 24, 24, 25, 20, 27, 27]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 3, 4, 11, 4, 4, 4, 7, 4, 3, 4, 5, 102]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 14, 3, 4, 4, 14, 20, 20, 8, 10, 127, 7, 19, 96, 8, 7, 8, 7, 16, 16, 14, 18, 10, 11]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 5, 3, 3, 6, 7, 11, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [7, 3, 4, 6, 4, 4, 8, 3, 3, 272, 3, 3, 6, 5, 3, 3, 3, 7, 10, 48, 4, 3, 4, 4, 11]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [10, 10, 14, 9, 15, 4, 3, 16, 15, 5, 8, 7, 9, 9, 15, 7, 7, 9, 4, 6, 10, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 34
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
