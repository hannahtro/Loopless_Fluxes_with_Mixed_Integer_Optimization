┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 44
max_cuts = 11
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6]
length(C_list) = 11
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 2, 5, 3, 5, 4, 9, 3, 3, 3, 3, 4, 4, 4, 3, 4, 5, 3, 3, 275, 7, 4, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [12, 9, 5, 5, 3, 5, 5, 4, 6, 4, 5, 3, 316, 4, 7, 11, 3, 85, 4, 4, 3, 4, 3, 8, 5, 5, 4, 6, 8, 7, 4, 136, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 9, 3, 8, 5, 3, 18, 4, 9, 7, 6, 6, 5, 11, 3, 6, 6, 5, 5, 9, 4, 5, 3, 11, 5, 6, 9, 27]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [8, 9, 8, 5, 183, 7, 3, 3, 5, 4, 4, 8, 8, 7, 3, 5, 3, 6, 7, 9, 5, 8, 3, 6, 8, 9, 6, 3, 4, 8, 4, 8, 3, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [8, 10, 5, 8, 11, 11, 7, 5, 11, 5, 6, 11, 5, 8, 5, 10]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 9, 7, 5, 8, 12, 8, 9, 7, 9, 7, 7, 7, 8, 8, 9, 9, 8, 11, 9, 21, 13, 6, 3, 7, 8, 9, 9, 7, 7, 10, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 4, 3, 4, 3, 3, 3, 5, 5, 6, 6, 4, 6, 5, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 6, 6, 4, 3, 3, 5, 4, 5, 25, 5, 8, 4, 4, 9, 7, 282, 3, 353, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [5, 9, 8, 8, 7, 14, 9, 10, 9, 8, 6, 7, 8, 9, 8, 8, 7, 8, 9, 7, 9, 5, 6, 4, 7, 7, 6, 8, 8, 9, 8, 8, 9, 8, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [9, 9, 3, 8, 10, 9, 5, 8, 9, 7, 10, 8, 8, 9, 9, 8, 9, 7, 9, 44, 9, 10, 8, 8, 10, 8, 13, 8, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 9, 3, 3, 8, 4, 7, 5, 3, 14, 3, 8, 8, 3, 9, 8, 3, 3, 8, 4, 12, 4, 6, 10, 4, 3, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [5, 3, 6, 8, 8, 9, 8, 3, 39, 4, 3, 4, 7, 8, 56, 11, 3, 9, 9, 5, 4, 5, 3, 4, 9, 9, 4, 8, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [10, 9, 44, 3, 7, 3, 9, 10, 6, 8, 6, 3, 6, 7, 8, 4, 7, 8, 7, 3, 7, 10, 4, 5, 14, 5, 10, 7, 8, 3, 5, 8, 8, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [5, 9, 11, 7, 3, 3, 3, 113, 3, 3, 3, 4, 2, 8, 8, 8, 8, 8, 9, 9, 7, 55, 8, 7, 21, 62, 11, 9, 6, 85, 4, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [9, 9, 6, 3, 6, 5, 3, 4, 6, 6, 6, 5, 8, 5, 5, 4, 5, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [15, 10, 7, 4, 4, 5, 13, 192, 11, 7, 10, 258, 51, 13, 16, 113, 8, 12, 9, 8, 8, 12, 14, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [9, 9, 5, 3, 9, 4, 3, 6, 4, 7, 7, 7, 7, 7, 7, 6, 10, 6, 5, 3, 5, 4, 8, 7, 12, 76, 8, 9, 8, 7, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [7, 8, 8, 7, 8, 7, 28, 7, 10, 6, 8, 8, 11, 8, 5, 7, 7, 8, 10, 7, 8, 8, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [9, 7, 8, 4, 14, 8, 7, 6, 7, 8, 7, 9, 8, 4, 17, 4, 7, 5, 7, 4, 14, 14, 8, 10, 9, 7, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [7, 9, 9, 7, 8, 8, 8, 8, 7, 14, 8, 14, 3, 8, 4, 7, 4, 3, 7, 15, 3, 13, 9, 7, 7, 10, 18, 16, 4, 12, 13]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [7, 8, 6, 8, 16, 3, 8, 4, 7, 6, 7, 8, 3, 3, 22, 4, 3, 5, 3, 9, 6, 8, 4, 9, 226, 7, 7, 9, 236, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [8, 4, 3, 4, 4, 3, 4, 8, 8, 10, 3, 10, 125, 3, 9, 7, 5, 4, 8, 8, 6, 6, 3, 11, 3, 8, 4, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [4, 7, 16, 6, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [7, 10, 10, 3, 5, 18, 7, 18, 13, 8, 7, 6, 8, 9, 8, 12, 8, 11, 7, 5, 8, 8, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [8, 3, 7, 8, 6, 8, 8, 8, 4, 4, 8, 7, 18, 13, 7, 16, 11, 23, 5, 7, 7, 181, 15, 8, 7, 20, 34, 132]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [3, 4, 10, 8, 4, 8, 7, 9, 3, 367, 5, 4, 4, 3, 8, 3, 5, 3, 4, 3, 9, 116, 10, 7, 8, 8, 13, 8, 9, 7, 6, 9, 9, 9, 9, 16]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [8, 9, 20, 250, 92, 5, 3, 8, 5, 7, 7, 3, 8, 339, 8, 11, 3, 8, 7, 15, 10, 6, 8, 7, 18, 8, 8, 8, 7, 6, 15]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [8, 8, 7, 8, 7, 4, 7, 7, 4, 4, 9, 9, 3, 5, 11, 7, 9, 8, 139, 8, 8, 8, 8, 7, 4, 12, 5, 7, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 16, 36, 5, 4, 3, 9, 244, 3, 4, 30, 53, 3, 3, 4, 4, 43, 3, 17, 6, 9, 8, 13, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 30
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
