┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iLB1027_lipid
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iLB1027_lipid
----------------------------------
number of metabolites : 2172
number of reactions : 4456
number of genes : 1027

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 89
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 4456 flux variables and 8868 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [3, 3, 19, 3, 4, 6, 3, 423, 3, 15, 126, 21, 3, 24, 38, 34, 10, 4, 24, 35, 4, 36, 34, 4, 19, 15, 29, 46, 10, 134, 282, 4, 71, 4, 15, 18, 13, 3, 16, 10, 6]
length(C_list) = 13
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [6, 5, 8, 6, 75, 6, 3, 8, 103, 6, 5, 39, 9, 4, 193, 7]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 6, 10, 6, 4, 8, 21, 207, 7, 3, 9, 12, 259, 6, 9, 102, 9, 5]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 5, 3, 3, 6, 6, 103, 4, 3, 4, 10, 109, 4, 8, 7, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 6, 6, 76, 3, 6, 6, 4, 4, 8, 171, 3, 7, 3, 7, 4, 50, 4, 4, 18, 6, 5, 44]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 25, 9, 4, 16, 5, 125, 10, 10, 77, 10, 6, 39, 4, 42]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [8, 6, 12, 9, 10, 10, 10, 629, 11, 3, 12, 5, 11, 215, 281, 58, 10, 13, 208, 19, 13, 297, 15]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [6, 6, 3, 6, 5, 207, 10, 8, 62, 7, 7, 12, 10, 8, 6, 165, 101]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 3, 3, 6, 4, 10, 4, 4, 4, 6, 3, 4, 3, 3, 4, 3, 3, 11, 4, 4, 502, 15, 29, 5, 3, 4, 4, 21, 3, 4, 4, 7, 3, 10, 4, 3, 3, 248, 3, 5, 498, 9, 4, 4, 3, 3, 20, 3, 5, 59, 4, 9, 3, 4, 3, 4]
length(C_list) = 43
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [6, 44, 6, 12, 6, 6, 7, 7, 9, 7, 7, 8, 7, 282, 9, 17]
AssertionError("!(isempty(C_list_filtered))")
