┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iMM1415
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iMM1415
----------------------------------
number of metabolites : 2775
number of reactions : 3726
number of genes : 1375

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 75
max_cuts = 19
(indicator, big_m) = (false, true)
BIG M ADDED
model with 3726 flux variables and 6998 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [6, 3, 5, 3, 3, 4, 7, 9, 125, 18, 4, 4, 4, 3, 4, 3, 5, 8, 3, 3, 2, 3, 3, 4, 4, 3, 3, 4, 56, 5, 5, 239, 2, 3, 352, 454, 4, 3, 4, 2]
length(C_list) = 19
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [18, 3, 5, 3, 2, 4, 7, 5, 4, 3, 2, 3, 7, 4, 4, 4, 2, 4, 3, 4, 9, 4, 4, 4, 48, 3, 6, 3, 6, 4, 4, 6, 4, 496, 7, 11, 4, 2]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [5, 2, 8, 2, 4, 2, 3, 125, 4, 5, 3, 6, 2, 4, 4, 4, 16, 4, 2, 3, 7, 6, 53, 6, 2, 4, 3, 2, 3, 4, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [9, 3, 9, 3, 4, 127, 3, 9, 4, 5, 3, 4, 11, 3, 4, 8, 4, 4, 64, 4, 3, 2, 21, 3, 4, 9, 4, 3, 2, 4, 2, 60, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [7, 3, 9, 56, 26, 3, 7, 7, 11, 101, 5, 3, 3, 4, 11, 7, 7, 4, 8, 4, 4, 5, 4, 3, 7, 9, 7, 4, 3, 4, 14, 2, 4, 4, 4, 2, 4, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [20, 3, 10, 4, 4, 4, 8, 5, 10, 8, 6, 4, 5, 22, 4, 4, 5, 4, 7, 4, 4, 4, 4, 3, 4, 17, 4, 3, 4, 7, 212, 4, 12, 4, 5, 5, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [7, 3, 58, 4, 3, 73, 3, 10, 4, 3, 12, 6, 7, 8, 6, 9, 23, 4, 4, 6, 82, 4, 4, 11, 6, 4, 5, 4, 7, 130, 3, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [12, 3, 10, 5, 5, 4, 11, 5, 10, 4, 3, 4, 4, 13, 5, 6, 8, 10, 6, 6, 4, 5, 7, 4, 4, 7, 274, 8, 4, 4, 4, 5, 10, 4, 2, 4, 3, 3, 87, 7, 5, 4, 8]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [20, 3, 4, 7, 3, 8, 2, 153, 4, 3, 4, 4, 61, 4, 6, 3, 6, 4, 3, 4, 7, 12, 4, 4, 3, 4, 11, 34, 4, 3, 4, 12, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [10, 3, 94, 8, 11, 11, 3, 4, 4, 15, 12, 7, 7, 20, 4, 3, 5, 4, 4, 3, 7, 4, 4, 5, 4, 3, 4, 7, 72, 2, 4, 3, 6, 4, 9, 4, 8]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [3, 3, 7, 3, 7, 4, 9, 9, 2, 4, 7, 11, 4, 3, 4, 3, 5, 3, 112, 4, 9, 9, 3, 4, 9, 2, 7, 3, 3, 9, 3, 4, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [21, 3, 7, 4, 6, 4, 4, 8, 4, 12, 10, 21, 4, 4, 12, 12, 5, 4, 8, 13, 7, 7, 11, 4, 6, 2, 8, 4, 459, 9, 4, 4, 4, 5, 4, 6, 4, 6, 5, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [21, 3, 5, 5, 9, 3, 8, 10, 9, 77, 3, 4, 12, 8, 15, 3, 4, 4, 3, 4, 30, 8, 64, 7, 3, 47, 5, 5, 3, 6, 7, 5, 4, 9]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [5, 5, 3, 6, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 5, 5, 4, 4, 3, 5, 2, 3, 5, 4, 3, 5, 5, 53, 7, 5, 5, 4, 6, 3, 4, 4, 4, 7, 300, 4, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 4, 4, 3, 2, 3, 4, 3, 8, 3, 2, 2, 2, 3, 5, 3, 7, 3, 3, 3, 4, 3, 65, 4, 3, 3, 2, 4, 7, 2, 3, 5, 4, 4, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 6, 3, 2, 2, 3, 3, 4, 3, 2, 4, 4, 4, 3, 5, 2, 5, 3, 4, 6, 3, 3, 4, 4, 3, 5, 4, 3, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [2, 7, 4, 3, 2, 2, 5, 4, 5, 4, 3, 4, 4, 4, 4, 6, 5, 301, 6, 7, 4, 5, 4, 45, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [2, 3, 6, 3, 4, 4, 20, 5, 6, 2, 4, 5, 5, 4, 5, 4, 4, 5, 4, 6, 8, 5, 4, 4, 6, 5, 3, 4, 7, 5, 5, 6, 11, 4, 6, 5, 200, 5, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 4, 4, 7, 5, 5, 5, 4, 5, 5, 4, 4, 4, 7, 4, 5, 5, 6, 4, 5, 5, 3, 4, 9, 4, 5, 6, 5, 4, 4, 4, 4, 6, 5, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [7, 5, 4, 7, 4, 3, 4, 3, 4, 4, 7, 6, 4, 5, 4, 6, 5, 6, 4, 5, 5, 5, 4, 4, 6, 5, 119, 4, 4, 4, 4, 6, 4, 4, 4, 6, 4, 6, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 5, 5, 4, 7, 4, 3, 4, 5, 4, 4, 5, 3, 7, 3, 5, 6, 4, 4, 7, 8, 5, 3, 3, 5, 5, 8, 5, 17, 4, 4, 8, 6, 6, 208, 4, 7, 15]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 5, 72, 4, 6, 4, 6, 4, 3, 5, 4, 4, 7, 5, 7, 4, 9, 6, 6, 3, 4, 6, 5, 5, 5, 4, 6, 6, 6, 33, 3, 4, 6, 4, 8, 12, 5, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 7, 4, 4, 5, 5, 8, 5, 5, 5, 5, 6, 4, 4, 6, 42, 6, 4, 6, 5, 4, 3, 4, 6, 5, 4, 8, 4, 5, 5, 4, 4, 4, 5, 5, 5, 5, 8, 6, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 4, 5, 7, 3, 6, 6, 7, 3, 6, 3, 4, 4, 6, 3, 6, 5, 3, 5, 5, 28, 5, 5, 5, 5, 5, 7, 4, 6, 326, 6, 5, 5, 3, 4, 6, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 4, 27, 6, 5, 4, 4, 5, 5, 4, 4, 5, 12, 3, 3, 6, 6, 3, 5, 4, 3, 3, 4, 3, 5, 33, 5, 59, 3, 4, 3, 5, 152, 4, 4, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 7, 7, 5, 5, 4, 6, 6, 117, 6, 3, 4, 4, 5, 4, 6, 3, 5, 20, 4, 4, 6, 4, 357, 10, 4, 4, 4, 14, 7, 215, 5, 4, 6, 9, 6, 8]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 6, 4, 5, 6, 6, 7, 4, 5, 5, 5, 5, 22, 5, 5, 5, 4, 4, 4, 5, 6, 4, 29, 6, 6, 6, 5, 5, 4, 4, 4, 4, 6, 5, 6, 5, 5, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [4, 5, 6, 5, 4, 7, 6, 3, 287, 3, 5, 6, 6, 5, 6, 6, 7, 5, 5, 5, 52, 15, 4, 7, 6, 6, 7, 3, 8, 3, 6, 7, 7, 5, 6, 5, 5, 8, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 3, 6, 4, 5, 5, 5, 5, 4, 4, 4, 4, 7, 3, 5, 7, 5, 6, 3, 5, 5, 8, 11, 4, 4, 4, 4, 4, 5, 10, 6, 4, 6, 5, 5, 4, 5, 5, 7, 5, 5, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [5, 4, 8, 6, 5, 5, 6, 6, 6, 6, 4, 6, 7, 7, 4, 8, 4, 4, 7, 4, 6, 7, 5, 3, 9, 5, 6, 5, 6, 5, 10, 7, 6, 4, 20, 6, 16, 5, 6, 133, 5, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 4, 3, 5, 4, 5, 5, 5, 5, 5, 393, 4, 4, 8, 5, 3, 5, 5, 4, 5, 443, 11, 3, 8, 6, 4, 7, 4, 8, 5, 7, 6, 5, 4, 3, 7, 25, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 4, 55, 3, 4, 4, 5, 5, 6, 3, 5, 6, 5, 6, 21, 4, 4, 4, 4, 6, 4, 6, 5, 6, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 6, 5, 4, 6, 4, 7, 4, 5, 4, 4, 6, 3, 4, 4, 5, 5, 3, 4, 6, 5, 4, 6, 3, 3, 5, 6, 6, 4, 6, 5, 4, 4, 7, 8, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 5, 3, 4, 5, 4, 4, 8, 6, 6, 4, 3, 6, 5, 4, 5, 4, 4, 3, 5, 5, 6, 3, 5, 4, 5, 3, 4, 5, 5, 4, 7, 4, 11, 83, 3, 4, 4, 5, 4, 39, 7, 20]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 4, 5, 4, 4, 3, 3, 3, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 7, 4, 484, 4, 4, 4, 4, 8, 4, 5, 4, 4, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [4, 14, 5, 4, 5, 5, 5, 3, 4, 3, 6, 4, 5, 6, 4, 4, 5, 3, 5, 4, 5, 5, 4, 5, 8, 8, 123, 5, 360, 6, 5, 5, 4, 5, 4, 29]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 4, 3, 4, 4, 6, 3, 4, 4, 5, 6, 4, 5, 5, 4, 4, 8, 4, 5, 6, 13, 6, 4, 5, 4, 4, 6, 28, 4, 10]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 5, 4, 5, 6, 5, 5, 35, 13, 5, 4, 4, 4, 6, 5, 4, 5, 5, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 6, 4, 6, 5, 4, 3, 4, 7, 6, 6, 5, 3, 5, 5, 7, 5, 26, 9, 3, 4, 6, 5, 3, 4, 5, 6, 168, 6, 5, 7, 5, 10, 7, 4, 7, 5, 175, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [4, 5, 7, 5, 4, 4, 5, 4, 5, 4, 5, 5, 6, 5, 5, 9, 7, 5, 8, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 5, 4, 5, 5, 22, 5, 6, 5, 6]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [5, 6, 4, 4, 4, 5, 3, 35, 6, 4, 6, 6, 6, 6, 4, 8, 13, 11, 14, 6, 4, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [8, 6, 8, 7, 4, 8, 5, 7, 8, 9, 4, 48, 9, 7, 11, 6, 7, 64, 6, 4, 6, 9, 6, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 4, 4, 5, 223, 4, 4, 3, 4, 5, 6, 4, 5, 3, 5, 4, 6, 6, 4, 5, 96, 6, 6, 4, 4, 6, 5, 5, 4, 5, 5, 7, 5, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 3, 4, 5, 5, 8, 3, 7, 4, 3, 4, 5, 4, 6, 5, 4, 7, 5, 4, 6, 4, 9, 4, 5, 18, 4, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 157, 3, 3, 6, 6, 4, 6, 4, 4, 5, 3, 5, 6, 7, 6, 13, 6, 7, 4, 3, 5, 3, 4, 4, 5, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 7, 5, 3, 5, 4, 4, 15, 6, 5, 4, 8, 5, 6, 4, 4, 11, 6, 4, 49, 6, 5, 6, 5, 7, 4, 5, 5, 6, 6]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [5, 4, 6, 7, 5, 4, 4, 4, 6, 4, 4, 4, 5, 7, 3, 9, 7, 5, 5, 4, 6, 5, 5, 6, 5, 5, 5, 6, 6, 5, 4, 9, 65, 5, 4, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 11, 5, 4, 5, 5, 5, 5, 121, 9, 5, 5, 5, 6, 4, 4, 5, 5, 6, 4, 5, 5, 6, 5, 7, 4, 7, 52, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [5, 4, 6, 4, 28, 5, 5, 8, 59, 7, 5, 4, 5, 7, 7, 5, 7, 5, 4, 4, 4, 4, 5, 204, 6, 4, 4, 4, 4, 6, 4, 6, 5, 5, 5, 4, 7, 9]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 4, 5, 4, 3, 6, 4, 4, 6, 4, 4, 5, 5, 5, 4, 4, 4, 61, 4, 5, 12, 5, 5, 8, 5, 5, 6, 5, 13, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [3, 25, 6, 5, 4, 4, 4, 5, 4, 5, 6, 6, 4, 5, 5, 5, 222, 4, 5, 4, 5, 5, 211, 5, 5, 5, 5, 4, 4, 5, 5]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 4, 4, 5, 4, 4, 31, 5, 7]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 4, 5, 4, 5, 4, 21, 5, 9]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 55]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 4, 4, 3, 4, 4, 4, 4, 5, 4, 5, 77, 4, 4, 7, 4, 251, 5, 14, 6, 9, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [4, 46, 156]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 57
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
