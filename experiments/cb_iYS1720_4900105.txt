ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iYS1720
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iYS1720
----------------------------------
number of metabolites : 2436
number of reactions : 3357
number of genes : 1707

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 67
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 3357 flux variables and 6229 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 11, 2, 2, 3, 2, 8, 2, 2, 2, 8, 4, 40, 40, 41, 41, 4, 16, 9, 9, 9, 14, 16, 16, 9, 9, 9, 3, 2, 4, 6, 3, 8, 270, 39, 16, 15, 11, 14, 42, 43]
length(C_list) = 14
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [3, 11, 6, 2, 2, 7, 2, 2, 2, 2, 6, 2, 40, 40, 81, 41, 2, 9, 9, 9, 9, 16, 18, 9, 9, 9, 8, 2, 6, 6, 6, 3, 39, 8, 16, 16, 209, 6, 39]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 11, 21, 6, 3, 6, 6, 15, 49, 56, 8, 6, 3, 40, 40, 41, 41, 2, 6, 9, 9, 11, 14, 100, 63, 9, 10, 9, 8, 7, 31, 6, 8, 49, 2, 16, 50, 6, 11, 62, 39]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [2, 11, 3, 2, 6, 2, 6, 111, 7, 39, 39, 40, 40, 7, 3, 16, 30, 9, 16, 16, 16, 14, 9, 9, 15, 6, 6, 86, 14, 10, 44, 19, 14, 9, 3, 39]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 11, 8, 6, 6, 7, 8, 11, 6, 7, 3, 6, 11, 6, 8, 6, 9, 11, 11, 12, 21, 16, 9, 10, 9, 8, 6, 6, 6, 2, 6, 124, 6, 12, 16, 16, 79, 9, 9, 6]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [6, 11, 6, 6, 6, 6, 6, 6, 6, 7, 40, 40, 48, 49, 6, 7, 9, 9, 61, 9, 16, 16, 9, 9, 9, 7, 6, 7, 18, 6, 54, 6, 39, 4, 16, 20, 6, 9, 6, 41]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 11, 6, 6, 7, 8, 6, 6, 4, 99, 40, 43, 42, 7, 8, 9, 9, 9, 9, 18, 16, 9, 9, 9, 7, 6, 3, 8, 10, 229, 7, 6, 42, 42, 16, 15, 14, 10, 58, 44, 192]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [9, 11, 8, 6, 8, 9, 6, 7, 6, 8, 8, 6, 6, 7, 6, 6, 6, 6, 9, 7, 9, 10, 15, 9, 16, 16, 9, 9, 9, 7, 6, 6, 75, 6, 7, 6, 7, 16, 15, 7, 9, 8, 6]
AssertionError("!(isempty(C_list_filtered))")
