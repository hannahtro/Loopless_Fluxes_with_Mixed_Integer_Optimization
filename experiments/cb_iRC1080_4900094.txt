┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:504
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 44
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6]
length(C_list) = 29
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [3, 9, 7, 4, 3, 3, 4, 3, 6, 9, 3, 7, 2, 2, 7, 4, 3, 9, 13, 8, 8, 5, 3, 4, 3, 8, 11]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 8, 8, 5, 4, 4, 3, 3, 3, 4, 4, 3, 4, 3, 3, 7, 4, 3, 4, 6, 3, 4, 4, 3, 6, 7, 4, 6, 26, 4, 5, 8]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 4, 4, 4, 3, 4, 3, 3, 8, 342, 4, 14, 4, 3, 5, 3, 4, 10, 4, 4, 5, 4, 6, 6, 4, 4]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [8, 9, 10, 9, 3, 8, 5, 10, 10, 5, 10, 4, 4, 7, 4, 8, 3, 9, 9, 9, 8, 3, 47, 9, 21, 3, 5, 8, 6, 4, 8, 9]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [5, 5, 3, 5, 5, 3, 9, 4, 3, 5, 3, 8, 7, 14, 8, 8, 10, 5, 3, 4, 3, 5, 5, 37, 7, 9, 5, 5, 9, 10, 2, 13, 10, 11]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 3, 7, 7, 7, 3, 3, 8, 3, 7, 3, 8, 3, 4, 9, 3, 8, 13, 9, 3, 5, 3, 9, 8, 9, 13, 7, 8, 12, 4, 8]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [7, 8, 4, 8, 3, 4, 24, 6, 3, 11, 5, 7, 10, 8, 12, 61, 7, 8, 9, 8, 4, 11, 7, 7, 15, 8, 10]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [7, 12, 16, 8, 3, 6, 3, 14, 16, 3, 3, 15, 5, 3, 10, 3, 7, 13, 17, 15, 3, 3, 9, 7, 6, 7]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [7, 3, 3, 3, 7, 3, 6, 4, 8, 3, 4, 9, 4, 15, 4, 7, 3, 4, 3, 3, 3, 4, 9, 3, 4, 10, 4, 64, 3, 3, 4, 3]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [3, 9, 6, 8, 3, 13, 7, 7, 3, 6, 225, 4, 6, 3, 5, 5, 8, 3, 7, 15, 4, 9, 7, 9, 7, 9, 7, 6]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 10, 3, 4, 3, 5, 3, 6, 5, 8, 4, 20, 5, 4, 17, 6, 269, 6, 18, 20, 7, 6]
length(C_list) = 17
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 5, 3, 4, 3, 4, 3, 9, 8, 6, 3, 7, 6, 4, 3, 57, 3, 45, 8, 3, 7, 8, 6, 4, 18, 95, 6, 11]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [5, 6, 5, 5, 4, 4, 33, 4, 3, 4, 3, 4, 3, 5, 322, 4, 4, 4, 4, 4, 5, 5, 386, 408, 5, 3, 4, 6, 4, 3, 13, 3, 59]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [5, 3, 3, 4, 4, 3, 3, 8, 6, 35, 3, 4, 6, 9, 3, 4, 5, 5, 8, 10, 3, 12, 11, 7, 6, 4]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [9, 9, 5, 6, 3, 3, 3, 6, 8, 3, 3, 5, 9, 3, 5, 6, 7, 5, 5, 165, 9, 3, 5, 14, 21]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [7, 16, 14, 90, 5, 13, 12, 14, 15, 14, 14, 14, 246, 122, 5, 12, 13, 13, 15, 15, 5, 15, 5, 9, 105, 15, 120, 14, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [7, 4, 7, 7, 7, 7, 9]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [8, 22, 23, 17, 25, 19, 23, 22, 27, 24, 21, 22, 23, 27, 25, 19, 24, 23, 22, 17, 30, 24, 19, 20, 17, 29, 27, 28, 26, 25, 26, 20, 24, 27, 25, 33]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 4, 5, 3, 3, 4, 9, 4, 35, 53, 40, 176, 6, 4, 4]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 20
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
