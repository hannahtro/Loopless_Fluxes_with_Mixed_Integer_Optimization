┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iML1515
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iML1515
----------------------------------
number of metabolites : 1877
number of reactions : 2712
number of genes : 1516

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 136
max_cuts = 54
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2712 flux variables and 5087 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 2, 2, 3, 2, 2, 115, 318, 3, 3, 3, 7, 2, 4, 2, 67, 14, 3, 3, 3, 3, 88, 5, 2, 3, 43]
length(C_list) = 26
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 2, 96, 4, 3, 3, 3, 3, 97, 2, 4, 3, 19, 9, 205, 6, 6, 5, 12, 73, 4, 3, 5, 92, 4]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 4, 5, 6, 5, 9, 4, 8, 4, 7, 5, 49, 211, 5]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [8, 5, 158, 6, 7, 9, 6, 5, 99, 11, 6, 5, 109, 11, 11, 6, 11, 4, 4, 3, 4, 185, 6, 15, 4, 14, 4, 4, 20, 22, 4, 20, 4, 4, 4, 6, 15, 8, 2, 9, 6, 7, 8, 13, 9, 2, 9, 5, 4, 4, 4, 4, 9, 5, 9, 8, 8, 6, 9, 5, 4, 4, 10, 12, 13, 7, 7, 15, 9, 6, 4, 6, 26, 4, 6, 5, 6, 3, 7, 7, 4, 6, 84, 4, 6, 9, 9, 60, 4, 5, 9, 5, 5, 8, 4, 4, 5]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [6, 5, 9, 8, 9, 9, 10, 4, 4, 7, 51, 9, 11, 12, 10, 9, 6, 8, 5, 5, 7, 5, 8, 6, 9, 10, 9, 8, 8, 10, 11, 5, 11, 8, 10, 10, 40, 9, 4, 8, 11, 22, 18, 7, 6, 10, 6, 8, 6, 6]
length(C_list) = 50
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 5, 13, 300, 11, 10, 4, 11, 9, 13, 11, 11, 7, 4, 37, 11, 13, 12, 12, 9, 9, 9, 9, 15, 10, 12, 9, 4, 4, 10, 11, 13, 10, 4, 11, 82, 9, 9, 12, 9, 13, 9, 4, 22, 12, 10, 9, 42, 11, 9, 11, 9, 4, 14, 11, 8, 9, 4, 8, 5, 9, 13, 11, 10, 10, 15, 86, 10, 12, 10, 10, 10, 10, 4, 10, 4, 5, 9, 25, 11, 18, 13, 5, 9, 12, 11, 24, 13, 6, 13, 22, 13, 11, 4, 12, 13, 9, 9]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [2, 3, 138, 220, 4, 3, 3, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 91, 5, 5, 22, 11, 84, 55]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [10, 8, 11, 11, 228, 7, 6, 9, 150, 11, 11, 9, 6, 6, 50, 10, 6, 10, 8, 7, 6, 7, 205, 15, 6, 6, 7, 6, 7, 7, 9, 10, 61, 14, 7, 7, 9, 9, 7, 13, 6, 6, 23, 131, 9, 6, 6, 6, 6, 195, 6, 9, 8, 10, 7, 7, 10, 6, 6, 7, 8, 6, 11, 8, 6, 119, 7, 8, 9, 11, 12, 7, 11, 17, 8, 6, 11, 12, 7, 7, 6]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [15, 31, 13, 13, 15, 3, 14, 19, 11, 14, 11, 11, 13, 12, 10, 29, 4, 68, 67, 12, 3, 11, 9, 15, 12, 13, 10, 23, 9, 17, 21, 12, 14, 9, 9, 47, 9, 13, 10, 410, 140, 11, 14, 16, 29, 14, 13, 11, 9, 16, 10, 15, 12, 11, 86, 10, 16, 10, 13, 9, 198, 11, 15, 9, 12, 60, 9, 51, 16, 50, 13, 12, 11, 11, 9, 13, 10, 11, 9, 11, 12, 11, 42, 14, 9, 13, 12, 50, 11, 11, 25, 49, 6, 14, 23, 10, 11, 27, 12, 266, 18]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [5, 8, 11, 11, 11, 23, 155, 7, 37, 11, 11, 9, 9, 7, 7, 6, 7, 10, 6, 10, 6, 24, 9, 16, 16, 7, 7, 14, 9, 7, 7, 7, 15, 7, 8, 9, 6, 8, 7, 6, 7, 9, 6, 6, 9, 5, 9, 6, 6, 8, 10, 9, 7, 6, 6, 6, 14, 8, 6, 47, 6, 9, 7, 8, 9, 6, 6, 7, 6, 6, 9, 11, 11, 11, 8, 12, 20, 7, 7]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 4, 8, 7, 5, 5, 7, 5, 130, 10, 4, 4, 207, 6, 4, 5, 4]
length(C_list) = 20
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [5, 3, 10, 248, 43, 4, 14, 4, 8, 22, 4, 4, 4, 31, 4, 24]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 4, 11, 9, 4, 14, 49, 6, 5, 305, 4, 6, 6, 17, 92, 4, 7, 227, 12, 7, 6, 5, 5, 12, 5, 40, 5, 6, 12, 4, 28, 6, 70, 107]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 5, 5, 35, 11, 5, 9, 5, 5, 150, 10, 6, 7, 15, 6, 166, 8, 24, 7, 6, 5]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [4, 4, 8, 4, 3, 5, 6, 16, 6, 6, 138, 5, 5, 4, 6, 7, 5, 7, 4, 5, 13, 6, 7]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 8, 4, 8, 5, 61, 5, 29, 4, 4, 209, 4, 7, 4, 4, 6, 7]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [3, 4, 5, 4, 5, 5, 25, 5, 20, 12, 4, 21, 98, 14, 8, 6, 89, 33, 7, 136, 6, 12, 6, 16, 4, 5, 6, 9, 24, 4, 10]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [3, 5, 4, 4, 4, 7, 8, 5, 4, 4, 16, 4, 6, 5, 5, 6, 4, 119, 10, 4, 4, 15, 4, 4]
length(C_list) = 24
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 19
termination = MathOptInterface.OPTIMAL
objective_value = 0.8769974141719818
thermo_feasible = true
