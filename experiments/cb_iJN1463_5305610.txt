┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN1463
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN1463
----------------------------------
number of metabolites : 2153
number of reactions : 2927
number of genes : 1462

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 117
max_cuts = 59
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2927 flux variables and 5473 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 2, 4, 6, 5, 3, 3, 3, 132, 2, 5, 6, 4, 314, 6, 4, 8, 5, 6, 213, 6, 8, 5, 10, 3, 6, 7, 7, 25, 30, 7, 8, 27, 15, 13, 7, 11, 18, 12, 12, 11, 15, 11, 105, 29, 11, 11, 38, 15, 11, 11, 11, 11, 11, 11, 11, 31, 17, 11, 19, 11]
length(C_list) = 59
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 4, 3, 196, 8, 4, 5, 66, 3, 4, 3, 3, 5, 2, 5, 7, 10, 3, 3, 46, 14, 18, 5, 4, 6, 6, 8, 17, 5, 4, 9, 19, 11, 13]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [7, 3, 9, 2, 6, 6, 104, 5, 226, 6, 5, 5, 11, 6, 9, 32, 6, 17, 362, 6, 6, 12, 4, 5, 6, 52, 8, 6, 77, 7, 6, 7, 6, 6]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 25, 4, 2, 3, 3, 4, 3, 6, 4, 3, 4, 7, 5, 4, 9, 6, 4, 4, 8, 3, 7, 5, 5, 26, 42, 6, 13, 3, 3, 6, 6, 6, 12, 4, 8, 7]
length(C_list) = 37
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 6, 5, 7, 6, 9, 9, 13, 22, 6, 7, 3, 6, 6, 7, 11, 7, 39, 7, 6, 16, 6, 3, 57, 3, 6, 9, 18, 4, 7, 3, 7, 191, 6, 6, 6, 22, 6, 3, 8, 3, 82, 177, 3]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [7, 3, 4, 3, 3, 105, 4, 5, 5, 2, 3, 4, 3, 3, 11, 3, 3, 21, 3, 10, 7, 4, 15, 6, 3, 4, 5, 3, 5, 5, 13, 3, 20, 11]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [7, 5, 9, 3, 6, 177, 4, 6, 58, 8, 7, 3, 6, 7, 4, 6, 8, 4, 6, 5, 21, 7, 6, 11, 6, 6, 5, 4, 4, 4, 5, 4, 4, 12, 25, 11, 6, 4, 10, 7, 7, 4, 4, 4, 5]
length(C_list) = 45
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [6, 7, 5, 19, 6, 4, 14, 3, 4, 4, 11, 14, 36, 6, 8, 10, 15, 5, 8, 11, 9, 11, 7, 11, 10]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [7, 4, 5, 5, 4, 73, 4, 6, 39, 28, 15, 3, 5, 4, 4, 4, 4, 5, 5, 183, 5, 5, 5, 10, 175, 11, 4, 4, 14, 175, 7, 4, 6, 5, 5, 4, 6, 4, 13, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [2, 9, 4, 8, 5, 8, 7, 9, 3, 9, 6, 7, 10, 6, 2, 15, 7, 6, 8, 5, 7, 6, 8, 7, 6, 9, 9, 6, 8, 3, 7, 30, 9, 9, 8, 5, 28, 8, 9, 7, 12, 6, 11, 8, 10, 10, 16, 8, 8]
length(C_list) = 49
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 6, 2, 11, 3, 163, 7, 11, 114, 7, 5, 6, 6, 7, 6, 4, 4, 13, 6, 129, 14, 8, 15, 4, 116, 10, 8, 139]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [5, 3, 8, 6, 6, 5, 6, 9, 8, 5, 8, 5, 9, 6, 5, 4, 6, 5, 6, 6, 78, 6, 4, 9, 19, 5, 4, 6, 4, 6, 7]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 4, 4, 4, 4, 3, 7, 4, 6, 6, 34, 10, 7, 5, 9, 52, 9, 5, 10, 5, 3, 5, 7, 6, 8, 5, 6, 5, 50, 5, 6]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [6, 3, 2, 3, 6, 8, 5, 7, 145, 12, 75, 16, 5, 6, 21, 110, 5, 6, 5, 4, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [4, 3, 6, 6, 4, 136, 6, 4, 6, 5, 12, 16, 10, 8, 6, 4, 5, 8, 5, 6, 9, 6, 4, 8, 6]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 3, 5, 5, 88, 2, 9, 4, 4, 5, 5, 16, 4, 9, 5, 6, 3, 5, 13, 11, 5, 27, 3, 18, 34, 5, 9, 6, 6]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [3, 6, 6, 6, 5, 7, 41, 6, 6, 9, 8, 3, 6, 5, 6, 6, 5, 6, 8, 8, 8, 6, 7, 7, 4, 11, 51, 7, 6, 6]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 8, 6, 8, 8, 47, 9, 8, 5, 9, 8, 7, 9, 8, 5, 8, 8, 39, 9, 15, 9, 6, 9]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [5, 6, 7, 6, 2, 8, 8, 6, 6, 7, 8, 9, 9, 4, 7, 7, 7, 7, 7, 99, 4, 4, 5, 16, 4, 7, 79, 8, 7, 8, 7, 7, 7, 7, 20, 7]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 4, 2, 5, 4, 7, 3, 3, 2, 2, 7, 3, 5, 6, 79, 2, 3, 9, 2, 7, 5, 5, 5, 3, 5, 9, 4, 6, 3, 6, 5, 5, 35, 10, 4, 3, 10, 11, 4, 5, 5, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 8, 7, 5, 5, 5, 94, 5, 5, 5, 5, 7]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [18, 6, 2, 4, 5, 8, 6, 4, 4, 8, 5, 8, 4, 4, 5, 7, 6, 5, 11, 5, 8, 9, 9, 8, 4, 6, 6, 8, 7, 7, 7, 5, 5, 5, 8, 8, 4, 9, 12, 6, 5, 5, 8, 5, 6, 8, 7, 7, 16, 7, 7, 7, 106, 7, 7, 4, 12, 7, 7, 73, 7, 10, 7, 14, 7, 7, 8, 8, 7, 7, 7]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [15, 6, 4, 4, 2, 5, 3, 13, 4, 3, 3, 7, 6, 3, 3, 11, 4, 4, 6, 4, 7, 4, 4, 6, 5, 2, 5, 4, 11, 18, 10, 6, 9, 7, 4, 6, 13, 4, 5, 6, 16, 4, 3, 3, 10, 8, 5, 5, 7, 7, 5, 3, 3, 3, 5, 3, 4, 11, 3, 8]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [18, 4, 4, 5, 3, 4, 8, 11, 6, 2, 6, 3, 5, 8, 3, 4, 45, 13, 6, 32, 5, 4, 32, 5, 6, 7, 5, 4, 4, 4, 5, 4, 13, 4, 3, 7, 4, 8, 6, 4, 3, 8, 5, 4, 5, 4, 4, 7, 7, 11, 4, 4, 4, 3, 143, 4, 3, 4, 3, 4, 4, 3, 4, 4, 6]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [26, 7, 2, 4, 6, 4, 4, 7, 6, 5, 6, 4, 53, 6, 4, 6, 11, 4, 10, 9, 4, 4, 5, 4, 5, 5, 4, 15, 6, 5, 4, 7, 18, 27, 8, 6, 49, 8, 6, 6, 6, 8, 12, 7, 8, 18, 6, 6, 6, 7, 6, 7, 6, 6, 40, 8, 220, 6, 23, 40, 7, 6, 6]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [10, 3, 4, 15, 6, 5, 3, 5, 3, 11, 3, 6, 33, 3, 4, 6, 2, 5, 4, 3, 31, 15, 21, 9, 6, 5, 5, 7, 7, 3, 6, 3, 6, 3, 3, 175, 5, 6, 6, 4, 5, 13, 167, 94, 5, 8, 8, 10, 14, 9, 6, 6, 7, 7]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [15, 4, 7, 6, 4, 3, 4, 4, 92, 3, 36, 5, 4, 4, 2, 4, 15, 3, 6, 9, 4, 4, 5, 5, 5, 9, 6, 4, 5, 6, 5, 6, 4, 6, 7, 3, 5, 5, 6, 4, 6, 6, 5, 4, 4, 3, 7, 5, 7, 10, 3]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [6, 7, 19, 17, 14, 75, 9, 9, 30, 11, 7, 8, 4, 115, 8, 7, 8, 4, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [3, 7, 5, 4, 4, 11, 8, 164, 6, 5, 4, 14, 8, 4, 7, 5, 16, 5, 5, 10, 8, 8, 8, 7, 7]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 5, 7, 7, 10, 7, 5, 6, 16, 11, 8, 5, 6, 6, 6, 6, 16, 6, 9, 24, 12]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [7, 37, 6, 6, 4, 5, 7, 7, 6, 9, 13, 4, 4, 4, 6, 5, 4, 97, 4, 7, 4, 3, 6, 6, 11, 5, 5, 6, 14, 4, 6, 10, 5, 6, 4, 4, 3, 3, 7, 3, 12, 9, 6, 4, 6, 12, 28, 11, 7, 9, 4, 7, 3, 14, 4, 5, 5, 4, 3, 4, 3, 6, 4, 3, 3, 4, 5, 3, 76, 4, 5, 3, 15, 3, 3, 9]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [21, 5, 6, 5, 4, 7, 8, 4, 5, 5, 7, 4, 6, 5, 5, 5, 3, 4, 7, 3, 15, 4, 7, 4, 6, 3, 12, 5, 5, 7, 5, 7, 5, 6, 4, 5, 8, 5, 14, 8, 6, 6, 5, 11, 4, 6, 20, 3, 4, 3, 4, 8, 24, 5, 3, 4, 8, 18, 3, 8]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [2, 6, 14, 6, 3, 208, 280, 7, 8, 6, 31, 21, 15, 16, 9, 8, 3, 6, 3, 10]
length(C_list) = 20
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 3, 5, 5, 6, 4, 3, 3, 4, 6, 4, 14, 8, 4, 6, 6, 5, 3, 6, 6, 7, 9, 7, 13, 3, 7, 5, 4, 7, 4, 3, 6, 72, 6, 5, 6, 5, 4, 7, 5, 6, 17, 4, 4, 36, 88, 5, 4, 4, 6, 5, 5, 4, 4, 4, 5, 5, 24, 7, 5, 5, 13]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 7, 6, 5, 6, 10, 5, 8, 6, 6, 7, 12, 4, 4, 7, 6, 6, 4, 6, 6, 8, 6, 7, 11, 6, 6, 7, 11, 7, 5, 4, 6, 3, 6, 7, 7, 31, 54, 73, 167, 12, 6, 6, 6, 8, 7, 37, 6, 6, 7, 6, 6, 6, 6, 6]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [8, 6, 8, 3, 4, 4, 6, 4, 8, 13, 3, 3, 3, 6, 5, 9, 3, 6, 15, 135, 6, 10, 4, 9, 4, 5, 10, 4, 6, 14, 9, 4, 4, 5, 29, 6]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [4, 3, 9, 3, 6, 8, 10, 6, 6, 3, 10, 5, 7, 7, 8, 10, 6, 13, 17, 11, 122, 5, 13]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 4, 10, 4, 7, 4, 5, 4, 4, 5, 7, 5, 5, 6, 23, 3, 4, 9, 4, 21, 5, 7, 44, 7, 6, 5, 5, 8, 7, 4, 6, 9, 8, 7, 7, 7, 7, 42, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 6, 7, 9, 9, 11, 24, 8, 56, 54, 14, 101, 7, 207, 293, 9, 7, 13, 95, 7]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 4, 5, 6, 6, 180, 14, 5, 4, 9, 7, 4, 4, 6, 51, 5, 9, 6, 5, 242, 6, 7, 14, 6, 6, 6, 5, 4, 6, 6, 16, 53, 11]
length(C_list) = 35
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 39
termination = MathOptInterface.OPTIMAL
objective_value = 0.5861160218325494
thermo_feasible = true
