WARNING: Dual bound 1.4 is smaller than the objective of the primal solution 1.4348. The solution might not be optimal.
WARNING: Dual bound 1.4 is smaller than the objective of the primal solution 1.42301. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: master problem cannot be solved
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:486
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN746
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN746
----------------------------------
number of metabolites : 907
number of reactions : 1054
number of genes : 746

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 5
(indicator, big_m) = (false, true)
BIG M ADDED
model with 1054 flux variables and 2001 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 137, 3]
length(C_list) = 4
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 2, 3, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [25, 10, 6, 7]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [2, 3, 5, 7]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [8, 12, 13, 9, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [2, 5, 10, 51]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 10, 7, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [33, 9, 10, 6, 7, 10]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 10, 11, 17, 10]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [15, 7, 8, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [29, 5, 6, 8]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [19, 6]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [5, 4, 13]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [11, 18, 8, 13, 12]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [2, 33, 7, 32, 6, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [2, 5, 9, 10, 5]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [6, 10, 9, 6, 12, 7]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [25, 45, 43, 46, 43, 47]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [9, 3, 6, 16, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [18, 18]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [11, 3, 3, 10]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [7, 12, 9]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [13, 6, 14, 5, 6, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [28]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [28, 6, 98, 10, 8]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [2, 41, 24, 3, 6]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [15, 15]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [2, 6, 7]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [3, 5]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [4, 12, 12]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [30, 28, 26, 24, 22, 25]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [7, 9, 10, 8]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [26, 11, 11, 22]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [3, 16, 12]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [10, 8, 6, 5]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [14, 9, 19]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [10, 6, 7, 8, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [9, 11, 8, 10]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [3, 15, 15, 15, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [12, 20, 5, 9]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [42, 11, 12, 9]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [8, 19, 8, 12]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [18, 15, 16]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [25, 7, 9, 9, 11, 8]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [4]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
termination_master = MathOptInterface.TIME_LIMIT
BoundsError((missing, Any[1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000001801955, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4347950771481515, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4230076850834525, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001], Any[1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000001801955, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4347950771481515, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4230076850834525, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001], missing, missing, missing, missing, missing, 1800.0192291736603, MathOptInterface.INFEASIBLE, 45, Any[(Any[84, 311, 404], Any[86, 312], 5), (Any[293, 299, 618], Any[290], 4), (Any[435, 457], Any[158, 430], 4), (Any[435, 457], Any[430], 3), (Any[278, 758], Any[], 2), (Any[99], Any[100], 2), (Any[430], Any[435, 457], 3), (Any[187, 891], Any[897], 3), (Any[171, 782, 792, 810, 821, 823], Any[99, 189, 749, 804], 10), (Any[171, 387, 401, 782], Any[99, 189], 6), (Any[171, 344, 368, 782], Any[99, 189, 367], 7), (Any[280, 759], Any[], 2), (Any[290], Any[293, 299], 3), (Any[821, 823], Any[33, 749, 804], 5), (Any[140, 171, 782, 784], Any[100, 189, 777], 7), (Any[171, 180, 192, 863, 891], Any[99, 864, 894], 8), (Any[142, 144, 171, 782, 795, 821, 823], Any[99, 189, 401, 749, 804], 12), (Any[171, 425, 426, 618, 782, 795, 801, 821, 823], Any[99, 189, 749, 804], 13), (Any[171, 183, 430, 782], Any[100, 182, 189, 401, 435], 9), (Any[171, 240, 269, 782], Any[100, 189, 401], 7), (Any[281, 761], Any[], 2), (Any[86, 312], Any[84, 311, 404], 5), (Any[33, 142, 144, 171, 182, 795], Any[6, 100, 183, 457], 10), (Any[72], Any[73, 74, 714], 4), (Any[37, 107, 171, 782, 795, 821, 823], Any[99, 189, 804], 10), (Any[171, 457, 607, 686, 782], Any[99, 189], 7), (Any[171, 183, 457, 782], Any[99, 182, 189, 401], 8), (Any[406, 428, 597, 777, 829], Any[37, 107, 140, 784], 9), (Any[33, 406, 428, 597, 749, 777, 795, 829], Any[140, 784], 10), (Any[607, 777, 797], Any[140, 784, 792], 6), (Any[298, 694, 777], Any[140, 697, 784, 823], 7), (Any[33, 441, 471, 663, 749, 777, 795, 829], Any[140, 784], 10), (Any[285, 767], Any[], 2), (Any[506, 694, 770], Any[298, 406, 428, 597, 697, 749, 829], 10), (Any[506, 770, 795], Any[298, 441, 471, 663, 749, 792, 810, 829], 11), (Any[133, 134, 215, 408, 506, 589, 656, 763, 770, 795, 915], Any[298, 511, 607, 797, 810, 913], 17), (Any[506, 694, 770], Any[298, 441, 471, 663, 697, 749, 829], 10), (Any[180, 192, 298, 513, 863, 929, 930], Any[33, 187, 506, 512, 536, 770, 795, 864], 15), (Any[298, 694], Any[33, 506, 697, 770, 795], 7), (Any[140, 298, 784], Any[33, 506, 770, 777, 795], 8), (Any[298, 694, 825], Any[33, 506, 697, 770, 795], 8), (Any[694, 777], Any[140, 697, 784], 5), (Any[694, 777], Any[140, 592, 697, 784], 6), (Any[33, 506, 770, 777, 795], Any[140, 298, 784], 8), (Any[16, 39, 49, 345, 441, 471, 525, 589, 618], Any[33, 158, 400, 406, 428, 597, 607, 797, 810, 925], 19), (Any[694], Any[33, 607, 697, 797, 810], 6), (Any[435, 797], Any[430, 686, 792], 5), (Any[400, 405], Any[401, 706], 4), (Any[93, 400, 405, 476, 810, 893], Any[401, 457, 651, 888, 892, 898, 913], 13), (Any[127, 133, 134, 298, 345, 525], Any[158, 400, 506, 770, 925], 11), (Any[6, 171, 260, 298, 405, 668, 782, 795, 799, 821, 823, 879, 891], Any[189, 240, 506, 770, 939], 18), (Any[6, 298, 694, 782], Any[189, 506, 697, 770], 8), (Any[152, 200, 345, 405, 448, 495, 525, 704, 940], Any[158, 401, 913, 925], 13), (Any[127, 133, 134, 298, 345, 405, 525], Any[158, 401, 506, 770, 925], 12), (Any[283, 766], Any[], 2), (Any[140, 171, 196, 782], Any[100, 189, 200], 7), (Any[152, 345, 525], Any[158, 400, 925], 6), (Any[140, 171, 196, 782], Any[99, 189, 200, 575], 8), (Any[275, 753], Any[], 2), (Any[183], Any[182, 401, 607, 686], 5), (Any[668, 749, 795, 799, 804, 879], Any[607, 797, 810], 9), (Any[33, 668, 749, 795, 799, 804, 879], Any[457, 607, 686], 10), (Any[33, 749, 804], Any[821, 823], 5), (Any[171, 694, 782], Any[99, 189, 697], 6), (Any[171, 668, 782, 799, 821, 823, 879], Any[6, 33, 99], 10), (Any[171, 668, 799, 821, 823, 879], Any[6, 33, 99], 9), (Any[171, 694, 782], Any[100, 189, 697], 6), (Any[125, 171, 598, 668, 799, 821, 823, 879], Any[6, 33, 99, 891], 12), (Any[171, 550, 694, 782], Any[100, 189, 697], 7), (Any[86, 138, 159, 171, 178, 181, 182, 279, 372, 429, 608, 619, 777, 881, 910, 915], Any[64, 73, 74, 99, 127, 140, 303, 714, 784], 25), (Any[16, 39, 49, 93, 345, 357, 360, 362, 388, 389, 399, 405, 418, 441, 453, 471, 525, 589, 616, 618, 698, 777, 795, 821, 823, 829, 855, 915, 921, 934, 935], Any[73, 74, 140, 158, 401, 419, 445, 507, 610, 690, 714, 784, 804, 857], 45), (Any[16, 39, 49, 93, 345, 357, 360, 362, 388, 389, 399, 405, 418, 441, 453, 471, 525, 589, 616, 618, 698, 777, 795, 821, 823, 829, 855, 915, 921, 934, 935], Any[72, 140, 158, 401, 419, 445, 507, 610, 690, 784, 804, 857], 43), (Any[16, 39, 49, 93, 345, 357, 359, 360, 362, 387, 388, 389, 399, 405, 418, 441, 453, 471, 525, 589, 616, 618, 698, 777, 795, 821, 823, 829, 855, 915, 921, 934, 935], Any[73, 74, 140, 158, 419, 445, 507, 610, 690, 714, 784, 804, 857], 46), (Any[16, 39, 49, 93, 345, 357, 361, 389, 399, 418, 441, 453, 471, 528, 589, 616, 618, 698, 777, 795, 797, 810, 821, 823, 829, 855, 915, 921, 934, 935, 944], Any[72, 140, 158, 400, 419, 445, 610, 690, 749, 784, 804, 857], 43), (Any[16, 33, 39, 49, 93, 345, 357, 360, 362, 387, 389, 399, 405, 418, 441, 453, 471, 528, 589, 616, 618, 698, 777, 795, 797, 810, 821, 823, 829, 855, 915, 921, 934, 935, 944], Any[73, 74, 140, 158, 419, 445, 610, 690, 714, 784, 804, 857], 47), (Any[171, 358, 359, 394, 666, 782], Any[99, 189, 925], 9), (Any[361], Any[360, 362], 3), (Any[441, 471, 663], Any[406, 428, 597], 6), (Any[33, 146, 171, 361, 413, 441, 570], Any[37, 100, 107, 131, 246, 360, 362, 925, 928], 16), (Any[361, 473], Any[360, 362], 4), (Any[341, 367, 374, 418, 431, 432, 453, 568, 569, 652, 792, 915, 944], Any[72, 368, 445, 703, 864], 18), (Any[171, 298, 399, 649, 668, 782, 792, 799, 810, 821, 823, 879], Any[99, 189, 445, 506, 663, 770], 18), (Any[142, 144, 171, 387, 749, 804], Any[6, 99, 795, 821, 823], 11), (Any[360, 362], Any[361], 3), (Any[897], Any[187, 891], 3), (Any[142, 144, 387, 804], Any[37, 107, 792, 810, 821, 823], 10), (Any[6, 33, 171, 782, 795], Any[99, 189], 7), (Any[127, 133, 134, 777, 795, 821, 823], Any[140, 152, 749, 784, 804], 12), (Any[33, 127, 133, 134, 777, 795], Any[140, 152, 784], 9), (Any[174, 182, 240, 269, 523, 545, 650, 782], Any[181, 183, 189, 277, 279], 13), (Any[240, 269, 792], Any[401, 607, 797], 6), (Any[16, 39, 49, 441, 471, 589, 618, 792], Any[152, 406, 428, 597, 607, 797], 14), (Any[694, 792], Any[607, 697, 797], 5), (Any[140, 784, 792], Any[607, 777, 797], 6), (Any[457, 686, 792], Any[797], 4), (Any[125, 133, 134, 178, 182, 345, 528, 619, 650, 787, 874, 876, 904, 915], Any[64, 158, 303, 358, 359, 394, 400, 406, 428, 597, 607, 666, 749, 829], 28), (Any[406, 428, 597], Any[441, 471, 663], 6), (Any[33, 406, 428, 597, 749, 795, 829], Any[457, 607, 686], 10), (Any[406, 428, 575, 597, 936], Any[441, 471, 663], 8), (Any[276, 757], Any[], 2), (Any[400, 405], Any[401], 3), (Any[387, 400, 405, 777], Any[140, 784], 6), (Any[16, 39, 49, 171, 441, 471, 589, 618, 782], Any[99, 152, 189, 406, 428, 597], 15), (Any[16, 39, 49, 171, 441, 471, 589, 618, 782], Any[100, 152, 189, 406, 428, 597], 15), (Any[378, 432], Any[], 2), (Any[33, 777, 792, 810], Any[140, 784], 6), (Any[33, 94, 777, 792, 810], Any[140, 784], 7), (Any[388], Any[507, 944], 3), (Any[33, 792, 810], Any[607, 797], 5), (Any[73, 74, 714], Any[72], 4), (Any[54, 74, 142, 144, 171, 366, 387], Any[6, 33, 99, 792, 810], 12), (Any[54, 74, 142, 144, 171, 366, 387], Any[6, 33, 100, 792, 810], 12), (Any[16, 39, 49, 125, 133, 134, 178, 182, 345, 525, 589, 619, 650, 787, 874, 876, 904, 915], Any[64, 158, 303, 358, 359, 394, 400, 425, 426, 663, 666, 801], 30), (Any[125, 133, 134, 178, 182, 345, 525, 619, 650, 787, 795, 874, 876, 904, 915], Any[64, 158, 303, 358, 359, 394, 400, 457, 607, 666, 686, 797, 810], 28), (Any[16, 39, 49, 187, 298, 345, 441, 471, 494, 525, 589, 618, 749, 829], Any[33, 158, 358, 359, 394, 400, 506, 607, 666, 770, 797, 810], 26), (Any[16, 39, 49, 345, 441, 471, 525, 589, 618, 749, 777, 795, 829], Any[140, 158, 358, 359, 394, 400, 607, 666, 784, 797, 810], 24), (Any[16, 39, 49, 345, 441, 471, 525, 589, 618, 749, 792, 795, 829], Any[158, 358, 359, 394, 400, 607, 666, 797, 810], 22), (Any[16, 39, 49, 345, 361, 441, 471, 487, 525, 589, 618, 829, 855, 940], Any[6, 158, 358, 359, 362, 394, 400, 406, 428, 597, 666], 25), (Any[33, 171, 782, 792, 810], Any[99, 189], 7), (Any[33, 37, 107, 171, 749, 782, 795], Any[99, 189], 9), (Any[33, 127, 133, 134, 171, 782, 795], Any[99, 152, 189], 10), (Any[127, 133, 134, 171], Any[6, 100, 152, 366], 8), (Any[171, 298, 425, 426, 618, 782, 801], Any[99, 189, 506, 770], 11), (Any[298, 425, 426, 525, 618, 801], Any[457, 506, 528, 686, 770], 11), (Any[277, 493], Any[494], 3), (Any[16, 39, 49, 127, 133, 134, 441, 471, 589], Any[152, 406, 425, 426, 428, 597, 801], 16), (Any[16, 39, 49, 127, 133, 134, 589], Any[152, 425, 426, 663, 801], 12), (Any[152, 345, 367, 387, 405, 525], Any[158, 344, 368, 925], 10), (Any[142, 144, 387], Any[406, 428, 597, 749, 829], 8), (Any[240, 269, 367, 387], Any[344, 368], 6), (Any[367, 387, 401], Any[344, 368], 5), (Any[33, 127, 133, 134, 345, 525, 795, 925], Any[158, 358, 359, 394, 400, 666], 14), (Any[33, 127, 133, 134, 795], Any[152, 457, 607, 686], 9), (Any[33, 127, 133, 134, 345, 525, 632, 702, 795], Any[158, 358, 359, 394, 400, 428, 457, 607, 666, 686], 19), (Any[127, 133, 134, 189, 367], Any[6, 152, 344, 368, 782], 10), (Any[367, 457, 607, 686], Any[344, 368], 6), (Any[367, 457, 607, 686], Any[252, 344, 368], 7), (Any[183, 367, 457], Any[182, 344, 368, 400, 405], 8), (Any[183, 367, 387, 457], Any[182, 344, 368], 7), (Any[33, 171, 528, 782, 797, 810], Any[99, 189, 525], 9), (Any[33, 142, 144, 650, 782, 795], Any[165, 181, 189, 279, 401], 11), (Any[142, 144, 650], Any[6, 165, 181, 279, 401], 8), (Any[33, 142, 144, 650, 782, 795], Any[181, 189, 279, 401], 10), (Any[525, 607], Any[528], 3), (Any[127, 133, 134, 189, 345, 525, 602], Any[6, 158, 358, 359, 394, 400, 666, 782], 15), (Any[127, 133, 134, 189, 324, 345, 525], Any[6, 158, 358, 359, 394, 400, 666, 782], 15), (Any[9, 127, 133, 134, 189, 345, 525], Any[6, 158, 358, 359, 394, 400, 666, 782], 15), (Any[127, 133, 134, 189, 345, 525], Any[6, 158, 358, 359, 394, 400, 666, 782], 14), (Any[453, 525, 550, 712, 713, 792, 915], Any[73, 74, 445, 797, 925], 12), (Any[37, 107, 171, 205, 344, 525, 652, 712, 713, 821, 823], Any[6, 33, 99, 170, 213, 488, 804, 864, 927], 20), (Any[171, 181, 279], Any[100, 650], 5), (Any[37, 107, 171, 821, 823], Any[6, 33, 99, 804], 9), (Any[118, 668, 697, 777, 795, 799, 821, 823, 879], Any[140, 784], 11), (Any[650, 668, 697, 782, 795, 799, 821, 823, 879], Any[181, 189, 279], 12), (Any[668, 777, 795, 799, 821, 823, 879], Any[140, 784], 9), (Any[37, 107, 694], Any[406, 428, 597, 697, 829], 8), (Any[33, 37, 107, 127, 133, 134, 345, 525, 795], Any[158, 358, 359, 394, 400, 441, 471, 663, 666, 829], 19), (Any[37, 107, 694], Any[441, 471, 663, 697, 829], 8), (Any[37, 39, 107, 120, 525, 784], Any[118, 406, 428, 597, 777, 829], 12), (Any[16, 39, 49, 73, 74, 345, 445, 589, 618], Any[158, 400, 453, 550, 607, 663, 712, 713, 915], 18), (Any[16, 39, 49, 345, 528, 589, 618], Any[158, 358, 359, 394, 400, 607, 663, 666], 15), (Any[16, 39, 49, 345, 528, 589, 618], Any[158, 358, 359, 394, 400, 607, 663, 666, 915], 16), (Any[142, 144, 795], Any[401, 607, 797, 810], 7), (Any[33, 425, 426, 618, 795, 801], Any[457, 607, 686], 9), (Any[33, 425, 426, 618, 777, 795, 801], Any[140, 784], 9), (Any[33, 142, 144, 387, 702, 795, 806], Any[457, 512, 607, 686], 11), (Any[33, 142, 144, 387, 777, 795], Any[140, 784], 8), (Any[702], Any[712, 713, 714], 4)], Any[1.6702499389648438, 0.0830378532409668, 0.16676592826843262, 0.1245579719543457, 0.16335487365722656, 0.2695939540863037, 0.12718582153320312, 0.2870969772338867, 0.1246330738067627, 0.2867741584777832, 0.30037593841552734, 0.2922811508178711, 0.2866690158843994, 0.13959097862243652, 0.21517109870910645, 0.20038700103759766, 0.20270514488220215, 0.33087587356567383, 0.3855459690093994, 0.2348041534423828, 0.34363603591918945, 0.45115017890930176, 0.40598106384277344, 0.2727320194244385, 0.3508589267730713, 0.4370229244232178, 0.3823978900909424, 0.263930082321167, 0.5468709468841553, 0.4365260601043701, 0.23232293128967285, 0.3454878330230713, 0.46227502822875977, 0.34654712677001953, 0.3599269390106201, 0.392596960067749, 0.23183012008666992, 0.45825791358947754, 0.16362500190734863, 0.20879101753234863, 0.39693188667297363, 0.4430668354034424, 0.4223670959472656, 0.5474379062652588, 0.2825620174407959, 1800.018826007843], Any[0.023826122283935547, 0.005127906799316406, 0.005326032638549805, 0.004928112030029297, 0.004930019378662109, 0.004951000213623047, 0.005106210708618164, 0.024896860122680664, 0.005101919174194336, 0.0048258304595947266, 0.005027055740356445, 0.005202054977416992, 0.005136966705322266, 0.00524592399597168, 0.005290985107421875, 0.004846096038818359, 0.004895925521850586, 0.006002187728881836, 0.005170106887817383, 0.005644083023071289, 0.004856109619140625, 0.004920005798339844, 0.005460023880004883, 0.005301952362060547, 0.0048520565032958984, 0.004553794860839844, 0.005208015441894531, 0.004755973815917969, 0.0047190189361572266, 0.004790067672729492, 0.005594968795776367, 0.004976987838745117, 0.005003929138183594, 0.005115032196044922, 0.0050067901611328125, 0.0053560733795166016, 0.005092144012451172, 0.005081892013549805, 0.0051610469818115234, 0.005157947540283203, 0.005098104476928711, 0.0050809383392333984, 0.005342960357666016, 0.005388975143432617, 0.0051457881927490234], Any[2.9837090969085693, 0.11699891090393066, 0.0468900203704834, 0.06858706474304199, 0.0821080207824707, 0.06863117218017578, 0.09097599983215332, 0.0848538875579834, 0.08435392379760742, 0.0532679557800293, 0.0734109878540039, 0.04534101486206055, 0.0739591121673584, 0.0956428050994873, 0.051286935806274414, 0.06783485412597656, 0.06493282318115234, 0.04626107215881348, 0.08457493782043457, 0.03703188896179199, 0.05728411674499512, 0.06155085563659668, 0.049466848373413086, 0.04084300994873047, 0.07208800315856934, 0.07108402252197266, 0.06560897827148438, 0.07162690162658691, 0.07862615585327148, 0.04272317886352539, 0.10074901580810547, 0.06534290313720703, 0.06609892845153809, 0.06545686721801758, 0.057433128356933594, 0.07278895378112793, 0.06028294563293457, 0.08731794357299805, 0.07100486755371094, 0.05424094200134277, 0.06583404541015625, 0.05394601821899414, 0.06475591659545898, 0.075469970703125, 0.06025099754333496]), 16)
