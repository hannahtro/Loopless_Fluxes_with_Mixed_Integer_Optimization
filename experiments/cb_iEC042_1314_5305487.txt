┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iEC042_1314
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iEC042_1314
----------------------------------
number of metabolites : 1926
number of reactions : 2714
number of genes : 1314

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 109
max_cuts = 54
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2714 flux variables and 5037 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [6, 13, 13, 13, 13, 15, 13, 14, 13, 13, 14, 6, 2, 2, 3, 11, 11, 11, 11, 11, 7, 11, 11, 5, 4, 6, 2, 2, 2, 16, 16, 17, 16, 17, 16, 16, 2, 23, 13, 14, 13, 3, 3, 16, 14, 173, 6, 18, 3, 7, 33, 6, 4]
length(C_list) = 53
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [5, 2, 2, 3, 2, 2, 68, 6, 2, 4, 3, 6, 3, 6, 5, 4, 3, 6, 4, 6, 4, 4, 3, 4]
length(C_list) = 24
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 2, 3, 10, 3, 5, 3, 3, 2, 6, 3, 2, 78]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 4, 2, 4, 2, 4, 3, 4, 15, 5, 2, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 3, 2, 4, 5, 3, 4, 5, 6, 2, 116]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 5, 2, 2, 2, 15, 4, 4, 5, 4]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 8, 3, 14, 6, 4, 8, 12, 5, 21, 3, 5, 152]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 6, 3, 5, 5, 5, 29, 2, 5, 51]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 2, 3, 7, 229, 6, 4, 4, 4, 2, 3, 10, 21, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 4, 2, 4, 4, 96, 92, 9, 5, 5, 8]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 7, 8, 4, 6, 4, 4, 88, 4, 7, 14, 6, 4, 13, 17, 5]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 4, 4, 7, 4, 4, 4, 4, 4, 4, 6, 13, 5, 114]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 7, 4, 8, 4, 5, 9, 84, 9, 10, 16, 7, 10]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 13
termination = MathOptInterface.OPTIMAL
objective_value = 0.9824784909320873
thermo_feasible = true
