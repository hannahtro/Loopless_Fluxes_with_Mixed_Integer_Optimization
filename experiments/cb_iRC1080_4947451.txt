┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 44
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6]
length(C_list) = 30
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [3, 9, 2, 3, 4, 6, 3, 4, 5, 3, 6, 6, 5, 199, 5, 5, 2, 58, 4, 4, 4, 3, 3, 6, 18, 5, 5, 3, 4, 3, 5, 5, 9]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [8, 8, 3, 8, 9, 4, 3, 3, 7, 4, 8, 7, 8, 4, 7, 8, 7, 4, 8, 7, 7, 8, 9, 8, 49, 4]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 5, 6, 8, 3, 6, 3, 4, 5, 7, 5, 12, 4, 6, 6, 7, 5, 3, 3, 5, 5, 5, 5, 4]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 4, 9, 4, 4, 3, 3, 3, 6, 4, 3, 4, 6, 7, 4, 4, 7, 6, 3, 5, 4, 4, 6, 19, 8, 7, 3, 5, 8, 17, 4]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [14, 3, 4, 3, 5, 3, 7, 3, 3, 3, 4, 8, 4, 4, 6, 4, 8, 3, 4, 5, 4, 3, 5, 6, 4, 8, 3, 384, 13]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [9, 9, 5, 4, 7, 4, 9, 3, 3, 9, 7, 135, 9, 3, 5, 10, 8, 8, 4, 9, 11, 7, 5, 8, 3, 10, 9, 10, 66, 7, 8, 12, 9, 10, 8, 5, 11]
length(C_list) = 35
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [4, 9, 7, 3, 4, 3, 9, 5, 8, 5, 6, 4, 3, 6, 6, 8, 21, 8, 3, 10, 6, 17, 4, 7, 3, 4, 6, 3, 12]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [3, 7, 3, 3, 7, 3, 3, 8, 7, 3, 8, 7, 4, 4, 6, 8, 4, 9, 4]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [8, 5, 3, 3, 3, 3, 8, 12, 5, 4, 6, 4, 3, 3, 3, 3, 8, 4, 4, 8, 3, 5, 13, 58, 3, 10, 5, 4, 4, 9, 3, 13]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [7, 8, 3, 4, 3, 4, 5, 3, 3, 4, 4, 4, 4, 4, 7, 8, 4, 47, 5, 4, 7, 6, 4, 6, 5, 5, 4, 7, 7, 31, 4, 7, 3, 6]
length(C_list) = 32
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [8, 3, 4, 7, 16, 3, 8, 14, 47, 3, 13, 3, 8, 9, 8, 4, 45, 18, 6, 5, 13, 8, 3, 12, 8, 3, 3, 20]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 6]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [13, 8, 12, 6, 7, 7, 8, 8, 7, 6, 8, 7, 14, 7, 10, 7, 8, 8]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [3, 4, 8, 4, 3, 6, 8, 11, 4, 3, 6, 4, 4, 9, 13, 4, 11, 12, 9, 6, 7, 7, 14, 8, 7, 5, 4, 14]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 3, 37, 28, 4, 23, 25, 28, 4, 6, 88, 5, 23, 18, 25, 27, 27, 27, 93, 4, 4, 29, 7, 5, 13, 22, 4, 5]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 4, 3, 3, 4, 4, 5, 6, 9, 8, 3, 3, 4, 8, 20, 6, 4, 4, 6, 20, 5, 41, 4, 8, 47, 4, 11, 4, 4, 9, 6, 3, 8]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [5, 7, 8, 200, 5, 11, 8, 10, 262, 10, 8, 7, 16, 10, 11, 251]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [8, 7, 7, 3, 3, 3, 3, 5, 4, 5, 4, 4, 32, 7, 4, 6, 3, 29, 8, 5]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 4, 16, 7, 7, 3, 7, 9, 8, 11, 19, 16, 8, 8, 9, 13, 9, 4, 7, 8, 10]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [7, 3, 17, 7, 15, 5, 11, 10, 4, 10, 5, 8, 19, 6, 13, 8, 14, 8, 14, 8, 14, 11, 114, 8, 85, 9, 4, 5, 19]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [7, 4, 8, 3, 5, 5, 5, 50, 11, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [8, 8, 9, 10, 9, 227, 23, 90, 11, 307, 10, 20]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [8, 4, 5, 5, 8, 4, 3, 10, 3, 4, 5, 205, 9, 6, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [12, 2, 8, 3, 20, 5, 8, 7, 4, 8, 7, 5, 8, 15, 23, 6, 13, 15, 10]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [8, 12, 9, 3, 3, 9, 9, 3, 7, 4, 14, 4, 11, 4, 5, 12, 6, 4, 8, 6, 7, 8, 106, 24, 4, 9, 8, 8, 12]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [8, 9, 3, 4, 3, 3, 22, 13, 10, 3, 12, 11, 8, 8, 8, 8, 15, 9, 9, 7, 11, 3, 114, 7]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [9, 4, 6, 3, 6, 4, 4, 3, 9, 5, 9, 3, 4, 6, 4, 4, 3, 7, 3, 4, 9, 6, 3, 5, 8, 6, 3, 8, 3]
length(C_list) = 29
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 5, 8, 8, 4, 3, 9, 5, 6, 8, 8, 10, 63, 4, 10, 7, 15, 5, 34, 3, 4, 8, 7, 8, 9, 3, 8]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 3, 9, 10, 9, 4, 9, 4, 3, 8, 3, 4, 6, 4, 4, 10, 23, 4, 10, 11, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [10, 13, 4, 14, 4, 13, 5, 3, 227, 3, 7, 6, 5, 13]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 11, 4, 4, 4, 3, 3, 3, 6, 4, 5]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 32
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
