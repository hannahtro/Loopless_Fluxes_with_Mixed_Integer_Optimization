┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iETEC_1333
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iETEC_1333
----------------------------------
number of metabolites : 1962
number of reactions : 2756
number of genes : 1333

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 55
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2756 flux variables and 5121 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [8, 2, 11, 11, 11, 90, 11, 11, 11, 16, 16, 17, 16, 20, 16, 16, 13, 13, 14, 13, 14, 13, 13, 13, 13, 14, 13, 14, 13, 16]
length(C_list) = 1
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 15, 2, 12, 84, 11, 11, 11, 14, 11, 16, 16, 17, 16, 17, 16, 16, 16, 13, 17, 13, 14, 15, 13, 13, 14, 14, 19, 15, 13, 13, 268, 13, 14, 13, 13]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 11, 11, 11, 11, 11, 12, 11, 2, 16, 16, 17, 16, 17, 16, 16, 13, 13, 14, 13, 14, 13, 13, 14, 13, 13, 14, 13, 14, 13, 13]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [2, 2, 11, 11, 11, 11, 12, 14, 11, 2, 18, 16, 17, 21, 17, 16, 16, 13, 17, 25, 13, 14, 13, 13, 13, 14, 15, 13, 13, 14, 13, 14, 13, 81]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 4, 3, 11, 14, 11, 22, 11, 11, 11, 3, 17, 17, 23, 17, 18, 17, 17, 14, 14, 15, 14, 15, 14, 14, 14, 14, 15, 14, 15, 14, 14]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [3, 12, 11, 11, 13, 11, 11, 11, 18, 17, 18, 17, 18, 17, 17, 14, 14, 15, 14, 15, 14, 14, 14, 14, 15, 14, 15, 14, 14]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [8, 2, 2, 11, 11, 11, 11, 12, 11, 11, 41, 17, 18, 17, 18, 17, 17, 14, 14, 15, 14, 15, 14, 14, 154, 14, 14, 15, 14, 15, 14, 14]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [5, 11, 62, 11, 13, 11, 11, 11, 2, 19, 19, 20, 21, 20, 20, 19, 16, 16, 17, 18, 17, 17, 16, 19, 16, 16, 16, 16, 17, 18, 17, 16, 16]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 11, 11, 11, 11, 11, 11, 11, 6, 21, 21, 20, 19, 20, 19, 19, 16, 16, 17, 16, 17, 16, 16, 16, 16, 17, 17, 17, 16, 16]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 23, 11, 57, 11, 11, 11, 11, 6, 16, 16, 17, 17, 17, 16, 17, 20, 13, 14, 13, 15, 13, 14, 15, 14, 18, 13, 13, 14, 13, 14, 14, 13]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 3, 11, 24, 11, 11, 11, 11, 11, 3, 16, 16, 17, 16, 17, 16, 16, 13, 13, 14, 13, 14, 13, 13, 13, 13, 14, 13, 14, 13, 16]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 2, 18, 11, 12, 18, 11, 12, 11, 4, 19, 16, 17, 16, 17, 16, 16, 13, 13, 14, 13, 14, 13, 14, 13, 13, 70, 14, 13, 14, 14, 13]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [2, 84, 11, 11, 11, 15, 11, 13, 3, 17, 17, 18, 17, 18, 17, 17, 14, 14, 15, 14, 15, 14, 14, 14, 14, 15, 14, 15, 14, 14]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [7, 6, 3, 11, 11, 12, 11, 68, 52, 11, 6, 21, 16, 74, 16, 17, 16, 16, 13, 14, 14, 13, 15, 13, 13, 24, 13, 14, 13, 13, 14, 22, 14, 13, 13]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [6, 4, 12, 11, 11, 11, 68, 15, 11, 13, 16, 16, 17, 19, 17, 16, 17, 13, 14, 16, 23, 14, 13, 13, 14, 14, 13, 14, 20, 14, 13, 14, 13, 13, 13]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [2, 8, 12, 11, 11, 13, 11, 11, 12, 3, 24, 17, 23, 17, 18, 17, 17, 14, 14, 15, 14, 15, 14, 14, 14, 26, 15, 14, 15, 14, 14]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [5, 4, 11, 13, 12, 11, 11, 11, 12, 17, 18, 18, 17, 18, 17, 17, 14, 19, 15, 22, 17, 14, 14, 14, 14, 15, 15, 15, 14, 14, 15, 14, 15, 135, 14]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [8, 4, 2, 5, 8, 5, 2, 6, 4, 4, 4, 6, 7, 4, 13, 5, 4, 4, 4, 5, 8, 5, 3, 5, 17, 4, 4, 4, 5, 5, 5, 13]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [10, 8, 11, 46, 11, 11, 11, 20, 11, 17, 17, 18, 17, 21, 17, 17, 14, 14, 15, 14, 15, 14, 14, 17, 14, 14, 15, 14, 15, 14, 14]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [5, 5, 4, 3, 4, 3, 2, 3, 3, 4, 4, 5, 3, 6, 17]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [6, 3, 5, 2, 3, 2, 2, 5, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 3, 3, 4, 9, 5, 5, 10, 5, 11, 4, 2]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [6, 2, 12, 11, 11, 11, 11, 11, 63, 11, 17, 18, 17, 16, 17, 16, 16, 13, 13, 14, 13, 14, 13, 13, 13, 13, 14, 13, 14, 13, 13]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [2, 2, 3, 2, 6, 7, 3, 4, 5, 165]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [6, 4, 8, 10, 8, 8, 22, 8, 9, 8, 8, 3, 4, 127, 10, 8, 7, 10, 4, 6]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 4, 4, 5, 205, 2, 2, 7, 14, 119]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [6, 2, 6, 7, 2, 4, 188, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [6, 7, 3, 11, 8, 8, 130, 9, 8, 12]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [6, 8, 7, 21, 11, 8, 3, 8, 7, 8, 8]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [4, 8, 6, 8, 8, 10, 8, 8, 9, 8, 9, 9, 8, 8, 8]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 5, 3, 20, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 31
termination = MathOptInterface.OPTIMAL
objective_value = 0.9824785256415057
thermo_feasible = true
