WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.98247 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982462 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982471 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982477 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982465 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982465 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iEcolC_1368
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iEcolC_1368
----------------------------------
number of metabolites : 1969
number of reactions : 2768
number of genes : 1368

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 14
max_cuts = 11
(indicator, big_m) = (false, true)
BIG M ADDED
model with 2768 flux variables and 5145 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 4, 2, 2, 2, 3, 15, 2]
length(C_list) = 10
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 2, 2, 3, 2, 3, 2, 2]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 4, 2, 4, 4, 4, 4, 5, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [3, 2, 3, 3, 3, 4, 2, 4, 65]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 5, 4, 4, 4, 4, 3, 5, 6, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 2, 4, 2, 4, 3, 5, 4, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 4, 7, 2, 4, 5, 6, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [2, 5, 8, 10, 13, 10, 10, 10, 10, 10, 15, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 19, 12, 18, 8, 12, 18, 11, 10, 20, 12]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [5, 3, 20, 14, 13, 17, 14, 18, 23, 22, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [3, 6, 4, 8, 8, 21, 15, 8, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 15, 16, 13, 8, 10, 12, 8, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [10, 5, 5, 37, 8, 8, 19, 8, 12, 11]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [4, 6, 8, 20, 22, 13, 29, 5, 8, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [6, 3, 9, 18, 5, 26, 46, 35, 17]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [9, 3, 18, 9, 4, 60, 15, 16, 14, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [5, 3, 5, 5, 49, 5, 10, 59, 9, 9]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 6, 13, 8, 4, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [30, 3, 21, 15, 4, 6, 8, 7, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [8, 6, 9, 12, 8, 10, 8, 3, 4, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [4, 34, 10, 9, 4, 17, 23, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [3, 3, 6, 5, 67, 4, 23, 10, 22]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [12, 4, 3, 6, 15, 4, 18, 10, 9, 16, 2, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [10, 6, 4, 6, 35, 6, 22, 4, 24]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [9, 5, 5, 6, 16, 26, 26, 4, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [11, 9, 6, 21, 6, 5, 167, 5, 21]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [11, 5, 5, 61, 4, 4, 10, 10]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [6, 5, 14, 5, 4, 11, 60, 3, 101, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [4, 4, 11, 9, 67, 4, 4, 6, 8, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [11, 3, 5, 10, 4, 7, 24, 12, 24, 4, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [36, 4, 5, 23, 12, 12, 21, 8, 4, 12]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [10, 3, 52, 8, 15, 9, 4, 8, 18, 9]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [21, 5, 4, 3, 8, 4, 3, 12, 4, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [7, 3, 5, 5, 31, 7, 31, 4, 5, 7, 3, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 10, 4, 9, 3, 5, 16, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 7, 15, 3, 6, 3, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [16, 6, 4, 12, 8, 4, 6, 5, 3, 3, 4, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [38, 5, 8, 8, 8, 30, 4, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [14, 3, 3, 13, 8, 6, 4, 184, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 5, 5, 6, 6, 6, 4, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [2, 5, 3, 14, 11, 34, 7, 12, 5, 4, 4, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [25, 5, 5, 11, 11, 10, 10, 3, 5, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [9, 4, 7, 23, 5, 10, 3, 4, 22, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [3, 4, 6, 7, 8, 10, 6, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [8, 3, 6, 4, 6, 4, 3, 9, 7, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [21, 3, 4, 4, 8, 8, 4, 5, 4, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [2, 3, 6, 10, 10, 8, 5, 5, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [8, 5, 3, 4, 7, 5, 6, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [25, 4, 149, 4, 7, 35, 18, 5, 8]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [8, 6, 8, 3, 18, 5, 5, 8, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [18, 4, 4, 10, 10, 24, 9, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 7, 8, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [4, 3, 6, 4, 6, 2, 4, 8, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [7, 2, 6, 6, 4, 3, 5, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [10, 5, 10, 5, 5, 5, 11, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [20, 4, 7, 19, 4, 6, 6, 9]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [5, 2, 7, 5, 5, 9, 10, 5, 4, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [6, 7, 4, 4, 12, 4, 4, 3, 4, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 8, 5, 15, 17, 15]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [14, 10, 6, 4, 6, 6, 11, 11]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [22, 3, 6, 6, 7, 10, 10, 7, 4, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [12, 4, 6, 27, 3, 5]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [16, 4, 6, 4, 4, 8, 7, 3]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [12, 6, 6, 8, 7, 4, 4, 3, 4, 5, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [7, 3, 10, 12, 5, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [8, 3, 7, 16, 4, 6, 4, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [6, 3, 5, 6, 3, 31, 5, 6, 5, 7, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [16, 5, 3, 10, 10, 3, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [39, 8, 10, 6, 5, 8, 3]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [14, 3, 13, 4, 7, 16, 6, 12, 5, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [28, 10, 6, 7, 5, 4, 16, 10, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [11, 5, 4, 4, 4, 12, 8, 3, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [21, 5, 6, 7, 6, 8, 7, 4, 201, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [5, 6, 4, 15, 10, 10, 8, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [12, 4, 7, 11, 23, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [4, 8, 3, 6, 4, 6, 5, 6, 7, 5, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [19, 18, 10, 4, 15, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [2, 11, 6, 4, 6, 8, 74]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [16, 5, 18, 12, 19, 12, 5, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [19, 6, 8, 6, 7, 11, 7, 6, 6, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [19, 6, 11, 4, 4, 7, 10, 11, 103, 117]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [11, 12, 6, 8, 6, 4, 6, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [31, 5, 4, 5, 4, 3, 6, 19, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 4, 4, 5, 4, 6, 5, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [9, 5, 3, 5, 10, 4, 6, 29, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [16, 12, 13, 10, 10, 4, 5, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [44, 4, 4, 8, 5, 4, 17, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [25, 15, 6, 6, 13, 10, 4, 4, 5, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [12, 4, 3, 5, 17]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [8, 5, 4, 9, 3, 7, 3, 7, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [6, 18, 3, 4, 11, 11, 4, 6, 11, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [7, 8, 4, 3, 5, 3, 4, 10]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [12, 6, 3, 7, 10, 5, 14, 5, 8, 18, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [2, 3, 8, 8, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [3, 9, 3, 5, 4, 8, 3, 9, 4, 10]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [33, 12, 7, 4, 6, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [5, 4, 6, 5, 4, 8, 5, 3, 4, 6, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 10, 11, 3, 5, 8]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [8, 9, 4, 8, 8, 4, 187, 199, 6, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [13, 4, 4, 3, 9, 3, 11, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [24, 4, 10, 8, 18, 4, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [3, 6, 8, 3, 4, 15, 3, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [16, 3, 3, 4, 5, 3, 4, 9, 12, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 7, 4, 10, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [19, 5, 5, 6, 101, 10, 6, 4, 12, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [17, 11, 6, 6, 3, 43, 10, 13, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [10, 6, 4, 13, 10, 14, 5]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 8, 4, 4, 19, 10]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [8, 7, 5, 4, 4, 8, 3, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [17, 4, 4, 11, 5, 4, 15, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [5, 5, 7, 21, 5, 6, 8, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [7, 8, 6, 4, 10, 22, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [31, 7, 6, 10, 6, 15, 4, 3, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [4, 8, 5, 4, 4, 5, 11, 5, 10, 13]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [11, 3, 14, 5, 4, 12, 6]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [16, 20, 5, 4, 4, 11, 6, 5, 7, 5, 4, 17]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 6, 6, 9, 8, 6, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [12, 4, 3, 5, 5, 8, 4, 8, 4, 5, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 3, 5, 5, 10, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [3, 9, 4, 18, 19, 18, 18, 18, 18, 18, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 3, 6, 4, 3, 7, 4, 7, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [2, 5, 15, 15, 14, 4, 13, 13, 3, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 3, 7, 12, 6, 5, 4, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [14, 2, 5, 12, 4, 6, 5, 5, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [32, 25, 19, 18, 19, 24, 18, 18, 18]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [4, 10, 41, 6, 6, 11, 6, 12, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [7, 23, 3, 58, 17, 18, 6, 14, 18, 17]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 28, 17, 16, 16, 17, 138, 3, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [6, 5, 4, 9, 9, 9, 9, 17, 15, 9]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [3, 5, 3, 17, 16, 16, 16, 17, 16, 17, 20, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [4, 4, 12, 12, 12, 17, 6, 12, 15]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [10, 8, 7, 4, 9, 7, 27, 7, 13, 14]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [21, 19, 5, 28, 14, 17, 26, 20, 9, 29, 164]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 7, 4, 5, 4, 9, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [17, 14, 17, 11, 14, 15, 14, 14, 16, 14, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [12, 6, 5, 8, 7, 9, 12, 7, 3, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [4, 6, 10, 23, 23, 23, 23, 23, 19, 10, 10]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 4, 6, 4, 4, 5, 5, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [6, 2, 9, 10, 3, 10, 5]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [14, 3, 22, 10, 9, 9, 9, 10, 9, 9, 4, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [6, 5, 14, 14, 14, 15, 15, 14, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [10, 11, 3, 4, 7, 8, 8, 3, 4, 4, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [20, 14, 18, 9, 9, 9, 18, 9, 9, 66, 4, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [2, 5, 5, 5, 7, 54, 9, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [25, 10, 4, 4, 14, 8, 5, 6, 163]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [8, 5, 9, 13, 13, 13, 13, 13, 13, 13, 13, 26]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [3, 38, 5, 9, 9, 9, 24, 9, 9, 9]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [20, 16, 14, 22, 14, 13, 13, 20, 13, 13, 18]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [6, 20, 12, 12, 12, 73, 12, 15, 12, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [6, 30, 6, 5, 7, 13, 5, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [3, 25, 5, 21, 21, 21, 23, 21, 21, 21, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [27, 6, 3, 12, 28, 16, 22]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [13, 6, 6, 3, 12, 9, 5, 4, 5, 10, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [10, 12, 16, 3, 56, 24, 16, 13]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [11, 4, 26, 4, 10, 42, 16, 48, 15]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [7, 4, 7, 4, 15, 10, 4, 3, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [9, 9, 4, 7, 7, 5, 22, 9, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [22, 20, 18, 12, 12, 13, 12, 13, 12, 12, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [17, 18, 9, 32, 7, 13, 13, 37, 9, 12]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [6, 11, 10, 12, 13, 6, 55, 13, 9, 7, 6, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [7, 4, 5, 5, 4, 4, 4, 13]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [4, 6, 6, 7, 7, 6, 6, 9]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [18, 9, 7, 4, 4, 4, 9, 7, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [11, 4, 4, 5, 4, 6, 8, 12]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [14, 15, 6, 8, 8, 7, 9, 6, 7, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [6, 4, 7, 6, 4, 9, 4, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [4, 12, 11, 21, 17, 21, 21, 26, 21, 21]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [8, 18, 133, 18, 66, 16, 5, 5, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [16, 8, 11, 5, 4, 19, 4, 11, 14, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [6, 5, 8, 9, 9, 8, 8, 7, 6, 6, 8]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 4, 4, 3, 5, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [4, 8, 5, 6, 12, 3, 10, 6, 5, 6, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [5, 6, 6, 4, 9, 178, 6, 4, 7, 168, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 8, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 5, 7, 4, 4, 4, 5, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [51, 10, 10, 10, 179, 10, 11, 10, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 5, 4, 18, 4, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 177
[length(mis) for mis = unique(C_list)] = [9, 6, 10, 7, 8, 7, 226, 9, 10, 7, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 178
[length(mis) for mis = unique(C_list)] = [4, 20, 10, 8, 11, 13, 10, 10, 19, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 179
[length(mis) for mis = unique(C_list)] = [8, 4, 9, 4, 8, 8, 10, 27, 3, 5, 11]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 180
[length(mis) for mis = unique(C_list)] = [15, 7, 4, 22, 22, 10, 10, 10, 10, 14]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 181
[length(mis) for mis = unique(C_list)] = [8, 28, 5, 3, 8, 72, 13, 102, 5, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 182
[length(mis) for mis = unique(C_list)] = [51, 4, 5, 5, 8, 8, 37, 8, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 183
[length(mis) for mis = unique(C_list)] = [8, 6, 21, 21, 5, 4, 4, 8, 6, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 184
[length(mis) for mis = unique(C_list)] = [4, 4, 11]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 185
[length(mis) for mis = unique(C_list)] = [5, 8, 9, 6, 12, 14, 24, 3, 17, 5, 13]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 186
[length(mis) for mis = unique(C_list)] = [20, 10, 8, 7, 4, 4, 15]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 187
[length(mis) for mis = unique(C_list)] = [15, 9, 13, 25, 25, 28, 25, 24, 24, 25, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 188
[length(mis) for mis = unique(C_list)] = [19, 22, 6, 8, 8, 12, 12]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 189
[length(mis) for mis = unique(C_list)] = [40, 13, 4, 31, 7, 4, 18, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 190
[length(mis) for mis = unique(C_list)] = [15, 3, 6, 24, 5, 3, 5]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 191
[length(mis) for mis = unique(C_list)] = [13, 32, 31, 4, 18, 6, 4, 11, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 192
[length(mis) for mis = unique(C_list)] = [13, 5, 6, 7, 8, 12, 5, 9, 14]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 193
[length(mis) for mis = unique(C_list)] = [22, 24, 25, 29, 29, 29, 29, 30, 30, 29]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 194
[length(mis) for mis = unique(C_list)] = [9, 7, 7, 5, 6, 5, 6, 6, 6, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 195
[length(mis) for mis = unique(C_list)] = [29, 10, 14, 5, 261, 8, 5, 9, 8, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 196
[length(mis) for mis = unique(C_list)] = [14, 10, 8, 8, 10, 8]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 197
[length(mis) for mis = unique(C_list)] = [37, 6, 13, 6, 13, 13, 13, 13, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 198
[length(mis) for mis = unique(C_list)] = [17, 5, 10, 4, 20, 5, 9, 4, 11, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 199
[length(mis) for mis = unique(C_list)] = [8, 5, 8, 25, 25, 14, 26, 6, 4, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 200
[length(mis) for mis = unique(C_list)] = [24, 33, 17, 29, 10, 15, 8, 9, 13, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 201
[length(mis) for mis = unique(C_list)] = [9, 3, 6, 9, 11, 3, 7, 124, 6, 8, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 202
[length(mis) for mis = unique(C_list)] = [9, 17, 18, 12, 12, 12, 19, 12, 12, 12]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 203
[length(mis) for mis = unique(C_list)] = [3, 17, 10, 17, 8, 15, 17, 6, 20, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 204
[length(mis) for mis = unique(C_list)] = [18, 12, 18, 9, 28, 9, 9, 26, 9, 31, 18]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 205
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 6, 7, 7, 6, 5, 7, 4, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 206
[length(mis) for mis = unique(C_list)] = [6, 13, 5, 6, 5, 11, 37, 11, 5, 11, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 207
[length(mis) for mis = unique(C_list)] = [16, 12, 4, 6, 12, 8, 6, 8, 5, 76]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 208
[length(mis) for mis = unique(C_list)] = [11, 20, 4, 4, 13, 17, 14]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 209
[length(mis) for mis = unique(C_list)] = [25, 7, 34, 18, 18, 32, 34, 18]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 210
[length(mis) for mis = unique(C_list)] = [20, 47, 6, 21, 13, 13, 13, 13, 25, 13, 14]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 211
[length(mis) for mis = unique(C_list)] = [5, 10, 19, 5, 27, 4, 19, 11, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 212
[length(mis) for mis = unique(C_list)] = [2, 8, 25, 7, 18, 26, 4, 18, 22, 20]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 213
[length(mis) for mis = unique(C_list)] = [38, 13, 11, 14, 23, 18, 9, 16, 24, 17, 13, 12]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 214
[length(mis) for mis = unique(C_list)] = [3, 6, 5, 6, 6, 7, 6, 8, 6, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 215
[length(mis) for mis = unique(C_list)] = [28, 35, 27, 22, 22, 4, 22, 21, 22, 22]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = WARNING: Dual bound 0.982465 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982468. The solution might not be optimal.
WARNING: Dual bound 0.982465 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982437 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982433 is smaller than the objective of the primal solution 0.982468. The solution might not be optimal.
WARNING: Dual bound 0.982465 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982478. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982463. The solution might not be optimal.
WARNING: Dual bound 0.982451 is smaller than the objective of the primal solution 0.982477. The solution might not be optimal.
WARNING: Dual bound 0.982465 is smaller than the objective of the primal solution 0.982468. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
216
[length(mis) for mis = unique(C_list)] = [14, 10, 6, 31, 15, 7, 6, 6, 15, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 217
[length(mis) for mis = unique(C_list)] = [21, 7, 30, 8, 7, 17, 26, 8, 8, 14]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 218
[length(mis) for mis = unique(C_list)] = [7, 21, 4, 16, 4, 8, 16, 12, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 219
[length(mis) for mis = unique(C_list)] = [6, 4, 19, 4, 6, 7, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 220
[length(mis) for mis = unique(C_list)] = [22, 8, 27, 12, 26, 27, 27]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 221
[length(mis) for mis = unique(C_list)] = [13, 10, 7, 6, 14, 14, 6, 7, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 222
[length(mis) for mis = unique(C_list)] = [3, 6, 18, 26, 18, 5, 19, 29]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 223
[length(mis) for mis = unique(C_list)] = [35, 25, 28, 15, 11, 4, 127, 153, 19, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 224
[length(mis) for mis = unique(C_list)] = [17, 3, 7, 3, 30, 22, 10, 30, 30, 5, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 225
[length(mis) for mis = unique(C_list)] = [6, 6, 5, 6, 11]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 226
[length(mis) for mis = unique(C_list)] = [52, 10, 5, 38, 40, 39, 40, 10, 39, 40]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 227
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 4, 5, 3, 6, 5, 5, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 228
[length(mis) for mis = unique(C_list)] = [5, 9, 7, 23, 24, 27, 24, 31, 23, 23]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 229
[length(mis) for mis = unique(C_list)] = [13, 7, 7, 4, 13, 4, 5, 9, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 230
[length(mis) for mis = unique(C_list)] = [16, 7, 25, 25, 25, 25, 25, 21, 26]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 231
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 5, 5, 6, 6, 5, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 232
[length(mis) for mis = unique(C_list)] = [7, 8, 13, 10, 14, 17, 15, 14]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 233
[length(mis) for mis = unique(C_list)] = [3, 5, 8, 21, 8, 7, 6, 11, 5, 14, 5]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 234
[length(mis) for mis = unique(C_list)] = [5, 6, 4, 7, 3, 6, 5, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 235
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 7, 6, 5, 7, 5, 6, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 236
[length(mis) for mis = unique(C_list)] = [26, 22, 18, 20, 21, 37, 17, 17]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 237
[length(mis) for mis = unique(C_list)] = [15, 4, 6, 4, 4, 6, 4, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 238
[length(mis) for mis = unique(C_list)] = [3, 4, 22, 22, 22, 22, 22, 22, 25, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 239
[length(mis) for mis = unique(C_list)] = [20, 23, 17, 6, 10, 18, 58, 8, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 240
[length(mis) for mis = unique(C_list)] = [34, 18, 4, 16, 21, 29, 21, 25, 8, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 241
[length(mis) for mis = unique(C_list)] = [5, 4, 9, 8, 8, 4, 27, 117, 23]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 242
[length(mis) for mis = unique(C_list)] = [25, 7, 7, 7, 14, 5, 5, 7, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 243
[length(mis) for mis = unique(C_list)] = [21, 24, 10, 15, 16, 31, 35, 7, 6, 27]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 244
[length(mis) for mis = unique(C_list)] = [4, 9, 4, 27, 4, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 245
[length(mis) for mis = unique(C_list)] = [9, 6, 8, 9, 9, 14, 9, 9, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 246
[length(mis) for mis = unique(C_list)] = [3, 22, 6, 25, 25, 25, 25, 25, 25, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 247
[length(mis) for mis = unique(C_list)] = [33, 7, 8, 40, 9, 9, 8, 16, 6, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 248
[length(mis) for mis = unique(C_list)] = [21, 6, 17, 19, 26, 4, 10]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 249
[length(mis) for mis = unique(C_list)] = [26, 5, 4, 17, 16, 7, 14, 8]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 250
[length(mis) for mis = unique(C_list)] = [12, 20, 16, 11, 2, 27, 26, 13, 18]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 251
[length(mis) for mis = unique(C_list)] = [12, 15, 14, 14, 14, 14, 14, 14, 14, 22]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 252
[length(mis) for mis = unique(C_list)] = [3, 14, 4, 22, 59, 10, 19, 6, 12, 3, 16]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 253
[length(mis) for mis = unique(C_list)] = [46, 33, 22, 21, 8, 6, 12, 160]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 254
[length(mis) for mis = unique(C_list)] = [3, 4, 7, 8, 5, 6, 12, 7, 14]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 255
[length(mis) for mis = unique(C_list)] = [7, 21, 7, 18, 18, 18, 18, 18, 18, 20, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 256
[length(mis) for mis = unique(C_list)] = [9, 17, 6, 5, 5, 5, 5, 5, 29, 11]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 257
[length(mis) for mis = unique(C_list)] = [6, 29, 17, 17, 25, 28, 14, 37, 16, 24, 9]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 258
[length(mis) for mis = unique(C_list)] = [16, 21, 7, 13, 4, 8, 12, 5, 5, 10, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 259
[length(mis) for mis = unique(C_list)] = [30, 29, 35, 35, 35, 32, 35, 35, 35, 35, 29, 8, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 260
[length(mis) for mis = unique(C_list)] = [14, 6, 4, 19, 4, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 261
[length(mis) for mis = unique(C_list)] = [23, 16, 4, 17, 10, 28, 18, 29, 28]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 262
[length(mis) for mis = unique(C_list)] = [25, 20, 16, 16, 15, 26, 17, 19, 16, 20, 21]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 263
[length(mis) for mis = unique(C_list)] = [23, 22, 8, 11, 11, 11, 11, 11, 12, 14, 12]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 264
[length(mis) for mis = unique(C_list)] = [24, 13, 5, 9, 16]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 265
[length(mis) for mis = unique(C_list)] = [23, 8, 5, 11, 11, 4, 27, 11]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 266
[length(mis) for mis = unique(C_list)] = [8, 7, 4, 6, 9, 24, 3]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 267
[length(mis) for mis = unique(C_list)] = [17, 4, 6, 16, 15, 4, 16, 16, 16, 16]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 268
[length(mis) for mis = unique(C_list)] = [6, 5, 2, 5, 5, 12, 6, 4, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 269
[length(mis) for mis = unique(C_list)] = [6, 26, 25, 25, 29, 16, 25, 24, 26]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 270
[length(mis) for mis = unique(C_list)] = [4, 10, 23, 4, 16, 17, 12, 18, 29, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 271
[length(mis) for mis = unique(C_list)] = [36, 9, 8, 9, 33, 8, 24, 9]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 272
[length(mis) for mis = unique(C_list)] = [6, 39, 15, 32, 30, 24, 203, 21, 14, 4, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 273
[length(mis) for mis = unique(C_list)] = [16, 28, 24, 46, 32, 17, 19, 25, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 274
[length(mis) for mis = unique(C_list)] = [14, 7, 7, 11, 7, 13, 6, 8, 7, 11]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 275
[length(mis) for mis = unique(C_list)] = [6, 22, 9, 18, 9, 4, 4, 10, 4, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 276
[length(mis) for mis = unique(C_list)] = [10, 17, 6, 17, 33, 3, 15, 4, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 277
[length(mis) for mis = unique(C_list)] = [4, 25, 21, 6, 15, 19, 12, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 278
[length(mis) for mis = unique(C_list)] = [4, 28, 22, 30, 23, 37, 41, 31, 36, 37]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 279
[length(mis) for mis = unique(C_list)] = [4, 33, 27, 18, 4, 15, 24, 13]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 280
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 10, 28]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 281
[length(mis) for mis = unique(C_list)] = [43, 4, 7, 4, 4, 5, 8, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 282
[length(mis) for mis = unique(C_list)] = [35, 18, 20, 13, 22, 9, 15, 15, 29, 16]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 283
[length(mis) for mis = unique(C_list)] = [18, 10, 9, 18, 8, 15, 11, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 284
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 4, 5, 5, 4, 6, 5, 14]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 285
[length(mis) for mis = unique(C_list)] = [29, 4, 24, 6, 24, 24, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 286
[length(mis) for mis = unique(C_list)] = [6, 11, 4, 11, 5]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 287
[length(mis) for mis = unique(C_list)] = [5, 3, 10, 12, 13, 11, 4, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 288
[length(mis) for mis = unique(C_list)] = [6, 17, 4, 4, 8, 8, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 289
[length(mis) for mis = unique(C_list)] = [34, 10, 10, 17, 14, 15, 9, 10, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 290
[length(mis) for mis = unique(C_list)] = [27, 4, 21, 26, 31, 21, 6, 23, 24, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 291
[length(mis) for mis = unique(C_list)] = [14, 4, 4, 30, 29, 9, 10, 16]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 292
[length(mis) for mis = unique(C_list)] = [19, 32, 28, 32, 18, 13, 16, 32, 31, 19]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 293
[length(mis) for mis = unique(C_list)] = [25, 154, 10, 9, 8, 8, 8, 7, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 294
[length(mis) for mis = unique(C_list)] = [6, 8, 6, 7, 7, 6, 6, 7]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 295
[length(mis) for mis = unique(C_list)] = [16, 6, 8, 5, 6, 9, 7, 7, 12, 8, 11]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 296
[length(mis) for mis = unique(C_list)] = [15, 8, 12, 7, 19, 10, 19, 11, 22, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 297
[length(mis) for mis = unique(C_list)] = [6, 4, 10, 12, 5, 3, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 298
[length(mis) for mis = unique(C_list)] = [3, 7, 4, 9, 9, 6, 8, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 299
[length(mis) for mis = unique(C_list)] = [14, 18, 8, 13, 10, 32, 9, 10, 10, 10, 20]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 300
[length(mis) for mis = unique(C_list)] = [20, 6, 5, 14, 12, 24, 17, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 301
[length(mis) for mis = unique(C_list)] = [3, 17, 15, 6, 17, 22, 6, 7, 16]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 302
[length(mis) for mis = unique(C_list)] = [5, 7, 8, 5, 4, 7, 8, 6, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 303
[length(mis) for mis = unique(C_list)] = [5, 5, 8, 7, 6, 4, 3, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 304
[length(mis) for mis = unique(C_list)] = [3, 5, 5, 4, 4, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 305
[length(mis) for mis = unique(C_list)] = [6, 8, 10, 7, 10, 8, 8, 10, 8, 11]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 306
[length(mis) for mis = unique(C_list)] = [51, 13, 13, 24, 24, 25, 24, 12, 7, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 307
[length(mis) for mis = unique(C_list)] = [59, 11, 8, 49, 51, 50, 14, 51, 49, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 308
[length(mis) for mis = unique(C_list)] = [17, 11, 5, 14, 7, 3, 11, 4, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 309
[length(mis) for mis = unique(C_list)] = [14, 10, 12, 18, 17, 10, 33, 18, 19]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 310
[length(mis) for mis = unique(C_list)] = [12, 12, 12, 4, 4, 11, 7, 214, 15]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 311
[length(mis) for mis = unique(C_list)] = [5, 6, 44, 44, 45, 5, 55, 43, 43]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 312
[length(mis) for mis = unique(C_list)] = [5, 14, 7, 7, 6, 5, 169, 8, 6, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 313
[length(mis) for mis = unique(C_list)] = [8, 3, 7, 6, 7, 6, 7, 8, 6]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 314
[length(mis) for mis = unique(C_list)] = [8, 9, 9, 5, 6, 10, 9, 6, 6, 16]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 315
[length(mis) for mis = unique(C_list)] = [27, 16, 3, 8, 6, 13, 13, 13, 25]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 316
[length(mis) for mis = unique(C_list)] = [11, 15, 8, 11, 11, 11, 21, 13, 11, 11, 10]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 317
[length(mis) for mis = unique(C_list)] = [24, 13, 11, 21, 11, 7, 36, 8, 16, 7, 13]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 318
[length(mis) for mis = unique(C_list)] = [4, 13, 5, 25, 6, 7, 27, 13, 96]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 319
[length(mis) for mis = unique(C_list)] = [4, 5, 7, 7, 7, 7]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 320
[length(mis) for mis = unique(C_list)] = [8, 12, 8, 12, 11, 12, 10, 9]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 321
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 4, 6, 8, 13, 8]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 322
[length(mis) for mis = unique(C_list)] = [33, 22, 26, 22, 22, 7, 20, 9, 22, 17, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 323
[length(mis) for mis = unique(C_list)] = [9, 6, 17, 17, 17, 17, 17, 17, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 324
[length(mis) for mis = unique(C_list)] = [5, 3, 6, 5, 9]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 325
[length(mis) for mis = unique(C_list)] = [9, 20, 4, 4, 21, 11, 4, 21]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 326
[length(mis) for mis = unique(C_list)] = [29, 5, 5, 9, 5, 10, 9, 6, 8, 6, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 327
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 7, 8, 8, 7, 8, 7, 13, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 328
[length(mis) for mis = unique(C_list)] = [6, 12, 14, 3, 14, 12, 22, 20, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 329
[length(mis) for mis = unique(C_list)] = [4, 8, 18, 9, 12, 21, 10, 6, 9, 10]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 330
[length(mis) for mis = unique(C_list)] = [13, 9, 4, 14, 6, 4, 5, 5, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 331
[length(mis) for mis = unique(C_list)] = [16, 6, 28, 14, 12, 22, 5, 21, 7, 13]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 332
[length(mis) for mis = unique(C_list)] = [8, 6, 6, 6, 13, 5, 9, 9, 7, 105]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 333
[length(mis) for mis = unique(C_list)] = [5, 13, 5, 9, 9, 9, 10, 10, 9, 9, 4]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 334
[length(mis) for mis = unique(C_list)] = [52, 8, 8, 4, 15, 8, 6, 6]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 335
[length(mis) for mis = unique(C_list)] = [20, 6, 19, 20, 19, 19, 18, 19, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 336
[length(mis) for mis = unique(C_list)] = [29, 6, 5, 5, 5, 4, 5, 5, 5, 6]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 337
[length(mis) for mis = unique(C_list)] = [12, 14, 11, 5, 7, 8, 8, 8, 10]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 338
[length(mis) for mis = unique(C_list)] = [18, 15, 13, 20, 4, 7, 18, 6, 8, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 339
[length(mis) for mis = unique(C_list)] = [14, 11, 14, 12, 8, 8, 8, 10, 7, 8, 6, 6, 10]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 340
[length(mis) for mis = unique(C_list)] = [34, 3, 21, 21, 21, 21, 18, 21]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 341
[length(mis) for mis = unique(C_list)] = [6, 5, 5, 8, 6, 4, 4, 11, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 342
[length(mis) for mis = unique(C_list)] = [23, 6, 7, 4, 6, 4, 7, 6, 7, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 343
[length(mis) for mis = unique(C_list)] = [7, 5, 9, 6, 10, 6, 7, 6, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 344
[length(mis) for mis = unique(C_list)] = [18, 5, 14, 7, 4, 9, 31, 4, 14]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 345
[length(mis) for mis = unique(C_list)] = [5, 30, 37, 42, 4, 36, 33, 10, 12]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 346
[length(mis) for mis = unique(C_list)] = [13, 6, 5, 8, 4, 4, 7, 4, 4, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 347
[length(mis) for mis = unique(C_list)] = [4, 30, 8, 13, 22, 27, 13]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 348
[length(mis) for mis = unique(C_list)] = [4, 5, 30, 4, 11, 6, 10, 6, 14]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 349
[length(mis) for mis = unique(C_list)] = [19, 23, 20, 6, 22, 23, 23, 8, 25, 18]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 350
[length(mis) for mis = unique(C_list)] = [12, 7, 9, 10, 8, 6, 13, 9]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 351
[length(mis) for mis = unique(C_list)] = [63, 11, 14, 4, 11, 6, 6, 20]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 352
[length(mis) for mis = unique(C_list)] = [2, 4, 8, 6, 7, 8, 7, 5, 10, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 353
[length(mis) for mis = unique(C_list)] = [41, 4, 4, 4, 17, 18, 20, 14, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 354
[length(mis) for mis = unique(C_list)] = [12, 12, 12, 8, 7, 5, 9, 11, 13, 9]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 355
[length(mis) for mis = unique(C_list)] = [12, 21, 33, 16, 14, 14, 4, 20, 13, 5, 6, 15]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 356
[length(mis) for mis = unique(C_list)] = [13, 11, 5, 4, 5, 13, 14, 7, 8, 6, 10]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 357
[length(mis) for mis = unique(C_list)] = [36, 6, 9, 6, 9, 7, 8, 7, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 358
[length(mis) for mis = unique(C_list)] = [17, 4, 4, 6, 5, 18, 6, 5]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 359
[length(mis) for mis = unique(C_list)] = [16, 5, 7, 6, 4, 9, 15, 4, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 360
[length(mis) for mis = unique(C_list)] = [5, 4, 9, 4, 11, 13, 8, 4, 14, 10]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 361
[length(mis) for mis = unique(C_list)] = [4, 11, 8, 18, 6, 10, 9, 8, 69, 11]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 362
[length(mis) for mis = unique(C_list)] = [8, 4, 13, 13, 23, 8, 13, 8, 4, 3]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 363
[length(mis) for mis = unique(C_list)] = [14, 16, 6, 17, 17, 10, 17, 15, 7, 15]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 364
[length(mis) for mis = unique(C_list)] = [18, 8, 8, 10, 16, 10, 8, 14]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 365
[length(mis) for mis = unique(C_list)] = [15, 7, 5, 3, 4, 37]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 366
[length(mis) for mis = unique(C_list)] = [4, 18, 5, 8, 12, 8, 10, 8, 6, 8]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 367
[length(mis) for mis = unique(C_list)] = [5, 5, 5, 6, 4, 5, 8, 5, 4, 17]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 368
[length(mis) for mis = unique(C_list)] = [4, 13, 6, 9, 24, 6, 21, 6, 21, 6, 32]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 369
[length(mis) for mis = unique(C_list)] = [9, 11, 8, 6, 8, 8, 11, 6, 4]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 370
[length(mis) for mis = unique(C_list)] = [18, 54, 54, 7, 52, 54, 7, 6, 64, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 371
[length(mis) for mis = unique(C_list)] = [12, 5, 9, 9, 5, 9, 19, 9, 9]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 372
[length(mis) for mis = unique(C_list)] = [8, 3, 10, 6, 4, 12]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 373
[length(mis) for mis = unique(C_list)] = [3, 10, 6, 9, 9, 6, 4, 19, 7]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 374
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 5, 8, 6, 47, 6, 7, 14]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 375
[length(mis) for mis = unique(C_list)] = [4, 14, 12, 220, 10, 10, 13, 17, 18]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 376
[length(mis) for mis = unique(C_list)] = [16, 7, 4, 25, 6, 8, 4, 4, 6, 4]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 377
[length(mis) for mis = unique(C_list)] = [20, 20, 24, 6, 21, 21, 7, 5, 14]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 378
[length(mis) for mis = unique(C_list)] = [17, 15, 26, 14, 12, 48, 12, 12, 13]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 379
[length(mis) for mis = unique(C_list)] = [17, 8, 143, 10, 7, 4, 6, 11]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 380
[length(mis) for mis = unique(C_list)] = [18, 7, 5, 21, 170, 26]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 381
[length(mis) for mis = unique(C_list)] = [23, 57, 5, 61, 14, 67, 63, 63, 58, 54, 65]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 382
[length(mis) for mis = unique(C_list)] = [60, 19, 51, 5, 18, 60, 126, 21, 9, 63, 16]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 383
[length(mis) for mis = unique(C_list)] = [3, 31, 24, 29, 14, 19, 17, 17, 10, 12, 13]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 384
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 2, 9, 4, 5]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 385
[length(mis) for mis = unique(C_list)] = [17, 16, 4, 12, 18, 10, 9, 14, 4, 10]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 386
[length(mis) for mis = unique(C_list)] = [11, 33, 34, 26, 21, 36, 23, 37]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 387
[length(mis) for mis = unique(C_list)] = [7, 30, 10, 22, 22, 22, 10, 20, 22, 22, 24]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 388
[length(mis) for mis = unique(C_list)] = [8, 15, 23, 35, 35, 39, 35, 40, 35, 35, 25]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 389
[length(mis) for mis = unique(C_list)] = [4, 14, 7, 3, 6, 5, 5, 15]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 390
[length(mis) for mis = unique(C_list)] = [7, 20, 10, 10, 8, 7, 9, 13, 15, 13]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 391
[length(mis) for mis = unique(C_list)] = [25, 17, 26, 29, 16, 8, 16, 21, 11]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 392
[length(mis) for mis = unique(C_list)] = [26, 22, 9, 20, 20, 8, 5, 16, 16, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 393
[length(mis) for mis = unique(C_list)] = [2, 12, 15, 5, 15, 9, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 394
[length(mis) for mis = unique(C_list)] = [9, 9, 13, 9, 7, 9]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 395
[length(mis) for mis = unique(C_list)] = [43, 40, 4, 5, 5, 11, 5, 5, 41, 13]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 396
[length(mis) for mis = unique(C_list)] = [5, 12, 10, 10, 7, 22, 8, 6, 9, 7, 6]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 397
[length(mis) for mis = unique(C_list)] = [14, 3, 7, 15, 13, 13, 13, 13, 13, 13]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 398
[length(mis) for mis = unique(C_list)] = [16, 16, 6, 4, 71, 21, 29, 4]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 399
termination = MathOptInterface.INFEASIBLE
objective_value = 0.9824784399344092
