┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iEKO11_1354
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iEKO11_1354
----------------------------------
number of metabolites : 1972
number of reactions : 2778
number of genes : 1354

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 139
max_cuts = 56
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2778 flux variables and 5165 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 11, 11, 11, 12, 13, 11, 12, 2, 22, 16, 17, 16, 17, 16, 16, 13, 13, 14, 13, 14, 13, 13, 257, 13, 13, 14, 13, 14, 13, 13, 5, 4, 6, 8, 2, 38, 19, 2, 16, 38, 39, 39, 4, 146, 9, 9, 9, 2, 10, 10, 2, 4, 2, 2, 9, 10, 9, 53, 3, 3, 2, 3, 135]
length(C_list) = 56
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [3, 3, 2, 2, 5, 2, 8, 3, 4, 2, 3, 3, 12, 4, 4, 3, 2, 4, 31, 5, 49, 3]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 9, 4, 3, 157, 2, 5, 4, 6, 3, 5, 3, 3, 13, 4, 4, 3, 5, 18, 2, 11, 38]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [4, 2, 5, 3, 3, 4, 3, 6, 6, 4, 4, 3, 105, 3, 4, 8]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 5, 30, 4, 3, 5, 6, 6, 2, 27, 13, 7, 6, 6]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 9, 8, 3, 3, 2, 4, 8, 8, 6, 9, 16, 8, 6, 8, 4, 8, 10, 8, 10, 8, 5, 8, 8, 8, 16, 7, 3, 2, 4, 7, 8, 8, 8, 8, 9]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [2, 90, 4, 5, 3, 5, 2, 2, 2, 5, 3, 5, 5, 3, 36, 36, 27]
length(C_list) = 17
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [2, 3, 10, 4, 13, 5, 9, 4, 67, 64, 18, 8]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 8, 6, 29, 8, 7, 6, 5, 11, 15]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 4, 2, 10, 6, 8, 6, 5, 4, 8, 4, 4, 17, 4]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 3, 2, 4, 5, 3, 68, 4, 3, 3, 5, 4, 3, 4]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [2, 16, 3, 3, 3, 3, 3, 52]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [4, 7, 24, 4, 15, 8, 4, 4, 12, 4, 8, 22, 6, 8, 6, 7, 4, 7, 8, 5, 8, 9, 9, 8, 8]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 13
termination = MathOptInterface.OPTIMAL
objective_value = 0.9824784901024617
thermo_feasible = true
