┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: master problem cannot be solved
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:486
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iSynCJ816
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iSynCJ816
----------------------------------
number of metabolites : 928
number of reactions : 1044
number of genes : 816

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 5
(indicator, big_m) = (false, true)
BIG M ADDED
model with 1044 flux variables and 2032 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [1, 3, 4, 6]
length(C_list) = 3
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 6]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [10, 3, 6, 5, 6, 3]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [10, 3, 5, 5, 6]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [1, 3, 4, 4, 6]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
termination_master = MathOptInterface.INFEASIBLE
BoundsError((missing, Any[0.0, 0.0, 0.0, 0.0, 0.0], Any[0.0, 0.0, 0.0, 0.0, 0.0], missing, missing, missing, missing, missing, 0.017945051193237305, MathOptInterface.INFEASIBLE, 5, Any[(Any[], Any[686], 1), (Any[1], Any[453, 464], 3), (Any[451, 613], Any[500, 731], 4), (Any[724, 895], Any[428, 447, 489], 5), (Any[469, 919], Any[1], 3), (Any[469, 919], Any[92, 93], 4), (Any[1], Any[469, 919], 3), (Any[92, 93], Any[321, 341, 443], 5), (Any[1], Any[413, 605], 3), (Any[453, 464], Any[1], 3), (Any[321, 341, 443], Any[92, 93], 5), (Any[637, 856], Any[269, 329, 362], 5), (Any[686], Any[], 1), (Any[565, 573], Any[1], 3), (Any[615], Any[469, 663, 919], 4), (Any[201, 590, 890], Any[1], 4)], Any[1.6847550868988037, 0.013379096984863281, 0.01110696792602539, 0.011661052703857422, 0.07021498680114746, 0.017796039581298828], Any[0.026022911071777344, 0.006165027618408203, 0.006228923797607422, 0.005906105041503906, 0.0048830509185791016], Any[3.481527090072632, 0.11227107048034668, 0.09737300872802734, 0.09901309013366699, 0.07207584381103516]), 16)
