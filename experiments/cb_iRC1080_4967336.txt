┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 66
max_cuts = 44
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6, 3, 5, 110, 8, 7, 6, 9, 11, 5]
length(C_list) = 39
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 9, 3, 3, 2, 4, 2, 3, 3, 18, 3, 3, 4, 3, 6, 5, 4, 9, 7, 7, 4, 368, 9, 4, 4, 4, 8, 5, 3, 6, 4, 3, 14, 5, 7, 7, 4, 5, 5, 9, 276, 7, 5, 3]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 68, 11, 5, 4, 3, 3, 4, 8, 8, 5, 3, 5, 3, 4, 3, 3, 4, 5, 4, 5, 4, 4, 3, 7, 3, 4, 4, 258, 3, 5, 4, 4, 3, 4, 4, 4, 6, 5, 13, 10, 5, 3]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [12, 9, 6, 3, 5, 3, 4, 6, 4, 161, 35, 5, 10, 5, 16, 3, 7, 5, 4, 5, 3, 6, 4, 13, 6, 5, 7, 6, 7, 7, 7, 6, 3, 6, 5, 6, 6, 4, 4, 8, 5]
length(C_list) = 41
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [5, 9, 3, 6, 7, 9, 5, 7, 7, 10, 6, 7, 8, 4, 17, 3, 8, 9, 4, 7, 7, 6, 6, 7, 9, 7, 8, 5, 8, 9, 8, 10, 7, 8, 12, 55, 23, 12, 7, 68]
length(C_list) = 40
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [6, 8, 4, 5, 3, 4, 5, 8, 6, 12, 8, 6, 8, 7, 8, 19, 4, 4, 7, 4, 4, 8, 3, 6, 3, 5, 3, 9, 5, 3, 16, 4, 6, 5]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 9, 3, 3, 5, 4, 3, 6, 3, 7, 27, 3, 8, 4, 7, 5, 5, 3, 20, 4, 8, 3, 3, 3, 5, 8, 5, 7, 5, 7, 5, 4, 229, 6]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [5, 3, 7, 7, 16, 3, 7, 3, 5, 8, 3, 4, 7, 7, 4, 8, 5, 4, 8, 10, 4, 14, 4, 4, 8, 12, 25, 4, 6, 8, 111, 8, 8, 6]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 4, 3, 9, 4, 4, 4, 70, 11, 2, 3, 3, 4, 3, 5, 4, 5, 4, 4, 3, 4, 11, 9, 3, 3, 3, 4, 4, 8]
length(C_list) = 40
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 8, 6, 4, 4, 5, 5, 8, 9, 4, 8, 4, 4, 4, 5, 4, 11, 3, 9, 3, 4, 5, 4, 5, 9, 5, 14, 274, 8, 5, 4, 14, 4, 5]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [14, 11, 4, 4, 4, 3, 3, 3, 16, 4, 5, 11, 6, 8, 11, 4, 6, 10, 4, 14, 14, 5, 16, 9, 6, 7, 9, 5]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [12, 10, 4, 3, 8, 3, 3, 7, 3, 6, 3, 16, 3, 4, 4, 8, 5, 5, 8, 16, 4, 4, 4, 8, 8, 8, 4, 7, 6, 9, 3, 9, 4, 9, 9, 4]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [11, 3, 3, 14, 4, 8, 8, 7, 8, 3, 11, 8, 12, 10, 10, 7, 7, 15, 13, 3, 12, 8, 9, 11, 8, 26, 21, 12, 12, 8, 8, 12, 4, 8, 22, 15]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 4, 6, 25, 6, 6, 6, 5, 5]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [5, 3, 7, 8, 4, 4, 3, 8, 4, 5, 12, 8, 8, 7, 5, 8, 13, 7, 9, 5, 13, 18, 8, 17, 3, 5, 8, 113, 7, 20, 8]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [16, 4, 5, 17, 16, 7, 13, 18, 19, 17, 5, 13, 7, 15, 19, 14, 9, 18, 8, 14, 17, 5, 15]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [4, 4, 7, 7, 4, 7, 4, 5, 5, 3, 4, 4, 8, 9, 22, 4, 4, 4, 4, 7, 3, 3, 3, 5, 4, 4, 5, 4, 5, 10, 4, 16, 4, 4, 8, 83, 5, 4]
length(C_list) = 38
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [7, 3, 3, 4, 7, 4, 9, 27, 289, 4, 4, 4, 3, 4, 4, 3, 6, 5, 5, 3, 3, 4, 6, 4, 4, 13, 4, 4, 7, 7, 5, 3, 8, 20]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [12, 4, 3, 7, 8, 5, 16, 39, 20, 19, 5, 6, 6, 4, 3, 4, 12, 5, 16, 12, 6, 11, 12, 16, 3, 61, 24, 9, 5, 4, 10, 4, 7, 8, 212, 5, 11, 11, 3, 12, 5, 9, 8, 7, 9, 8, 16, 9, 13, 14, 8, 3]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [9, 3, 3, 3, 4, 3, 9, 3, 4, 3, 3, 4, 8, 4, 4, 9, 3, 4, 4, 16, 5, 19, 4, 17, 13, 5, 4, 23, 4, 4]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [3, 6, 6, 14, 4, 38, 85, 3, 6, 4, 8, 6, 16, 6, 7, 7, 175, 18, 5, 6, 4, 4]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [6, 7, 9, 8, 3, 7, 9, 6, 8, 10, 10, 9, 9, 9, 8, 8, 36, 26, 9, 4, 10, 9, 7, 9]
length(C_list) = 24
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [10, 9, 3, 8, 5, 3, 5, 9, 9, 8, 5, 3, 5, 9, 9, 10, 9, 8, 4, 3, 4, 17, 5, 3, 9, 5, 6, 4, 10, 7, 5, 9, 4]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [4, 17, 17, 4, 8, 4, 10, 4, 16, 4, 3, 361, 16, 23, 4, 3, 9, 9, 9, 10, 19, 5, 7, 16, 7, 15, 8, 6, 6, 19, 9, 17, 10, 8]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 4, 5, 5]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [8, 20, 14, 16, 4, 12, 13, 16, 15, 5, 13, 15, 13, 18, 12, 21, 14, 18, 20, 13, 13, 22, 12, 14, 14, 14, 74, 15, 13, 16, 13, 12, 14, 22, 15]
length(C_list) = 35
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [13, 9, 5, 6, 10, 14, 5, 8, 9, 10, 11, 6, 6, 6, 4, 6, 6, 15, 9, 11, 3, 14, 12, 13, 19, 15, 4, 6, 6, 6, 15, 7, 7, 13, 7, 14, 4, 10, 7, 14, 11]
length(C_list) = 41
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [4, 3, 14, 5, 435, 18, 6, 329]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 28
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
