┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN1463
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN1463
----------------------------------
number of metabolites : 2153
number of reactions : 2927
number of genes : 1462

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 59
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2927 flux variables and 5473 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [2, 4, 4, 2, 4, 6, 5, 3, 3, 3, 132, 2, 5, 6, 4, 314, 6, 4, 8, 5, 6, 213, 6, 8, 5, 10, 3, 6]
length(C_list) = 25
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [6, 3, 6, 5, 8, 199, 30, 5, 3, 3, 2, 6, 5, 5, 4, 3, 3, 9, 3, 61, 5, 3, 25, 12, 4, 20, 16]
length(C_list) = 20
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 3, 7, 6, 9, 5, 5, 5, 67, 5, 6, 5, 6, 4, 35, 4, 5, 5, 82, 6, 4, 7, 5, 6, 12, 182, 6, 3, 6, 6]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [3, 3, 2, 2, 8, 5, 8, 7, 6, 6, 4, 3, 4, 7, 6, 7]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 78, 17, 19, 3, 240, 6, 6, 4, 6]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 7, 6, 5, 6, 3, 7, 6, 6, 7, 7, 6, 7, 6, 6, 10, 20, 6, 7, 7, 13, 7, 6, 7, 6, 6, 6, 6, 6, 6, 2, 9, 20]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 2, 5, 10, 6, 5, 6, 3, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [17, 12, 11, 11, 9, 12, 11, 19, 12, 11, 12, 11, 12, 14, 11, 11, 11, 15, 11, 17, 12, 16, 12, 11, 8, 11, 9, 11, 13, 159, 11, 11, 12, 17, 16, 12, 9, 61]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 4, 5, 4, 7]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [6, 5, 7, 193, 8, 13, 7, 135, 10]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [6, 4, 3, 3, 8, 4, 4, 46, 5, 10, 3, 8, 5, 4, 6, 4, 4]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [2, 8, 7, 4, 34, 5, 6, 7, 6, 6, 4, 4, 6, 6, 6, 5, 8, 8, 4, 8, 7, 60, 6, 13, 7]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [6, 2, 6, 6, 6, 6, 6, 11, 130, 6, 8, 12, 6, 5, 11]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 2, 4, 102, 4, 280, 4, 7, 79, 5, 5, 3]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [2, 3, 8, 4, 6, 7, 6, 11, 7, 175, 6, 3, 4, 7, 17, 5, 3]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [8, 3, 152, 6, 5, 10, 3, 3, 3, 2, 6, 51, 7, 3, 14, 3, 13, 3, 3, 8, 7, 199, 3, 3, 6, 4]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [4, 5, 22, 4, 7, 9, 9, 32, 9, 186, 6, 8, 8, 6, 9]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [2, 2, 22, 125, 5, 6, 4, 7, 3]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [5, 6, 5, 6, 7, 15, 117, 6, 7, 19, 8, 274, 8, 6, 7, 8, 22, 6]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 6, 7, 6, 6, 7, 6, 28, 10, 7, 7, 8, 6, 6, 9, 6, 6, 7, 12, 260, 7, 6, 7, 6, 7, 7, 8, 6]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 4, 7, 6, 4, 4, 4, 6, 6, 7, 36, 7]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [6, 8, 8, 8, 111, 9, 8, 8, 8, 8, 15, 7, 10, 10, 9, 9]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [6, 12, 7, 8, 9, 9, 7, 9, 7, 6, 10, 8, 8, 8, 10, 9, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [5, 6, 8, 6, 10, 6, 75, 6, 10, 7, 11, 7, 4, 7, 6, 9, 7, 6, 7, 7, 7, 7, 7, 9, 6, 83]
length(C_list) = 23
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [3, 2, 4, 6, 8, 8, 6, 7, 9, 6, 4, 11, 6, 5, 6, 6, 217, 3, 6]
length(C_list) = 17
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [4, 7, 6, 5, 4, 17, 3, 8, 6, 6, 5, 252]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [5, 7, 7, 6, 11, 8, 8, 7, 7, 6, 8, 7, 7, 8, 8, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [2, 6, 7]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [6, 64, 7, 7, 6, 6, 14, 6, 11, 9, 15, 7, 9, 7, 9, 7, 8, 18]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 29
termination = MathOptInterface.OPTIMAL
objective_value = 0.5861175477010546
thermo_feasible = true
