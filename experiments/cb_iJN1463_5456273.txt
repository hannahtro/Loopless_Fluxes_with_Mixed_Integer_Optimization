WARNING: Dual bound 0.585867 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585907 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585748 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.586013 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585908 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585671 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585882 is smaller than the objective of the primal solution 0.585908. The solution might not be optimal.
WARNING: Dual bound 0.585908 is smaller than the objective of the primal solution 0.586116. The solution might not be optimal.
WARNING: Dual bound 0.585803 is smaller than the objective of the primal solution 0.586116. The solution might not be optimal.
WARNING: Dual bound 0.585908 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585889 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.586099 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585889 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
WARNING: Dual bound 0.585908 is smaller than the objective of the primal solution 0.586099. The solution might not be optimal.
WARNING: Dual bound 0.586111 is smaller than the objective of the primal solution 0.586118. The solution might not be optimal.
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN1463
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN1463
----------------------------------
number of metabolites : 2153
number of reactions : 2927
number of genes : 1462

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 59
max_cuts = 15
(indicator, big_m) = (false, true)
BIG M ADDED
model with 2927 flux variables and 5473 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 7, 2, 2, 2, 2, 4, 3, 3, 2, 2, 3, 4, 3, 6, 65, 4, 5, 5, 8, 4, 3, 3, 3, 5]
length(C_list) = 15
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [8, 5, 4, 11, 4, 2, 3, 4, 3, 25, 6, 6, 6, 6, 4, 7, 5, 47, 17, 5, 20, 19, 5, 6, 6, 5, 3, 6, 6, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 3, 6, 5, 4, 9, 4, 4, 8, 2, 5, 5, 10, 25]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 3, 4, 2, 2, 5, 7, 4, 3, 17, 3, 4, 7, 21, 11, 11, 15, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [6, 2, 3, 5, 4, 4, 16, 5, 32, 10, 6, 8, 24]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [2, 6, 4, 4, 4, 7, 6, 6, 3, 5, 92, 12, 10, 4, 5, 8, 9, 4, 6, 2, 12, 16, 7, 11, 4, 149]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [5, 68, 6, 8, 10, 5, 13, 8, 84, 11, 7, 8, 54, 13, 10, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [3, 5, 4, 5, 7, 5, 7, 6, 4, 8, 4, 6, 5]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [6, 18, 3, 3, 3, 2, 3, 3, 3, 3, 8, 4, 6, 3, 106, 6, 39, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 5, 4, 3, 4, 17, 4, 28, 12, 6, 5, 333, 5, 6, 7, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [7, 5, 4, 8, 3, 6, 7, 6, 6, 7, 10, 7, 6, 14, 19]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [5, 7, 6, 13, 5, 6, 6, 6, 7, 12, 17, 6, 10, 3, 7, 7, 8, 4, 7, 4, 9, 8, 9, 5, 10, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 3, 4, 3, 4, 3, 4, 4, 8, 5, 4, 4, 136, 5, 5, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [2, 3, 6, 6, 23, 5, 4, 23, 7, 4, 5, 6, 6, 4, 6, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 14, 4, 9, 83, 4, 46, 25, 4, 8]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [24, 13, 9, 4, 11, 12, 29, 10, 9, 5, 10, 7, 6, 6, 13, 163, 9, 14, 9, 271, 9, 21, 27, 23, 145, 31, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [5, 5, 101, 5, 4, 5, 12, 4, 3, 4, 4, 4, 6, 4, 4, 4, 6, 11, 4, 4, 5, 8, 4, 4, 4, 4, 4, 4, 5, 5, 12, 4, 4, 5, 5, 4]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 6, 4, 4, 5, 6, 108, 10, 3, 6, 5, 5, 4, 3, 5, 5, 6, 4, 8, 5, 5, 26, 6, 4, 4, 8, 6, 26, 3, 18, 4, 3, 5, 4, 42, 6, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [9, 9, 3, 2, 313, 4, 7, 6, 4, 6, 6, 6, 5, 5, 6, 4, 5, 6, 6, 4, 7, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 45, 4, 5, 5, 7, 4, 7, 4, 4]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 4, 4, 4, 5, 37, 9, 6, 21, 7, 2, 5, 6, 7, 7, 6, 5, 5, 4, 5, 336, 9, 4, 75, 13, 7, 27, 4, 19, 7, 18, 5, 26, 4, 18, 7, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [18, 11, 4, 6, 4, 6, 5, 6, 27, 4, 5, 4, 5, 6, 10, 22, 7, 7, 7, 7, 5, 7, 5, 5, 6, 6, 17, 5, 8, 5, 6, 30, 5, 22, 7, 19, 5, 8, 27, 7, 18, 7, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [9, 10, 6, 4, 6, 5, 4, 34, 5, 7, 5, 10, 4, 11, 7, 4, 6, 3, 9, 6, 5, 4, 10, 6, 6, 10, 10, 5, 3, 5, 10, 6, 29, 5, 28, 61, 13, 35, 25, 4, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [5, 3, 5, 6, 3, 5, 7, 7, 46, 6, 8, 3, 8, 6, 6, 5, 4, 68, 3, 4, 5, 7, 41, 14, 5, 10, 3, 5, 28, 5, 20, 7, 59, 7, 8, 27, 6, 5, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [11, 4, 5, 4, 5, 6, 6, 25, 29, 6, 5, 3, 9, 6, 17, 5, 8, 3, 5, 5, 3, 6, 3, 3, 7, 5, 4, 4, 3, 6, 2, 31, 4, 19, 6, 18, 6, 3, 28, 102, 4, 8, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [3, 8, 7, 15, 6, 6, 5, 29, 5, 3, 5, 7, 7, 11, 49, 5, 3, 9, 5, 7, 9, 6, 7, 5, 5, 4, 8, 10, 6, 34, 8, 23, 10, 22, 12, 105, 32, 4, 5, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [7, 6, 6, 8, 20, 3, 9, 5, 8, 4, 10, 3, 11, 7, 8, 6, 5, 8, 6, 3, 6, 5, 4, 6, 8, 4, 6, 6, 11, 5, 7, 4, 13, 7, 5, 4, 10, 11, 4, 5, 4, 5, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [3, 10, 9, 6, 6, 7, 6, 29, 10, 5, 7, 5, 4, 6, 4, 4, 6, 6, 12, 23, 7, 4, 3, 10, 3, 6, 3, 5, 4, 21, 7, 10, 7, 29, 4, 21, 8, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [7, 13, 7, 4, 11, 3, 5, 6, 3, 6, 5, 11, 13, 8, 4, 5, 6, 4, 12, 4, 6, 4, 9, 5, 23, 11, 4, 59, 6, 10, 4, 7, 11, 12, 4, 4, 29, 74, 6, 8, 5, 9, 6, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [7, 12, 5, 4, 4, 5, 6, 26, 2, 8, 58, 5, 6, 6, 13, 6, 9, 11, 6, 8, 11, 5, 11, 14, 111, 9, 6, 6, 6, 26, 4, 18, 9, 7, 26, 4, 25, 4, 25, 6, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [18, 5, 5, 5, 6, 3, 3, 34, 5, 7, 4, 8, 4, 6, 9, 10, 9, 9, 3, 4, 11, 7, 3, 10, 15, 5, 4, 5, 24, 5, 24, 3, 32, 4, 44]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [13, 7, 10, 5, 6, 8, 16, 6, 5, 12, 6, 7, 3, 8, 7, 22, 8, 9, 9, 3, 7, 7, 6, 7, 3, 6, 9, 9, 5, 8, 5, 4, 4, 9, 5, 4, 5, 3, 8, 3, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [7, 24, 12, 9, 6, 12, 5, 6, 10, 4, 30, 137, 38, 147, 31, 7, 38, 4, 32, 4, 38, 11, 30, 7, 38, 4, 10, 3, 7, 10, 3, 11, 8, 13, 4, 59, 47, 10, 7, 13, 10, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [9, 26, 8, 11, 7, 7, 11, 32, 7, 69, 29, 10, 37, 9, 30, 5, 40, 3, 30, 7, 38, 10, 31, 4, 44, 5, 10, 11, 5, 7, 29, 11, 19, 11, 23, 11, 26, 16, 18, 5, 14]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [7, 8, 7, 6, 9, 11, 8, 12, 5, 6, 4, 4, 3, 9, 16, 4, 6, 9, 5, 8, 9, 11, 4, 12, 6, 4, 9, 8, 4, 8, 10, 33, 11, 5, 6, 6, 163, 40, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [11, 35, 16, 13, 21, 8, 34, 10, 18, 38, 15, 45, 14, 40, 7, 47, 12, 326, 4, 45, 8, 37, 8, 47, 6, 22, 5, 6, 4, 43, 20, 28, 20, 35, 15, 22, 8, 21, 10, 20]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [12, 22, 10, 11, 15, 11, 26, 6, 5, 27, 11, 36, 11, 27, 11, 35, 12, 8, 39, 40, 27, 12, 35, 4, 25, 11, 2, 24, 13, 16, 253, 50, 15, 6, 21, 10, 16, 13]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [27, 21, 3, 8, 2, 10, 26, 8, 37, 9, 31, 7, 23, 13, 31, 11, 23, 9, 12, 23, 10, 33, 9, 10, 9, 7, 24, 11, 18, 22, 16, 22, 10, 10, 18, 26, 2, 17]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [12, 22, 4, 14, 24, 13, 8, 28, 13, 36, 12, 27, 14, 35, 11, 28, 9, 36, 11, 27, 13, 35, 10, 9, 13, 11, 10, 17, 22, 17, 42, 33, 25, 19, 9, 14, 34]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [7, 22, 4, 7, 6, 5, 6, 24, 8, 6, 25, 7, 33, 7, 24, 5, 33, 6, 33, 50, 34, 6, 25, 132, 32, 10, 5, 10, 6, 24, 7, 16, 3, 18, 5, 5, 47, 6, 17, 6, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [4, 22, 5, 5, 13, 21, 14, 4, 24, 19, 25, 3, 33, 5, 24, 33, 5, 32, 13, 24, 6, 34, 5, 3, 5, 7, 26, 14, 17, 41, 5, 12, 25, 18, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [6, 24, 11, 17, 15, 13, 25, 5, 2, 21, 25, 33, 5, 27, 92, 35, 26, 15, 33, 19, 25, 9, 11, 36, 15, 26, 21, 17, 23, 19, 57, 24, 18, 16, 24, 19, 16]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [67, 25, 5, 7, 5, 5, 9, 6, 3, 29, 3, 37, 6, 29, 32, 37, 4, 32, 5, 4, 29, 6, 42, 4, 9, 4, 3, 24, 7, 13, 6, 6, 6, 5, 116, 6, 129, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [21, 9, 13, 9, 13, 21, 6, 8, 7, 8, 10, 3, 11, 11, 3, 8, 6, 10, 11, 7, 21, 14, 11, 18, 17, 16, 15, 7, 12, 13, 24, 10, 6, 8, 9, 11, 13, 14]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [16, 25, 3, 4, 5, 4, 7, 3, 105, 4, 25, 11, 33, 5, 5, 33, 3, 18, 4, 5, 35, 4, 10, 5, 5, 3, 15, 6, 29, 7, 96, 20, 4, 5, 4, 29, 4, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [3, 4, 6, 5, 7, 3, 6, 4, 5, 5, 9, 5, 5, 4, 7, 3, 4, 4, 5, 4, 7, 8, 6, 7, 3, 4, 5, 7, 5, 4, 10, 5, 9, 5, 7, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [20, 25, 7, 4, 8, 5, 5, 7, 4, 4, 30, 6, 38, 7, 32, 13, 38, 4, 30, 6, 38, 5, 33, 5, 51, 7, 6, 12, 4, 4, 6, 10, 5, 6, 4, 8, 3, 10, 11, 14]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [10, 22, 4, 7, 9, 8, 10, 26, 10, 26, 6, 39, 18, 26, 67, 36, 7, 27, 9, 34, 20, 27, 10, 34, 9, 6, 6, 9, 9, 3, 58, 25, 18, 44, 124, 109, 6, 19, 25, 36]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [8, 22, 8, 7, 9, 68, 8, 22, 25, 13, 34, 8, 13, 9, 36, 14, 13, 13, 33, 14, 25, 12, 32, 15, 146, 13, 10, 13, 72, 19, 23, 8, 15, 48, 13, 14, 8, 25, 10, 13]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [33, 21, 7, 7, 6, 6, 9, 29, 6, 24, 7, 31, 8, 25, 9, 32, 8, 24, 8, 32, 7, 27, 7, 31, 16, 7, 25, 7, 8, 7, 22, 6, 7, 7, 6, 22, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [6, 192, 13, 13, 13, 14, 10, 8, 179, 30, 9, 38, 13, 30, 5, 38, 13, 30, 12, 38, 3, 48, 13, 20, 5, 5, 6, 13, 13, 6, 13, 14, 7, 13]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [17, 3, 12, 15, 6, 13, 14, 5, 12, 6, 12, 67, 13, 4, 6, 6, 15, 14, 14, 7, 6, 8, 6, 18, 7, 14, 20, 14, 15, 5, 7, 10, 7, 15, 6, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [4, 19, 4, 4, 37, 3, 5, 6, 5, 26, 4, 33, 4, 7, 6, 32, 5, 7, 33, 6, 23, 6, 31, 4, 6, 3, 5, 5, 6, 22, 9, 6, 3, 7, 5, 22, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [8, 11, 25, 9, 8, 109, 12, 10, 6, 9, 22, 5, 22, 12, 5, 9, 18, 8, 13, 34, 25, 9, 9, 6, 8, 7, 11, 14, 10, 17, 9, 9, 24, 7, 7, 8, 23, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [5, 24, 6, 8, 4, 11, 4, 5, 8, 4, 175, 10, 29, 5, 38, 7, 29, 5, 37, 7, 29, 38, 10, 29, 8, 37, 13, 4, 13, 5, 24, 5, 16, 4, 5, 5, 10, 24, 3, 12, 6, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [3, 9, 9, 9, 11, 9, 8, 10, 3, 7, 9, 10, 4, 4, 7, 8, 8, 7, 51, 6, 8, 4, 14, 7, 7, 4, 10, 11, 6, 61, 9, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [6, 3, 3, 7, 11, 14, 10, 9, 9, 7, 4, 7, 10, 9, 9, 7, 10, 8, 8, 10, 7, 11, 9, 11, 6, 4, 8, 10, 7, 7, 4, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [8, 6, 5, 2, 5, 4, 4, 4, 6, 5, 3, 4, 4, 4, 3, 6, 5, 8, 3, 6, 4, 7, 4, 6, 5, 4, 6, 6, 4, 6, 6, 3, 6, 7, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [4, 22, 3, 8, 4, 26, 7, 57, 10, 36, 8, 7, 7, 33, 5, 7, 35, 74, 8, 33, 10, 8, 11, 3, 8, 24, 32, 16, 27, 16, 8, 25, 33, 18, 36, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [3, 9, 9, 11, 11, 10, 10, 12, 10, 13, 10, 4, 3, 10, 12, 14, 11, 10, 13, 5, 11, 11, 9, 10, 13, 12, 13, 10, 9, 9, 10, 13, 16, 10, 12, 10, 11, 15, 11, 11, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [49, 26, 4, 8, 5, 8, 7, 26, 8, 30, 8, 37, 8, 30, 8, 37, 31, 39, 8, 30, 27, 8, 32, 24, 19, 12, 18, 43, 35, 26, 26, 18, 13, 3, 40]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [49, 22, 11, 11, 11, 11, 14, 10, 11, 44, 27, 4, 35, 11, 29, 18, 36, 11, 11, 10, 30, 12, 39, 12, 11, 15, 12, 16, 17, 11, 22, 11, 157, 86, 3, 50, 23, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [5, 21, 5, 11, 9, 6, 4, 18, 4, 3, 25, 8, 34, 7, 26, 6, 33, 5, 26, 17, 6, 4, 33, 15, 5, 4, 11, 3, 30, 7, 27, 15, 5, 5, 8, 58, 11, 9]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [20, 12, 7, 6, 6, 9, 11, 9, 9, 9, 8, 9, 8, 10, 17, 8, 9, 8, 12, 14, 11, 8, 8, 10, 7, 3, 7, 14, 7, 10, 8, 15, 8, 12, 7, 7, 9, 9, 6, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [37, 24, 3, 22, 25, 20, 23, 24, 41, 27, 29, 23, 36, 24, 19, 6, 35, 5, 19, 60, 35, 22, 29, 9, 11, 18, 19, 6, 75, 21, 24, 21, 19, 22, 10, 21, 19]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [10, 21, 5, 8, 5, 4, 7, 25, 5, 34, 4, 25, 4, 33, 19, 4, 34, 12, 14, 33, 7, 54, 8, 5, 9, 3, 5, 25, 3, 5, 5, 5, 63, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [6, 23, 8, 4, 66, 7, 9, 6, 5, 24, 7, 33, 6, 5, 7, 32, 5, 5, 10, 31, 7, 24, 6, 77, 98, 7, 9, 8, 24, 26, 4, 6, 6, 10, 17, 25, 8, 5]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [36, 21, 7, 7, 13, 7, 9, 4, 11, 24, 4, 73, 9, 5, 81, 31, 17, 13, 8, 32, 32, 9, 32, 7, 9, 8, 9, 7, 9, 22, 9, 8, 8, 8, 22, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [2, 26, 11, 6, 35, 8, 16, 8, 27, 47, 36, 56, 9, 44, 36, 53, 8, 44, 35, 54, 34, 44, 37, 55, 9, 12, 9, 9, 11, 21, 14, 36, 28, 23, 9, 12, 43, 30, 26, 34]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [36, 24, 12, 11, 13, 12, 14, 23, 95, 33, 31, 25, 32, 10, 41, 10, 24, 10, 22, 13, 205]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [8, 15, 12, 12, 12, 21, 14, 17, 12, 9, 13, 12, 13, 8, 13, 31, 12, 12, 17, 22, 29, 13, 295, 13, 14, 23, 29, 30, 347, 17, 22, 25, 15, 22, 14]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [2, 23, 27, 23, 26, 24, 22, 24, 26, 32, 19, 28, 34, 22, 34, 25, 26, 27, 17, 23, 33, 193, 28, 25, 23, 25, 26, 33, 27, 26, 265, 25, 23, 26, 24, 24, 50, 22, 21]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [3, 31, 20, 20, 21, 20, 22, 20, 55, 19, 19, 21, 4, 20, 19, 25, 20, 21, 20, 20, 20, 20, 19, 20, 20, 21, 21, 21, 36, 32, 19, 24, 35, 20]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [4, 28, 96, 30, 30, 44, 29, 31, 28, 27, 29, 28, 27, 26, 25, 28, 27, 30, 30, 29, 29, 29, 41, 27, 31, 28, 29, 30, 29, 29, 33, 26, 25, 29, 27, 26, 28, 29, 31, 30]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [5, 4, 2, 3, 3, 7, 4, 4, 6, 4, 3, 6, 6, 4, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [27, 24, 3, 28, 28, 27, 5, 28, 26, 26, 5, 4, 3, 29, 126, 86, 28, 41, 26, 26, 26, 26, 28, 31, 26, 32, 6, 26, 27, 28]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [40, 12, 9, 9, 12, 10, 11, 4, 23, 38, 12, 14, 8, 11, 9, 45, 10, 11, 7, 10, 9, 11, 13, 10, 12, 11, 15, 10, 26, 14, 27, 11, 7, 3, 10, 33, 9, 12, 13, 10]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [25, 63, 8, 24, 9, 35, 9, 3, 10, 18, 10, 27, 7, 9, 9, 125, 27, 7, 7, 14, 10, 4, 7, 9, 20, 28, 11, 10, 11, 8, 29, 75]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [8, 10, 3, 28, 6, 27, 8, 10, 6, 4, 26, 29, 27, 8, 27, 4, 7, 5, 31, 28, 30, 34]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [13, 20, 15, 43, 12, 2, 53, 12, 19, 12, 24, 14, 16, 13, 54, 13, 62, 46, 35, 15, 15, 15, 46, 64, 21, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [9, 4, 5, 4, 4, 41, 4, 6, 8, 8, 4, 4, 7, 4, 4, 5, 5, 5, 6, 6, 8, 5, 6, 9, 10, 6, 8, 5, 5, 10, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [5, 14, 10, 14, 16, 14, 29, 12, 13, 12, 17, 16, 13, 246, 12, 14, 12, 13, 12, 18, 46, 13, 9, 15, 13, 19, 13, 16, 13, 44, 14, 12, 14]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [8, 9, 6, 12, 21, 8, 8, 13, 15, 8, 6, 6, 8, 9, 7, 13, 7, 7, 9, 6, 14, 30, 10, 9, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [17, 13, 14, 13, 17, 16, 13, 16, 18, 14, 15, 14, 41, 16, 13, 121, 13, 15, 14, 22, 16, 13, 12, 14, 17, 15, 16, 104, 19, 13, 163, 18]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [9, 30, 10, 28, 30, 30, 31, 29, 28, 11, 28, 11, 10, 58, 31, 11, 30, 53, 41, 34, 93, 29, 33, 31, 29, 15, 108, 24, 30, 32]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [7, 24, 7, 4, 5, 3, 4, 8, 6, 9, 55, 4, 4, 6, 36, 3, 4, 5, 91, 3, 4, 4, 54, 4, 3, 6, 3, 7, 35, 4, 27, 7, 4, 3, 6, 7, 8, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [4, 25, 4, 5, 4, 8, 3, 4, 4, 3, 32, 4, 39, 7, 31, 5, 40, 4, 31, 4, 43, 12, 32, 4, 44, 5, 16, 4, 4, 21, 39, 26, 4, 13, 5, 3, 10, 11, 26, 5, 11, 5, 4]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [8, 6, 5, 4, 4, 8, 6, 6, 6, 20, 11, 5, 5, 5, 7, 4, 5, 18, 21, 5, 11, 5, 8, 4, 20, 11, 6, 5, 32, 5, 7, 6, 5, 6, 4, 14]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [8, 8, 11, 6, 8, 7, 6, 301, 6, 8, 7, 9, 10, 6, 6, 6, 15, 6, 18, 92, 9, 10, 62]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [14, 17, 13, 13, 126, 13, 71, 13, 13, 15, 13, 13, 14, 155, 13, 14, 14, 14, 13, 14, 21, 14, 13, 13, 15, 13, 15, 15, 15, 14, 14, 13, 14, 13]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [6, 6, 9, 6, 6, 6, 16, 26, 6, 6, 12, 112, 10, 6, 4, 7, 7, 8, 7, 7, 9, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [3, 8, 10, 8, 8, 8, 8, 8, 7, 9, 14, 9, 11, 19, 8, 9, 69, 11, 12, 28, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [7, 5, 5, 5, 4, 5, 4, 8, 5, 5, 4, 6, 6, 5, 5, 5, 4, 5, 4, 16, 4, 4, 6, 13, 17, 5, 3, 6, 36, 6, 4, 4, 5, 4, 4, 4]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [5, 8, 6, 7, 34, 8, 7, 15, 6, 45, 3, 11, 4, 13, 6, 16, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [5, 20, 5, 15, 6, 6, 11, 200, 25, 7, 6, 25, 3, 7, 7, 24, 6, 4, 8, 26, 7, 4, 6, 8, 4, 6, 9, 31, 8, 23, 7, 4, 10, 7, 3, 23, 6, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 8, 6, 8, 14, 7, 9, 4, 31, 10, 8, 105, 6, 3, 7, 8, 6, 6, 9, 9, 7, 9, 10, 5, 143, 19]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [6, 7, 11, 7, 13, 5, 56, 7, 20, 18, 20, 59, 4, 12, 7, 121, 24, 8, 18, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [7, 6, 6, 6, 6, 10, 9, 7, 7, 8, 7, 6, 10, 19, 5, 6, 7, 6, 6, 11, 10, 9, 73, 6, 43, 7]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [4, 22, 28, 6, 29, 7, 29, 6, 29, 29, 4, 6, 29, 29, 28, 6, 28, 7, 10, 6, 27, 28, 7, 33, 31, 11, 212]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [5, 7, 9, 6, 7, 4, 6, 5, 9, 7, 3, 7, 8, 8, 6, 5, 6, 6, 3, 7, 6, 5, 5, 7, 7, 13, 7, 15, 5, 6, 6, 4, 8, 4, 6, 9, 10, 6]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [4, 9, 8, 5, 8, 8, 8, 6, 5, 9, 15, 158]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [5, 4, 201, 120, 5, 8, 15]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [4, 4, 3, 4, 5]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [8, 8, 7, 7, 7, 8, 6, 10, 8, 6, 4, 24, 8, 12, 7, 7, 6, 6, 8, 7, 10, 6, 195, 6, 5, 10, 12, 7, 9]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [8, 25, 5, 3, 3, 10, 5, 9, 10, 9, 5, 38, 9, 6, 5, 38, 5, 7, 8, 37, 3, 5, 4, 37, 4, 3, 5, 7, 4, 13, 34, 26, 26, 80, 4, 25, 148, 18]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [10, 8, 6, 5, 4, 10, 13, 8, 8, 7, 6, 4, 9, 10, 11, 10, 15, 11, 7, 9, 11, 8, 10, 7, 13, 8, 5, 9, 6, 7, 10, 9, 31, 11, 7, 8, 9, 7, 15]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
termination = MathOptInterface.INFEASIBLE
objective_value = 0.5613828523164937
