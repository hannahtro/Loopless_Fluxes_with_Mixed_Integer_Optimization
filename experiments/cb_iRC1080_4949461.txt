┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 44
max_cuts = 33
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6]
length(C_list) = 30
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [8, 9, 3, 8, 4, 2, 3, 12, 2, 8, 4, 3, 6, 7, 161, 3, 5, 5, 6, 3, 4, 3, 8, 4, 7, 4, 8, 6, 8, 3, 8]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [9, 4, 4, 4, 5, 5, 8, 3, 4, 8, 4, 3, 3, 7, 5, 5, 6, 3, 4, 4, 4, 4, 5, 5, 8, 4, 3, 3, 127, 10, 43, 7, 4, 21, 3]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [5, 3, 3, 3, 3, 5, 3, 5, 4, 8, 7, 9, 7, 3, 5, 4, 4, 3, 3, 5, 4, 6, 3, 4, 5, 7, 4, 8, 8, 8, 12]
length(C_list) = 31
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [13, 6, 3, 4, 3, 4, 4, 7, 6, 4, 3, 3, 5, 6, 8, 6, 7, 5, 5, 4, 3, 4, 5, 6, 4, 5, 6, 3, 6, 5, 7, 5, 5, 5, 5]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 3, 7, 3, 7, 7, 6, 3, 12, 7, 14, 3, 4, 8, 10, 7, 7, 9, 7, 22]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 4, 8, 3, 3, 4, 4, 3, 8, 5, 11, 6, 4, 9, 3, 9, 5, 3, 7, 19, 4, 3, 7, 4, 3, 4, 4, 4, 4, 3, 3, 3, 4, 8, 7, 3]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [20, 8, 5, 228, 113, 25, 3, 192, 5, 7, 5, 19, 8, 5, 8, 21, 5, 10, 9, 8, 8, 8, 15, 4, 9, 5, 9, 8, 7, 4, 5, 16]
length(C_list) = 32
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [4, 3, 3, 4, 4, 4, 47, 4, 4, 4, 3, 4, 24, 4, 5, 5, 7, 5, 11, 5, 3, 5, 5, 4, 4, 57, 6]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [11, 7, 6, 3, 3, 4, 14, 6, 4, 8, 14, 6, 5, 8, 14, 5, 17, 8, 8]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [3, 3, 8, 9, 5, 3, 4, 3, 4, 6, 4, 4, 4, 4, 104, 4, 11, 153, 65, 4, 4, 8, 78, 5, 6, 7, 4, 4, 8, 7, 4, 9, 8, 4, 10]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [8, 5, 5, 3, 6, 3, 4, 6, 12, 7, 3, 3, 8, 7, 6, 5, 5, 3, 4, 5, 6, 4, 15, 6, 5, 2, 3, 4, 4, 4, 4, 3, 4, 13]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [33, 10, 4, 8, 11, 5, 9, 3, 11, 3, 205, 9, 145, 166, 34, 20, 12, 9, 10, 8, 20, 11, 9, 10, 55, 25, 10, 11, 3, 4, 9, 10, 4, 10]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [18, 20, 19, 13, 4, 19, 6, 6, 18, 19, 7, 23, 6, 19, 7, 17, 25, 24, 19, 5, 21, 13, 20, 18, 20, 18]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [3, 3, 3, 4, 8, 4, 19, 17, 6, 4, 3, 6, 6, 4, 149, 4, 5, 273, 4, 4]
length(C_list) = 20
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [9, 9, 3, 4, 4, 9, 3, 51, 8, 10, 9, 11, 4, 4, 3, 8, 5, 3, 9, 3, 4, 3, 3, 8, 4, 3, 10]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [16, 10, 6, 8, 16, 8, 7, 6, 13, 9, 7, 4, 8, 9, 9, 6, 10, 15, 6, 7, 15, 6, 10, 20, 9, 20, 10, 9, 10]
length(C_list) = 29
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 5, 3, 7, 6, 8, 4, 10, 3, 8, 5, 3, 3, 3, 3, 4, 3, 3, 3, 5, 6, 5, 8, 9, 7, 11, 5, 3]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [3, 3, 4, 37, 3, 3, 3, 4, 4, 18, 12, 8]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [3, 4, 4, 3, 231, 9, 10, 3, 14, 7, 3, 7, 3, 54, 3, 13, 5, 4, 4, 5, 4, 5, 3, 9, 4, 4, 5, 8, 7]
length(C_list) = 29
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 4, 3, 4, 6, 7, 4, 9, 5, 5, 3, 3, 4, 3, 5, 26, 5, 3, 3, 3, 3, 72, 9, 3, 5, 6, 6, 4, 3, 4]
length(C_list) = 32
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [3, 14, 3, 12, 7, 21, 5, 3, 22, 8, 4, 14, 3, 13, 5, 4, 17, 5, 11, 5, 16, 5, 18, 10, 6, 18]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [3, 9, 10, 8, 5, 4, 4, 5, 9, 4, 8, 13, 8, 11, 5, 12, 5, 9, 10, 8, 9, 9]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [3, 4, 9, 9, 4, 9, 3, 3, 3, 18, 4, 10, 8, 4, 10, 17, 8, 9, 12, 9, 15, 10, 4, 18, 13, 12]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [5, 3, 6, 4, 4, 3, 3, 4, 24, 8, 3, 5, 6, 8, 5, 5, 4, 5, 225, 25]
length(C_list) = 20
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 11, 7, 7, 8, 5, 12, 7]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [8, 4, 3, 7, 7, 5, 9, 30]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [8, 9, 6, 85, 3, 7, 3, 4, 9, 7, 7, 7, 5, 9, 7, 4, 23, 4, 8, 7, 7, 18, 12, 16, 69, 16, 8]
length(C_list) = 27
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [9, 8, 8, 10, 8, 9, 8, 14, 15, 47, 14, 8, 21, 3, 22, 14, 20, 14, 19, 8, 39, 22, 25, 9, 36, 52, 36, 13, 8, 18]
length(C_list) = 30
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [21, 15, 22, 3, 20, 4, 7, 3, 4, 16, 22, 3, 14, 47, 7, 3, 34, 7, 3]
length(C_list) = 19
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [9, 10, 9, 5, 8, 3, 9, 8, 4, 11, 9, 4, 4, 7, 9, 7, 20, 9, 10, 9, 8, 9, 9, 6]
length(C_list) = 24
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [7, 4, 6, 6, 4, 7, 4, 8, 8, 15, 5, 8, 6, 6, 5, 4, 5, 17, 17, 6, 7, 5, 321, 116, 10, 7, 7, 6, 7]
length(C_list) = 29
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [22, 14, 10, 11, 14, 14, 8, 18, 21, 18, 9, 19, 25, 9, 7, 9, 9, 9, 25, 18, 10, 16, 11, 12, 15, 9, 17, 16, 10, 18, 53, 23]
length(C_list) = 32
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [19, 18, 7, 14, 19, 17, 27, 17, 3, 18, 41, 28, 13, 15, 18, 15, 14, 17, 20, 14, 20]
length(C_list) = 21
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 7, 5, 4, 6, 4]
length(C_list) = 17
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [9, 7, 7, 8, 8, 8, 213, 10]
length(C_list) = 8
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 36
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
