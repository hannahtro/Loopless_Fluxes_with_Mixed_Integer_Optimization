ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iJN746
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iJN746
----------------------------------
number of metabolites : 907
number of reactions : 1054
number of genes : 746

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 5
(indicator, big_m) = (false, true)
BIG M ADDED
model with 1054 flux variables and 2001 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 4, 4, 137, 3]
length(C_list) = 4
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 2, 3, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [25, 10, 6, 7]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [11]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [8, 3, 6]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [2, 6, 6, 7, 5]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [6, 5, 6]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [7, 6, 3]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [2, 6, 5]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [14, 6, 11, 7, 7]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [10, 10, 9, 8, 19, 7]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [16, 6, 11, 5, 9]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [16, 9, 12, 11, 70, 3]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [10, 10, 4, 5]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [32, 9, 9, 14, 13, 12]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [7, 5, 10, 9]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [12, 10, 12, 7, 48, 14]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [24, 33, 27, 29, 306, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [2, 11, 110, 37]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [2, 9]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [2, 23, 14, 12, 21]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [2, 7, 6, 6, 9, 9]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [5]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [21]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [25]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [14]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [8, 6, 7]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [46, 50, 36]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [3, 4, 66, 30, 6, 19]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [8, 8, 8, 5]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [20, 21, 20, 20, 17]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [9, 12, 13, 16, 28]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [3, 6, 5, 6, 18]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [9, 6, 4, 5]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [11, 9, 8, 12, 133, 8]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [10, 6, 29, 11, 9]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [11, 6]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [20, 16, 22]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [10, 11, 13, 12]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [3, 25, 29, 22, 28, 31]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [13, 29, 11]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [17, 11, 9, 10, 10]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [7, 10, 11, 11, 14]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [23, 20]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [15, 9, 10]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [8]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [10, 8, 139, 9, 9, 8]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [14, 16, 10, 6]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [10, 10, 6, 5, 9]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [3, 9]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [6, 235, 7, 6]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [10, 10, 9, 10, 9, 9]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [16, 18, 17, 17]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [28, 8, 123, 6, 9, 7]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [24, 27, 29, 24, 118, 7]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [47, 3, 16]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [17, 3]
length(C_list) = 1
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [20, 21, 21, 22, 176, 171]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
termination_master = MathOptInterface.TIME_LIMIT
BoundsError((missing, Any[1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000001846271, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001], Any[1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.4000000000000001, 1.3999999999999997, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000001846271, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001, 1.4000000000000001], missing, missing, missing, missing, missing, 1800.0191369056702, MathOptInterface.INFEASIBLE, 58, Any[(Any[84, 311, 404], Any[86, 312], 5), (Any[293, 299, 618], Any[290], 4), (Any[435, 457], Any[158, 430], 4), (Any[435, 457], Any[430], 3), (Any[278, 758], Any[], 2), (Any[99], Any[100], 2), (Any[430], Any[435, 457], 3), (Any[187, 891], Any[897], 3), (Any[171, 180, 192, 513, 688, 703, 765, 769, 782, 810, 821, 823, 863, 929, 930], Any[99, 187, 189, 341, 400, 512, 536, 749, 804, 925], 25), (Any[171, 782, 792, 810, 821, 823], Any[99, 189, 749, 804], 10), (Any[171, 387, 401, 782], Any[99, 189], 6), (Any[171, 344, 368, 782], Any[99, 189, 367], 7), (Any[33, 171, 406, 428, 597, 749, 782, 795, 829], Any[99, 189], 11), (Any[290], Any[293, 299], 3), (Any[280, 759], Any[], 2), (Any[821, 823], Any[33, 749, 804], 5), (Any[694], Any[33, 697, 792, 810], 5), (Any[400, 405], Any[401], 3), (Any[281, 761], Any[], 2), (Any[86, 312], Any[84, 311, 404], 5), (Any[171, 180, 192, 513, 782, 863, 929, 930], Any[99, 187, 189, 512, 536, 864], 14), (Any[441, 471, 663], Any[406, 428, 597], 6), (Any[389, 441, 471, 494, 663, 702, 905], Any[406, 428, 587, 597], 11), (Any[126, 441, 471, 663], Any[406, 428, 597], 7), (Any[441, 471, 663, 942], Any[406, 428, 597], 7), (Any[171, 174, 430, 523, 545, 782], Any[99, 189, 277, 435], 10), (Any[171, 430, 570, 607, 686, 782, 792], Any[99, 189, 435], 10), (Any[171, 183, 457, 782], Any[99, 165, 182, 189, 401], 9), (Any[171, 183, 457, 782], Any[99, 182, 189, 401], 8), (Any[171, 183, 204, 430, 494, 545, 702, 766, 782], Any[99, 140, 182, 189, 264, 335, 401, 435, 575, 913], 19), (Any[33, 171, 782, 792, 810], Any[99, 189], 7), (Any[694], Any[457, 607, 686, 697], 5), (Any[897], Any[187, 891], 3), (Any[797], Any[457, 686, 792], 4), (Any[435, 797], Any[430, 686, 792], 5), (Any[33, 37, 107, 125, 133, 134, 159, 178, 182, 345, 396, 525, 619, 650, 787, 795, 874, 876, 904, 910, 915], Any[64, 73, 74, 158, 303, 400, 406, 428, 597, 714, 829], 32), (Any[37, 107, 240, 269], Any[401, 406, 428, 597, 829], 9), (Any[37, 107, 140, 784], Any[406, 428, 597, 777, 829], 9), (Any[37, 107, 144, 182, 240, 269, 607, 618, 686], Any[183, 406, 428, 597, 829], 14), (Any[33, 37, 107, 142, 144, 618, 795], Any[400, 405, 406, 428, 597, 829], 13), (Any[37, 107, 182, 240, 269, 607, 686], Any[183, 406, 428, 597, 829], 12), (Any[694, 777], Any[140, 697, 784], 5), (Any[37, 107, 668, 795, 799, 821, 823, 879], Any[406, 428, 597, 829], 12), (Any[37, 107, 795, 821, 823], Any[406, 428, 597, 804, 829], 10), (Any[367, 500, 523, 668, 745, 795, 799, 821, 823, 879], Any[344, 368], 12), (Any[33, 607, 777, 797, 810], Any[140, 784], 7), (Any[48, 171, 233, 298, 367, 418, 425, 426, 431, 500, 511, 513, 523, 525, 550, 568, 602, 668, 713, 755, 770, 795, 799, 801, 810, 821, 823, 879, 928, 930, 944], Any[74, 139, 158, 210, 341, 344, 368, 391, 400, 437, 567, 703, 792, 829, 925, 932, 933], 48), (Any[33, 37, 107, 425, 426, 618, 770, 795, 801], Any[74, 406, 428, 597, 829], 14), (Any[86, 138, 159, 171, 358, 359, 372, 394, 429, 608, 666, 782, 881, 910], Any[73, 74, 99, 125, 189, 714, 787, 874, 876, 904], 24), (Any[6, 16, 33, 39, 48, 49, 182, 319, 345, 378, 398, 405, 441, 457, 471, 525, 587, 589, 607, 686, 782], Any[99, 158, 183, 189, 406, 425, 426, 428, 597, 792, 801, 925], 33), (Any[16, 33, 39, 49, 127, 133, 134, 182, 345, 405, 441, 471, 525, 589, 607, 686, 782], Any[158, 183, 368, 406, 425, 426, 428, 597, 801, 925], 27), (Any[16, 33, 39, 49, 127, 133, 134, 182, 345, 398, 405, 441, 471, 525, 589, 607, 686, 799], Any[158, 183, 406, 425, 426, 428, 597, 801, 823, 879, 925], 29), (Any[2, 4, 6, 8, 9, 10, 11, 12, 15, 16, 17, 19, 24, 33, 39, 40, 45, 48, 49, 51, 58, 59, 61, 62, 65, 67, 70, 71, 77, 78, 81, 86, 94, 103, 104, 106, 108, 110, 124, 127, 129, 133, 134, 136, 138, 144, 145, 148, 149, 159, 164, 168, 180, 182, 186, 188, 190, 191, 194, 204, 205, 207, 209, 214, 215, 217, 228, 239, 242, 253, 256, 258, 263, 265, 266, 272, 282, 291, 296, 297, 300, 302, 304, 309, 310, 311, 313, 314, 316, 318, 320, 322, 323, 324, 333, 334, 337, 340, 345, 354, 358, 359, 361, 365, 367, 371, 372, 374, 375, 380, 381, 394, 398, 399, 402, 405, 407, 408, 415, 427, 429, 432, 440, 441, 453, 454, 455, 459, 462, 470, 471, 472, 473, 474, 475, 476, 484, 487, 489, 493, 494, 500, 506, 512, 514, 524, 525, 529, 533, 535, 536, 537, 538, 545, 559, 560, 566, 568, 569, 589, 602, 607, 608, 609, 611, 616, 619, 620, 624, 625, 627, 628, 633, 634, 638, 639, 643, 648, 652, 664, 670, 671, 686, 692, 693, 695, 698, 700, 702, 711, 721, 725, 726, 729, 731, 732, 733, 735, 743, 756, 770, 777, 780, 782, 806, 807, 809, 819, 820, 822, 824, 825, 829, 849, 850, 851, 863, 865, 878, 880, 881, 882, 910, 914, 926, 929, 936, 942, 943], Any[83, 125, 131, 139, 158, 183, 189, 192, 206, 240, 287, 312, 325, 357, 368, 396, 406, 422, 425, 426, 428, 437, 445, 468, 483, 491, 511, 542, 570, 571, 592, 594, 597, 601, 610, 626, 658, 659, 665, 676, 677, 678, 680, 690, 705, 707, 718, 723, 768, 784, 792, 801, 811, 832, 842, 844, 845, 847, 853, 854, 855, 859, 860, 861, 862, 864, 867, 891, 897, 905, 906, 908, 909, 921, 925, 934, 939], 306), (Any[171, 694, 782], Any[99, 189, 697], 6), (Any[285, 767], Any[], 2), (Any[275, 753], Any[], 2), (Any[276, 757], Any[], 2), (Any[283, 766], Any[], 2), (Any[171, 181, 279], Any[99, 650], 5), (Any[16, 39, 49, 345, 441, 471, 525, 589, 612, 618, 747, 795, 821, 823, 829], Any[140, 158, 400, 745, 804, 925], 21), (Any[125, 133, 134, 178, 182, 345, 525, 619, 650, 746, 787, 874, 876, 904, 915], Any[37, 64, 107, 140, 158, 303, 400, 745, 749, 925], 25), (Any[127, 133, 134, 341, 345, 525, 795], Any[158, 688, 703, 765, 769, 810, 864], 14), (Any[171, 668, 749, 799, 804, 879], Any[6, 99], 8), (Any[668, 799, 804, 879], Any[37, 107], 6), (Any[668, 799, 804, 879], Any[37, 107, 181], 7), (Any[33, 93, 125, 133, 134, 178, 182, 345, 357, 360, 362, 389, 399, 418, 453, 525, 616, 619, 650, 698, 777, 787, 795, 855, 874, 876, 904, 915, 921, 934, 935, 944], Any[64, 73, 74, 140, 158, 303, 400, 419, 445, 610, 690, 714, 784, 857], 46), (Any[93, 125, 133, 134, 178, 182, 345, 357, 360, 362, 388, 389, 399, 405, 418, 453, 525, 616, 619, 650, 698, 777, 787, 795, 855, 874, 876, 904, 915, 921, 934, 935], Any[64, 140, 158, 159, 303, 396, 401, 419, 445, 507, 607, 610, 690, 784, 797, 810, 857, 910], 50), (Any[33, 93, 127, 133, 134, 345, 357, 360, 362, 387, 389, 399, 405, 418, 453, 525, 616, 698, 777, 795, 855, 921, 934, 935, 944], Any[140, 158, 159, 396, 419, 445, 610, 690, 784, 857, 910], 36), (Any[361], Any[360, 362], 3), (Any[361], Any[360, 362, 428], 4), (Any[694, 792], Any[607, 697, 797], 5), (Any[16, 39, 49, 127, 133, 134, 345, 441, 471, 525, 589], Any[158, 400, 406, 425, 426, 428, 597, 801, 925], 20), (Any[16, 37, 39, 49, 107, 345, 405, 441, 471, 525, 589, 749], Any[158, 401, 406, 425, 426, 428, 597, 801, 925], 21), (Any[16, 39, 49, 142, 144, 345, 441, 471, 525, 589], Any[158, 400, 401, 406, 425, 426, 428, 597, 801, 925], 20), (Any[16, 39, 49, 142, 144, 345, 405, 441, 471, 525, 589], Any[158, 401, 406, 425, 426, 428, 597, 801, 925], 20), (Any[16, 39, 49, 142, 144, 345, 405, 525, 589], Any[158, 401, 417, 425, 426, 663, 801, 925], 17), (Any[171, 180, 192, 863, 897], Any[99, 187, 864, 894], 9), (Any[152, 341, 345, 525, 607, 797], Any[158, 688, 703, 765, 769, 864], 12), (Any[152, 341, 345, 525, 607, 615, 797], Any[158, 688, 703, 765, 769, 864], 13), (Any[152, 196, 293, 341, 345, 525, 607, 795, 797], Any[158, 688, 703, 765, 769, 784, 864], 16), (Any[107, 144, 146, 152, 171, 341, 345, 387, 427, 523, 525, 607, 666, 749, 797], Any[6, 100, 158, 358, 359, 394, 688, 703, 765, 769, 784, 864, 925], 28), (Any[388], Any[507, 944], 3), (Any[182, 240, 269], Any[183, 457], 5), (Any[457, 686, 792], Any[797], 4), (Any[457, 686, 792], Any[430, 797], 5), (Any[127, 133, 134, 171, 345, 525], Any[6, 99, 158, 400, 925], 11), (Any[37, 107, 777, 795, 821, 823], Any[140, 784, 804], 9), (Any[33, 37, 107, 200, 749, 795], Any[140, 196], 8), (Any[37, 107, 200, 362, 683, 795, 821, 823], Any[140, 196, 804, 944], 12), (Any[33, 37, 40, 48, 71, 72, 93, 107, 119, 123, 125, 129, 180, 200, 206, 217, 239, 274, 277, 286, 322, 334, 345, 350, 372, 384, 387, 389, 402, 409, 410, 413, 429, 430, 432, 454, 455, 472, 473, 475, 482, 484, 489, 514, 528, 538, 558, 566, 571, 601, 608, 625, 642, 643, 649, 666, 668, 670, 679, 686, 725, 726, 731, 732, 733, 735, 738, 743, 755, 778, 787, 795, 796, 799, 802, 805, 806, 821, 822, 823, 851, 864, 865, 871, 874, 876, 877, 880, 891, 904, 910], Any[100, 139, 140, 158, 184, 192, 196, 224, 295, 342, 343, 368, 396, 400, 419, 435, 437, 511, 512, 513, 536, 542, 545, 570, 626, 672, 673, 681, 706, 715, 717, 720, 791, 804, 830, 867, 913, 925, 928, 930, 944, 945], 133), (Any[33, 37, 107, 749, 777, 795], Any[140, 784], 8), (Any[425, 426, 618, 777, 795, 801], Any[140, 784, 792, 810], 10), (Any[240, 269, 777], Any[140, 401, 784], 6), (Any[345, 375, 425, 426, 494, 522, 528, 613, 618, 631, 702, 777, 795, 801, 922, 932, 940], Any[140, 406, 427, 437, 588, 607, 693, 695, 784, 797, 810, 905], 29), (Any[425, 426, 618, 777, 795, 801], Any[140, 607, 784, 797, 810], 11), (Any[33, 425, 426, 618, 777, 795, 801], Any[140, 784], 9), (Any[33, 668, 749, 795, 799, 804, 879], Any[406, 428, 597, 829], 11), (Any[33, 749, 804, 893], Any[821, 823], 6), (Any[6, 16, 33, 39, 49, 441, 471, 589, 607, 782, 797, 810], Any[152, 189, 406, 425, 426, 428, 597, 801], 20), (Any[16, 39, 49, 127, 133, 134, 441, 471, 589], Any[152, 406, 425, 426, 428, 597, 801], 16), (Any[6, 16, 39, 49, 441, 471, 589, 668, 782, 795, 799, 821, 823, 879], Any[152, 189, 406, 425, 426, 428, 597, 801], 22), (Any[513, 782, 894, 929, 930], Any[187, 189, 512, 536, 891], 10), (Any[33, 435, 650, 782, 797, 810], Any[181, 189, 279, 430, 686], 11), (Any[33, 142, 144, 182, 435, 650, 782, 795], Any[181, 183, 189, 279, 430], 13), (Any[33, 142, 144, 182, 650, 782, 795], Any[181, 183, 189, 279, 457], 12), (Any[528], Any[525, 607], 3), (Any[6, 358, 359, 394, 666, 782], Any[189, 406, 428, 597, 749, 829, 925], 13), (Any[93, 357, 358, 359, 361, 367, 389, 394, 399, 418, 453, 616, 666, 698, 855, 921, 934, 935, 944], Any[159, 344, 368, 396, 419, 445, 610, 690, 857, 910], 29), (Any[6, 367, 782, 795, 821, 823], Any[189, 344, 368, 749, 804], 11), (Any[73, 74, 125, 714, 787, 874, 876, 904], Any[86, 138, 159, 372, 429, 608, 881, 910, 925], 17), (Any[37, 107, 171, 782, 795, 821, 823], Any[99, 189, 804, 843], 11), (Any[33, 37, 107, 171, 749, 782, 795], Any[100, 189], 9), (Any[37, 107, 171, 782, 795, 821, 823], Any[99, 189, 804], 10), (Any[37, 107, 171, 782, 795, 821, 823], Any[100, 189, 804], 10), (Any[6, 33, 171, 782, 795], Any[99, 189], 7), (Any[6, 782, 795, 821, 823], Any[37, 107, 189, 749, 804], 10), (Any[6, 650, 782, 795, 821, 823], Any[181, 189, 279, 749, 804], 11), (Any[6, 171, 782, 784, 795, 821, 823], Any[99, 189, 749, 804], 11), (Any[6, 335, 650, 782, 784, 795, 821, 823], Any[181, 189, 279, 498, 749, 804], 14), (Any[16, 39, 49, 341, 400, 435, 441, 471, 589, 618, 797, 925], Any[152, 406, 428, 430, 597, 686, 688, 703, 765, 769, 864], 23), (Any[16, 39, 49, 171, 435, 441, 471, 589, 618, 797, 810], Any[6, 99, 152, 406, 428, 430, 597, 686, 795], 20), (Any[33, 72, 127, 133, 134, 795], Any[152, 159, 358, 359, 394, 396, 666, 910, 915], 15), (Any[33, 127, 133, 134, 795], Any[152, 457, 607, 686], 9), (Any[33, 127, 133, 134, 367, 795], Any[152, 344, 368, 394], 10), (Any[171, 180, 192, 863, 891], Any[99, 864, 894], 8), (Any[127, 133, 134, 777, 795], Any[140, 152, 784, 792, 810], 10), (Any[142, 144, 795], Any[348, 401, 607, 797, 810], 8), (Any[9, 17, 25, 27, 31, 33, 39, 40, 49, 71, 124, 133, 134, 142, 144, 171, 174, 184, 205, 214, 217, 239, 258, 263, 265, 266, 272, 298, 323, 333, 337, 340, 346, 361, 366, 368, 371, 374, 375, 377, 378, 381, 385, 395, 398, 403, 408, 415, 431, 440, 463, 464, 470, 473, 495, 497, 522, 523, 524, 543, 554, 562, 613, 616, 620, 625, 631, 633, 642, 656, 664, 665, 669, 671, 706, 720, 738, 763, 777, 795, 806, 809, 830, 834, 850, 851, 853, 863, 899, 901, 914, 917, 926, 929, 933, 945], Any[28, 36, 100, 125, 126, 140, 152, 158, 165, 172, 246, 325, 347, 348, 357, 359, 394, 401, 404, 406, 427, 433, 445, 511, 595, 607, 617, 619, 626, 690, 696, 784, 787, 792, 842, 858, 874, 876, 904, 913, 925, 930, 932], 139), (Any[142, 144, 387, 777, 795], Any[140, 784, 792, 810], 9), (Any[142, 144, 777, 795], Any[140, 401, 784, 792, 810], 9), (Any[33, 142, 144, 387, 777, 795], Any[140, 784], 8), (Any[16, 39, 49, 367, 441, 471, 589, 618, 829], Any[37, 107, 152, 344, 368], 14), (Any[16, 39, 49, 367, 441, 471, 589, 618, 821], Any[37, 152, 344, 368, 406, 428, 597], 16), (Any[16, 39, 49, 367, 589, 618], Any[152, 344, 368, 663], 10), (Any[159, 396, 689, 763, 910], Any[922], 6), (Any[33, 792, 810], Any[607, 797], 5), (Any[360, 362], Any[361], 3), (Any[174, 523, 545], Any[277, 607, 686], 6), (Any[2, 4, 8, 9, 10, 11, 12, 15, 19, 22, 24, 45, 48, 51, 52, 53, 54, 58, 59, 61, 62, 65, 67, 70, 77, 78, 81, 86, 88, 93, 102, 103, 104, 106, 107, 112, 116, 121, 123, 128, 144, 146, 148, 150, 168, 171, 173, 174, 180, 185, 198, 202, 209, 214, 215, 217, 218, 221, 224, 225, 228, 240, 242, 253, 257, 258, 260, 261, 269, 282, 290, 300, 302, 309, 310, 312, 314, 316, 318, 320, 322, 323, 324, 337, 340, 345, 351, 354, 361, 374, 389, 399, 405, 408, 414, 418, 432, 435, 442, 448, 453, 473, 477, 484, 492, 493, 498, 503, 523, 524, 525, 526, 530, 538, 566, 567, 578, 609, 616, 638, 639, 642, 653, 661, 669, 670, 698, 701, 702, 738, 741, 750, 755, 763, 773, 782, 799, 802, 806, 807, 809, 810, 817, 834, 855, 881, 886, 889, 900, 906, 909, 915, 916, 926, 929, 935, 940, 944], Any[37, 50, 84, 91, 92, 125, 139, 158, 159, 189, 203, 216, 219, 231, 277, 287, 328, 332, 341, 366, 392, 393, 395, 396, 401, 419, 430, 445, 460, 478, 483, 491, 513, 517, 542, 570, 576, 583, 607, 610, 625, 659, 666, 686, 690, 696, 703, 706, 709, 720, 730, 768, 770, 787, 797, 832, 835, 836, 839, 842, 857, 865, 867, 869, 874, 876, 883, 891, 893, 894, 904, 910, 911, 913, 928, 930, 947], 235), (Any[240, 269, 387, 435], Any[430, 607, 686], 7), (Any[240, 269, 387], Any[457, 607, 686], 6), (Any[525, 668, 795, 799, 821, 823, 879], Any[457, 528, 686], 10), (Any[398, 425, 426, 618, 801], Any[406, 428, 597, 749, 829], 10), (Any[425, 426, 618, 801], Any[406, 428, 597, 749, 829], 9), (Any[425, 426, 506, 618, 801], Any[406, 428, 597, 749, 829], 10), (Any[33, 367, 425, 426, 618, 795, 801], Any[344, 368], 9), (Any[367, 668, 795, 799, 821, 823, 879], Any[344, 368], 9), (Any[6, 180, 192, 795, 821, 823, 863, 891], Any[406, 428, 597, 749, 804, 829, 864, 894], 16), (Any[6, 180, 192, 792, 810, 821, 823, 863, 891], Any[406, 428, 597, 682, 749, 804, 829, 864, 894], 18), (Any[6, 180, 192, 792, 810, 821, 823, 863, 891], Any[441, 471, 663, 749, 804, 829, 864, 894], 17), (Any[6, 180, 192, 792, 810, 821, 823, 863, 891], Any[406, 428, 597, 749, 804, 829, 864, 894], 17), (Any[93, 357, 361, 389, 399, 418, 453, 525, 616, 698, 792, 855, 915, 921, 925, 934, 935, 944], Any[73, 74, 419, 445, 528, 610, 690, 714, 797, 857], 28), (Any[171, 240, 269, 522, 782], Any[99, 189, 401], 8), (Any[39, 49, 91, 92, 116, 124, 142, 144, 148, 149, 164, 166, 167, 171, 209, 215, 245, 246, 258, 260, 271, 311, 314, 337, 350, 361, 375, 381, 399, 408, 409, 410, 411, 413, 422, 426, 432, 440, 441, 498, 499, 500, 515, 537, 538, 566, 576, 583, 595, 615, 640, 657, 664, 669, 670, 672, 673, 698, 743, 755, 763, 792, 796, 801, 818, 825, 834, 850, 851, 855, 870, 894, 915, 916, 921, 926, 929, 930, 934, 935], Any[6, 7, 14, 33, 72, 73, 74, 96, 99, 158, 192, 206, 248, 261, 325, 332, 401, 406, 423, 425, 427, 428, 449, 509, 512, 536, 571, 626, 674, 690, 693, 695, 700, 797, 803, 819, 820, 842, 857, 867, 891, 913, 928], 123), (Any[142, 144, 171], Any[6, 100, 401], 6), (Any[240, 269, 525, 792], Any[74, 165, 401, 528, 797], 9), (Any[171, 240, 269, 782], Any[99, 189, 401], 7), (Any[48, 171, 344, 432, 453, 511, 513, 525, 550, 568, 569, 652, 782, 915, 928, 930], Any[72, 99, 139, 158, 189, 400, 445, 925], 24), (Any[48, 171, 344, 432, 453, 511, 513, 550, 568, 569, 633, 652, 682, 928, 930], Any[139, 152, 159, 189, 345, 358, 359, 394, 396, 445, 666, 910], 27), (Any[8, 127, 132, 133, 134, 171, 398, 454, 473, 489, 500, 550, 602, 621, 652, 782, 864], Any[6, 20, 21, 35, 64, 100, 139, 152, 303, 372, 608, 801], 29), (Any[48, 171, 344, 432, 453, 511, 513, 550, 568, 569, 652, 928, 930], Any[139, 152, 159, 345, 358, 359, 394, 396, 445, 666, 910], 24), (Any[1, 3, 9, 10, 11, 13, 18, 23, 45, 51, 57, 58, 60, 66, 69, 78, 81, 103, 105, 120, 127, 132, 133, 134, 143, 149, 171, 174, 205, 211, 225, 315, 317, 319, 322, 323, 324, 353, 371, 387, 389, 392, 393, 413, 432, 457, 501, 503, 523, 525, 538, 548, 549, 566, 568, 569, 602, 609, 619, 632, 633, 635, 642, 669, 670, 702, 704, 738, 755, 800, 850, 851, 852, 863], Any[6, 20, 21, 35, 50, 93, 100, 122, 125, 136, 137, 152, 165, 183, 184, 187, 206, 279, 325, 328, 400, 406, 421, 429, 433, 437, 507, 542, 570, 571, 665, 666, 706, 720, 728, 777, 830, 839, 876, 893, 900, 904, 913, 945], 118), (Any[127, 133, 134, 171], Any[6, 99, 152], 7), (Any[131, 657], Any[136], 3), (Any[136], Any[131, 657], 3), (Any[33, 337, 340, 361, 616, 650, 696, 698, 703, 782, 810, 925], Any[181, 189, 279, 341, 366, 610, 690, 939], 20), (Any[337, 340, 361, 616, 696, 698, 703, 777, 810, 821, 823, 925], Any[140, 341, 366, 610, 690, 749, 784, 804, 939], 21), (Any[337, 340, 361, 367, 616, 696, 698, 703, 810, 821, 823, 925], Any[341, 344, 366, 368, 610, 690, 749, 804, 939], 21), (Any[182, 337, 340, 361, 367, 616, 696, 698, 703, 810, 821, 823, 925], Any[341, 344, 366, 368, 610, 690, 749, 804, 939], 22), (Any[1, 3, 11, 13, 15, 18, 23, 36, 44, 53, 54, 60, 66, 69, 88, 94, 105, 106, 123, 124, 133, 138, 143, 145, 146, 149, 159, 168, 178, 180, 182, 199, 205, 209, 210, 214, 215, 217, 239, 242, 254, 258, 260, 269, 274, 277, 282, 286, 300, 301, 302, 308, 309, 315, 317, 319, 337, 340, 345, 350, 351, 361, 372, 374, 375, 377, 378, 381, 385, 403, 408, 409, 410, 429, 440, 453, 524, 527, 548, 549, 550, 558, 578, 589, 590, 608, 609, 616, 619, 633, 635, 639, 643, 648, 650, 661, 664, 668, 679, 688, 696, 698, 701, 703, 756, 765, 769, 772, 777, 782, 796, 799, 800, 802, 809, 810, 821, 823, 834, 850, 851, 852, 858, 863, 865, 881, 910, 914, 916, 917, 925, 926, 934, 947], Any[48, 64, 99, 126, 127, 132, 139, 140, 165, 189, 208, 246, 287, 303, 325, 341, 357, 366, 395, 399, 414, 495, 497, 545, 567, 595, 610, 659, 683, 690, 692, 719, 749, 784, 804, 842, 855, 857, 867, 928, 935, 939], 176), (Any[16, 21, 32, 40, 49, 54, 71, 84, 96, 102, 129, 138, 145, 164, 172, 173, 178, 182, 243, 244, 271, 282, 301, 308, 334, 337, 340, 345, 350, 361, 367, 372, 374, 375, 387, 398, 402, 409, 410, 418, 429, 431, 432, 441, 453, 454, 455, 470, 471, 472, 473, 475, 482, 489, 498, 499, 514, 527, 589, 608, 616, 618, 619, 620, 623, 625, 639, 640, 643, 650, 652, 661, 666, 687, 688, 691, 696, 698, 703, 715, 716, 725, 726, 731, 732, 733, 735, 743, 765, 769, 777, 782, 791, 795, 796, 797, 810, 821, 822, 823, 829, 845, 849, 850, 854, 859, 865, 870, 871, 880, 881, 915, 925, 940], Any[64, 91, 92, 100, 127, 158, 166, 167, 189, 212, 213, 245, 246, 287, 303, 311, 312, 341, 344, 349, 357, 366, 368, 373, 388, 396, 400, 445, 507, 576, 583, 587, 595, 610, 659, 683, 685, 690, 692, 693, 695, 700, 749, 784, 803, 804, 818, 819, 820, 846, 853, 855, 857, 867, 913, 935, 939], 171)], Any[1.693220853805542, 0.08522701263427734, 0.16919708251953125, 0.23802995681762695, 0.23295116424560547, 0.07127499580383301, 0.24316716194152832, 0.26329684257507324, 0.19637179374694824, 0.2682969570159912, 0.28302597999572754, 0.07561588287353516, 0.2980520725250244, 0.19735193252563477, 0.30054402351379395, 0.17783784866333008, 0.27207183837890625, 0.21939706802368164, 0.24435997009277344, 0.2770371437072754, 0.29326510429382324, 0.2619040012359619, 0.3108348846435547, 0.3339240550994873, 0.17576098442077637, 0.2688281536102295, 0.23884296417236328, 0.2885000705718994, 0.1766679286956787, 0.19154596328735352, 0.18872380256652832, 0.3397858142852783, 0.13399696350097656, 0.14080190658569336, 0.36609888076782227, 0.16727590560913086, 0.249039888381958, 0.31089305877685547, 0.38335180282592773, 0.2731029987335205, 0.24997806549072266, 0.3510911464691162, 0.47208094596862793, 0.29897594451904297, 0.3998219966888428, 0.28366899490356445, 0.22548985481262207, 0.5192620754241943, 0.27591395378112793, 0.40628504753112793, 0.5546610355377197, 0.3237900733947754, 0.23181390762329102, 0.548163890838623, 0.4121699333190918, 0.3737211227416992, 0.6701271533966064, 0.26791810989379883, 1800.018718957901], Any[0.02395009994506836, 0.005166053771972656, 0.005785942077636719, 0.005301952362060547, 0.004766941070556641, 0.005346059799194336, 0.004970073699951172, 0.005072116851806641, 0.0046100616455078125, 0.008455038070678711, 0.0054340362548828125, 0.004965066909790039, 0.005007028579711914, 0.004923105239868164, 0.005465030670166016, 0.005127906799316406, 0.005445957183837891, 0.0255429744720459, 0.004621028900146484, 0.004582881927490234, 0.004648923873901367, 0.005227088928222656, 0.005081892013549805, 0.00506591796875, 0.005320072174072266, 0.00489497184753418, 0.004889011383056641, 0.005587100982666016, 0.005151033401489258, 0.005001068115234375, 0.0053441524505615234, 0.005277872085571289, 0.00500798225402832, 0.005020856857299805, 0.021401166915893555, 0.0050868988037109375, 0.0049250125885009766, 0.005229949951171875, 0.004822969436645508, 0.004804134368896484, 0.005465030670166016, 0.005254983901977539, 0.005151033401489258, 0.005141019821166992, 0.004878997802734375, 0.004817008972167969, 0.0062558650970458984, 0.005221843719482422, 0.004697084426879883, 0.0049588680267333984, 0.008087873458862305, 0.005352973937988281, 0.0052449703216552734, 0.006199836730957031, 0.006079196929931641, 0.0049250125885009766, 0.005632162094116211, 0.008774042129516602], Any[2.9967241287231445, 0.10714006423950195, 0.0464169979095459, 0.028950929641723633, 0.08034491539001465, 0.07463312149047852, 0.07066202163696289, 0.0479738712310791, 0.06993603706359863, 0.0855250358581543, 0.07169198989868164, 0.08993911743164062, 0.0666189193725586, 0.04261898994445801, 0.08701801300048828, 0.07319998741149902, 0.0862419605255127, 0.07587099075317383, 0.07912397384643555, 0.062371015548706055, 0.06157994270324707, 0.09515810012817383, 0.03539919853210449, 0.02724003791809082, 0.029397010803222656, 0.02642202377319336, ┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: master problem cannot be solved
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:486
0.07832098007202148, 0.04227304458618164, 0.09159708023071289, 0.06375288963317871, 0.07622003555297852, 0.0960390567779541, 0.0712900161743164, 0.07979893684387207, 0.06866621971130371, 0.06594204902648926, 0.04183197021484375, 0.07414603233337402, 0.0657510757446289, 0.06064915657043457, 0.04640603065490723, 0.05560803413391113, 0.06295108795166016, 0.048729896545410156, 0.057550907135009766, 0.04203987121582031, 0.08013606071472168, 0.07603287696838379, 0.05904507637023926, 0.06168007850646973, 0.07599210739135742, 0.06403183937072754, 0.056047916412353516, 0.06599998474121094, 0.07469916343688965, 0.05832195281982422, 0.06996798515319824, 0.08760905265808105]), 16)
