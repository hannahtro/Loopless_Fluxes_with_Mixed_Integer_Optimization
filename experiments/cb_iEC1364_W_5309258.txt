┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iEC1364_W
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iEC1364_W
----------------------------------
number of metabolites : 1927
number of reactions : 2764
number of genes : 1364

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 55
max_cuts = 41
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2764 flux variables and 5184 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [2, 3, 2, 14, 14, 14, 14, 14, 14, 14, 15, 12, 11, 11, 11, 12, 11, 15, 17, 15, 14, 14, 14, 2, 2, 54, 3, 7, 14, 4, 14, 11, 17]
length(C_list) = 33
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 2, 2, 2, 2, 2, 3, 2, 3, 3, 3, 9, 7, 2]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 3, 3, 3, 2, 2, 2, 4, 2, 4, 2, 4, 4, 5, 4, 3]
length(C_list) = 18
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [5, 4, 3, 14, 2, 3, 3, 4, 5, 3, 6, 5]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [4, 2, 3, 3, 4, 4, 5, 8, 2, 191, 2, 5, 7]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [4, 5, 18, 16, 31, 16, 25, 19, 17, 140, 16, 16, 12, 13, 17, 12, 12, 12, 12, 16, 12, 16, 16, 16, 4, 19, 16, 3, 5, 16, 2, 7, 16, 16, 4, 19]
length(C_list) = 36
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [8, 3, 6, 3, 2, 7, 5, 5, 9, 9, 29, 17]
length(C_list) = 12
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [2, 7, 4, 4, 2, 2, 8, 7, 4, 9, 6, 2, 9, 6, 8]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [7, 8, 18, 14, 14, 14, 14, 14, 14, 14, 11, 12, 15, 11, 11, 11, 11, 11, 14, 6, 14, 14, 9, 6, 6, 14, 3, 13, 14, 7, 14, 4, 27]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [2, 3, 8, 5, 8, 4]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [2, 3, 5, 3]
length(C_list) = 4
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [2, 2, 5]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [2, 7, 3, 4, 6, 15, 8, 4, 3, 8, 3]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [2, 3, 2, 2, 4]
length(C_list) = 5
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 4, 7, 4, 12]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [2, 3]
length(C_list) = 2
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [2, 3, 15]
length(C_list) = 3
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 17
termination = MathOptInterface.OPTIMAL
objective_value = 0.9853649100380489
thermo_feasible = true
