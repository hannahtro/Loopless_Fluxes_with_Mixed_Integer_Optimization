┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iUTI89_1310
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iUTI89_1310
----------------------------------
number of metabolites : 1940
number of reactions : 2725
number of genes : 1310

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 136
max_cuts = 54
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2725 flux variables and 5059 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [6, 2, 6, 16, 16, 17, 16, 17, 16, 16, 13, 13, 14, 14, 14, 13, 13, 16, 13, 13, 13, 14, 13, 14, 13, 13, 2, 3, 2, 2, 7, 11, 11, 11, 11, 14, 11, 11, 2, 2, 2, 4, 4, 3, 2, 4, 9, 9, 3, 105, 9, 10, 10, 9, 9, 4, 2, 9, 54, 2, 3, 14, 18, 6, 3]
length(C_list) = 54
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [2, 3, 3, 3, 3, 2, 17, 17, 18, 17, 18, 17, 27, 14, 14, 16, 17, 15, 14, 14, 15, 14, 15, 14, 14, 14, 14, 15, 14, 21, 14, 14, 16, 15, 15, 24, 14, 17, 2, 3, 8, 12, 14, 24, 70, 12, 12, 112, 124, 2, 6, 3, 14, 10, 12, 10, 11, 11, 10, 4, 28, 3, 3, 66, 3, 15, 6]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 5, 3, 3, 3, 4, 3, 3, 5, 3, 4, 5, 2, 3, 4, 90, 4, 5, 4, 5, 2, 8, 4, 4, 4, 8, 40, 76, 6, 2, 9, 3, 16]
length(C_list) = 33
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [4, 4, 2, 5, 3, 2, 3, 2, 88, 7, 3, 2, 2, 215, 3]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [2, 3, 2, 2, 3, 4, 9, 6, 9, 22, 2, 2, 92, 17, 5, 4, 75, 65, 47, 4, 75, 14]
length(C_list) = 22
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [2, 9, 3, 5, 3, 6, 4, 8, 6, 4, 4, 4, 40, 8, 4, 4]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [4, 2, 6, 5, 7, 6, 5, 6, 5, 6, 3, 14, 12, 27, 9]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [3, 2, 4, 4, 5, 2, 5, 6, 5, 3, 7]
length(C_list) = 11
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 3, 4, 3, 3, 4, 5, 4, 4, 6, 4, 5, 4, 6, 8, 6, 9, 6, 25, 4, 4, 5, 12]
length(C_list) = 26
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 5, 16, 5, 4, 16, 18, 3, 2, 13, 4, 4, 4, 3, 5, 7, 5, 13, 14, 4, 4, 4, 10, 7, 4, 12, 5, 5, 4, 7, 11, 8, 11, 16, 4, 12, 4, 5, 4, 4, 3, 10, 9, 4, 11, 9, 14, 153, 9, 5, 9, 4, 14, 4, 4, 6]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [3, 4, 5, 4, 4, 4, 5, 3, 5, 6, 5, 4, 8, 7, 4, 42, 5]
length(C_list) = 17
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 11, 11, 4, 3, 7, 4, 6, 4, 5]
length(C_list) = 10
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [2, 3, 4, 8, 5, 8, 4]
length(C_list) = 7
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 12, 40, 58]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [2, 22, 15, 3, 4, 6]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 15
termination = MathOptInterface.OPTIMAL
objective_value = 0.9824764533337454
thermo_feasible = true
