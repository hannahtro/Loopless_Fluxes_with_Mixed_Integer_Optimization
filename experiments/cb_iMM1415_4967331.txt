ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iMM1415
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iMM1415
----------------------------------
number of metabolites : 2775
number of reactions : 3726
number of genes : 1375

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 149
max_cuts = 75
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 3726 flux variables and 6998 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [5, 2, 6, 4, 2, 2, 4, 5, 3, 4, 2, 8, 2, 4, 4, 2, 6, 3, 7, 226, 4, 254, 4, 18, 4, 283, 3, 3, 2, 4, 6, 2, 4, 4, 2, 15, 190, 3, 4, 31, 5, 4, 8, 4, 3, 4, 2, 6, 5, 7, 16, 4]
length(C_list) = 52
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [4, 7, 3, 10, 4, 4, 12, 4, 13, 2, 2, 3, 9, 83, 5, 11, 4, 4, 3, 5, 2, 3, 2, 9, 5, 135, 4, 2, 2, 4, 111, 2, 4, 4, 8, 2, 4, 8, 76, 4, 8, 4, 3, 12, 4, 4, 11, 12, 13, 4, 13, 5, 20, 4, 21, 22, 4, 4, 15, 5]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [2, 3, 230, 4, 11, 6, 4, 8, 2, 5, 3, 4, 5, 4, 4, 4, 5, 3, 18, 4, 4, 8, 3, 2, 4, 91, 5, 6, 5, 476, 2, 4, 3, 5, 215, 2, 46, 5, 7, 4, 4, 4, 4, 4, 6, 5, 5, 3, 3, 9, 4, 4, 12, 5, 6, 8]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [4, 4, 5, 5, 7, 5, 3, 10, 6, 6, 5, 3, 3, 107, 6, 4, 4, 5, 7, 4, 4, 5, 4, 6, 4, 5, 5, 4, 5, 4, 7, 5, 8, 3, 6, 3, 17, 2, 4, 3, 8, 5, 4, 5, 2, 4, 8, 9, 4, 18, 6, 4, 6, 7, 5, 4, 4, 7, 6, 6, 5, 4, 4, 3, 4, 7, 10, 4, 4]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 2, 6, 4, 6, 2, 6, 7, 3, 5, 2, 5, 3, 5, 4, 3, 4, 9, 6, 7, 303, 7, 3, 4, 4, 3, 5, 6, 5, 3, 7, 14, 4, 6, 5, 3, 4, 4, 20, 4, 4, 3, 10, 4, 6, 4, 17, 7, 6, 5, 4, 6, 6, 4, 22]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [12, 4, 321, 4, 98, 6, 6, 9, 3, 8, 3, 3, 5, 304, 5, 6, 5, 7, 7, 8, 6, 7, 3, 7, 4, 5, 6, 7, 6, 8, 3, 4, 143, 7, 278, 3, 3, 4, 3, 10, 4, 4, 3, 8, 4, 8, 4, 3, 5, 5, 3, 6, 8, 8, 28, 3, 4, 10, 4, 8, 6, 4, 8]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [17, 3, 9, 5, 4, 3, 3, 3, 5, 4, 5, 3, 3, 4, 3, 4, 3, 4, 3, 4, 5, 5, 55, 4, 4, 6, 5, 3, 4, 149, 6, 5, 7, 7, 4, 4, 3, 4, 8, 3, 4, 5, 17, 499, 3, 3, 3, 4, 5, 9, 5, 4, 9, 59, 3, 3, 4, 6, 4, 4, 15, 7, 13, 6, 4, 3]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [6, 176, 9, 4, 7, 3, 7, 4, 11, 4, 3, 9, 3, 4, 4, 4, 3, 458, 4, 6, 3, 4, 4, 12, 3, 9, 126, 6, 4, 3, 4, 8, 9, 3, 4, 3, 8, 469, 62, 3, 3, 5, 6, 4, 4, 4, 4, 3, 6, 6, 5, 3, 3, 6, 8, 12, 5, 4, 6, 6, 8, 6, 4, 4, 4, 31]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [10, 3, 7, 7, 8, 4, 6, 7, 4, 6, 8, 4, 4, 6, 14, 8, 3, 3, 7, 5, 5, 4, 3, 4, 3, 5, 3, 7, 9, 7, 3, 10, 9, 5, 4, 3, 3, 3, 6, 9, 172, 5, 7, 5, 4, 8, 6, 6, 6, 4, 4, 3, 9, 5, 8, 5, 7, 90, 3, 5]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [9, 7, 4, 2, 5, 7, 6, 5, 10, 4, 3, 4, 3, 3, 4, 7, 6, 4, 3, 4, 6, 4, 4, 3, 60, 4, 191, 4, 207, 12, 14, 9, 4, 3, 4, 7, 7, 275, 3, 228, 4, 4, 8, 7, 5, 16, 5, 6, 7, 16, 4, 6, 4, 5, 9, 3, 3, 8, 6, 5, 5, 12, 9, 4, 3, 4, 11, 6]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [20, 4, 9, 4, 6, 4, 6, 6, 8, 7, 4, 4, 4, 6, 4, 4, 6, 11, 5, 4, 4, 5, 9, 4, 3, 10, 4, 4, 17, 5, 4, 4, 4, 10, 6, 6, 41, 3, 6, 3, 3, 5, 3, 5, 4, 7, 8, 7, 9, 7, 7, 6, 3, 5, 3, 9, 4, 5, 4, 3, 4, 101, 4]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [3, 3, 7, 3, 7, 3, 12, 9, 4, 7, 3, 4, 3, 8, 20, 5, 6, 8, 3, 4, 3, 3, 4, 9, 5, 9, 5, 6, 6, 31, 3, 3, 3, 28, 7, 4, 4, 3, 6, 7, 62, 4, 4, 8, 9, 8, 5, 83, 4, 4, 4, 10, 9, 9, 9, 7, 220, 8, 7, 25, 7, 26, 6, 4, 6, 8, 4, 8, 48, 4]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [6, 3, 9, 11, 4, 8, 12, 10, 4, 8, 8, 4, 483, 3, 11, 9, 5, 4, 8, 5, 11, 4, 3, 7, 9, 8, 5, 7, 585, 14, 3, 3, 3, 4, 7, 4, 3, 6, 3, 2, 6, 6, 3, 34, 4, 6, 4, 6, 8, 5, 6, 4, 14, 10, 16, 7, 13, 9, 12, 18, 12]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [4, 6, 8, 11, 8, 4, 9, 6, 7, 13, 4, 12, 8, 5, 7, 6, 8, 8, 5, 4, 3, 8, 6, 8, 11, 12, 3, 12, 9, 3, 4, 4, 9, 5, 8, 6, 5, 10, 120, 8, 10, 3, 8, 10, 6, 8, 5, 8, 6, 8, 3, 4, 9, 7, 3, 597, 4, 13, 20, 7, 6, 14, 22, 4, 4, 170, 5, 9]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [25, 5, 4, 2, 6, 3, 9, 8, 4, 8, 36, 6, 11, 5, 4, 2, 5, 4, 4, 7, 13, 3, 7, 8, 5, 7, 7, 3, 5, 21, 4, 3, 67, 4, 9, 8, 8, 296, 2, 9, 3, 11, 8, 3, 3, 6, 10, 3, 6, 7, 7, 3, 11, 3, 8, 6, 6, 5, 78, 3, 9, 6]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [3, 3, 6, 3, 4, 7, 4, 7, 8, 23, 19, 4, 4, 12, 3, 5, 8, 4, 6, 7, 9, 6, 93, 5, 7, 7, 10, 5, 7, 59, 3, 7, 3, 3, 6, 10, 4, 4, 8, 5, 3, 5, 3, 14, 7, 6, 9, 3, 9, 4, 8, 7, 7, 7, 8, 15, 5, 5, 6, 4, 6, 13, 9, 50, 6]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [3, 3, 7, 4, 10, 6, 4, 7, 11, 34, 4, 8, 10, 3, 28, 9, 8, 9, 8, 8, 10, 8, 5, 4, 7, 3, 4, 65, 6, 7, 5, 134, 4, 5, 8, 5, 9, 4, 12, 4, 11, 3, 11, 8, 3, 30, 5, 7, 11, 3, 4, 7, 12, 9, 32, 7, 5, 11, 9, 6, 8, 8, 4]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [17, 3, 5, 5, 3, 31, 14, 294, 13, 4, 7, 4, 21, 4, 41, 4, 4, 4, 9, 4, 8, 3, 70, 9, 5, 422, 4, 5, 15, 3, 7, 8, 5, 9, 4, 4, 5, 5, 28, 3, 6, 3, 6, 3, 5, 4, 4, 4, 4, 12, 20, 11, 10, 3, 5, 139, 7, 5, 7, 6, 9, 4, 4]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [15, 3, 54, 7, 8, 3, 5, 9, 5, 6, 10, 5, 11, 3, 217, 7, 10, 5, 9, 6, 14, 8, 12, 9, 7, 3, 8, 12, 11, 14, 4, 7, 6, 8, 7, 14, 10, 4, 8, 11, 4, 12, 7, 13, 4, 4, 8, 186, 6, 7, 7, 47, 8, 9, 6, 13, 10, 9, 4, 8, 6, 9, 141, 8, 7, 10, 9, 4, 8, 6, 8]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [7, 3, 8, 43, 10, 4, 9, 4, 16, 12, 4, 10, 7, 9, 9, 4, 10, 8, 4, 3, 12, 6, 8, 8, 4, 3, 4, 117, 3, 4, 5, 10, 9, 5, 4, 6, 6, 10, 8, 6, 9, 7, 6, 7, 9, 6, 13, 9, 8, 4, 6, 6, 8, 8, 4, 6, 6, 6, 10, 4, 5]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [13, 3, 6, 7, 19, 3, 4, 7, 5, 6, 5, 5, 6, 7, 4, 4, 4, 8, 3, 6, 3, 6, 4, 3, 7, 4, 5, 7, 4, 10, 8, 6, 5, 6, 4, 4, 5, 6, 6, 9, 6, 3, 13, 7, 6, 7, 8, 6, 5, 7, 4, 7, 7, 6, 4, 5, 4, 6, 4, 8, 133, 18, 8]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [14, 3, 4, 4, 7, 4, 6, 8, 4, 26, 142, 4, 10, 8, 4, 3, 3, 5, 6, 7, 5, 13, 232, 10, 8, 5, 6, 6, 16, 5, 13, 11, 8, 5, 5, 7, 18, 9, 9, 4, 7, 4, 3, 10, 11, 7, 5, 6, 2, 17, 6, 3, 4, 3, 4, 5, 6, 10, 5, 14, 89, 6]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [13, 39, 7, 4, 4, 7, 4, 4, 7, 5, 4, 6, 5, 8, 9, 6, 4, 2, 5, 7, 6, 10, 7, 4, 12, 6, 7, 8, 8, 6, 6, 9, 4, 6, 7, 9, 3, 6, 9, 7, 6, 4, 4, 6, 2, 4, 6, 4, 6, 6, 8, 9, 8, 428, 425, 9, 6, 10, 6, 4, 7, 10, 10, 3]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [13, 5, 3, 4, 8, 10, 18, 7, 5, 4, 5, 5, 5, 3, 3, 9, 4, 5, 8, 4, 9, 10, 6, 306, 8, 12, 5, 4, 18, 4, 5, 4, 6, 16, 10, 4, 41, 6, 9, 4, 8, 4, 6, 5, 6, 5, 20, 11, 4, 114, 5, 4, 6, 9, 9, 10, 6, 9, 7, 8, 17, 10, 8, 5, 7, 7, 8, 5, 6, 3, 5, 8, 7]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [21, 3, 8, 4, 12, 8, 4, 9, 8, 8, 9, 6, 4, 5, 4, 8, 7, 39, 5, 8, 4, 9, 10, 6, 144, 8, 14, 4, 3, 7, 6, 4, 35, 8, 4, 7, 20, 6, 9, 9, 13, 26, 40, 17, 4, 4, 5, 139, 12, 9, 4, 4, 14, 4, 5, 5, 10, 6, 9, 4, 5, 6, 74, 4]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [8, 3, 60, 4, 5, 7, 9, 7, 8, 6, 248, 3, 6, 4, 5, 7, 8, 7, 9, 8, 8, 7, 5, 7, 6, 4, 9, 6, 53, 9, 30, 5, 8, 10, 9, 8, 37, 8, 7, 8, 94, 9, 8, 52, 12, 4, 42, 4, 35, 10, 3, 5, 6, 4, 15, 6, 5, 8, 4, 6, 5, 4, 215, 7, 6, 5, 4, 6, 5]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [8, 3, 7, 10, 6, 6, 9, 9, 6, 9, 6, 12, 37, 11, 7, 8, 8, 4, 10, 12, 6, 9, 6, 8, 4, 8, 7, 5, 23, 8, 8, 9, 11, 27, 6, 9, 14, 5, 8, 8, 15, 9, 6, 8, 7, 4, 5, 9, 22, 8, 10, 10, 8, 10, 9, 7, 8, 11, 6, 8, 7, 8, 7, 10, 9, 55, 7, 11, 8, 6]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [8, 3, 4, 4, 6, 41, 6, 7, 5, 5, 7, 7, 3, 8, 4, 6, 4, 6, 7, 6, 6, 7, 7, 4, 7, 5, 4, 6, 5, 7, 6, 11, 8, 13, 6, 8, 4, 9, 2, 8, 2, 16, 6, 38, 18, 5, 7, 6, 8, 10, 12, 6, 8, 10, 7, 8, 5, 5, 7, 5, 5, 13, 10, 6, 4, 4, 8, 5]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [10, 3, 85, 4, 6, 4, 5, 5, 8, 11, 4, 4, 5, 6, 11, 5, 4, 5, 5, 6, 6, 4, 6, 9, 12, 5, 4, 7, 214, 6, 7, 10, 6, 5, 11, 9, 82, 4, 8, 6, 10, 4, 4, 5, 7, 5, 4, 8, 11, 7, 5, 193, 7, 4, 5, 6, 7, 4, 108, 7, 4, 7, 9, 10, 9, 9, 5, 3, 6, 11]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [9, 3, 4, 9, 7, 9, 4, 8, 91, 3, 3, 11, 4, 3, 7, 4, 4, 3, 4, 9, 6, 6, 4, 9, 6, 6, 7, 12, 23, 9, 7, 8, 6, 6, 9, 4, 6, 3, 9, 5, 6, 4, 4, 4, 47, 6, 4, 8, 8, 7, 7, 7, 6, 11, 61, 9, 68, 322, 24, 8]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [6, 16, 9, 8, 4, 5, 6, 11, 5, 4, 332, 9, 9, 4, 5, 10, 6, 12, 7, 3, 8, 9, 3, 11, 128, 5, 4, 2, 8, 5, 4, 5, 6, 73, 7, 4, 5, 3, 9, 5, 6, 4, 5, 8, 3, 6, 6, 11, 6, 4, 6, 4, 41, 7, 6, 4, 3, 7, 5, 9, 7, 4, 5, 9, 5, 7, 8, 4, 6, 8]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [7, 8, 7, 7, 3, 6, 9, 5, 5, 5, 4, 8, 126, 10, 8, 5, 4, 12, 10, 7, 3, 28, 9, 10, 8, 9, 5, 9, 31, 9, 7, 10, 7, 9, 7, 24, 10, 8, 9, 4, 10, 10, 4, 3, 3, 16, 10, 6, 7, 8, 7, 12, 10, 8, 6, 13, 8, 12, 15, 8, 12]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [7, 9, 4, 4, 3, 7, 6, 9, 6, 7, 3, 27, 3, 4, 4, 11, 6, 8, 12, 7, 3, 6, 20, 3, 5, 14, 12, 7, 8, 6, 7, 228, 3, 11, 10, 5, 9, 6, 4, 8, 8, 6, 7, 6, 6, 4, 23, 13, 19, 8, 9, 13, 9, 5, 10, 12, 7, 5, 6, 7, 5, 10, 5, 11, 9, 8, 7, 7]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [5, 5, 9, 7, 10, 7, 3, 4, 3, 6, 4, 4, 3, 8, 5, 4, 6, 5, 6, 4, 153, 4, 4, 5, 7, 6, 39, 4, 10, 4, 3, 5, 3, 9, 4, 9, 3, 7, 6, 4, 13, 4, 11, 6, 8, 5, 4, 8, 5, 7, 7, 6, 13, 5, 10, 7, 196, 9, 4, 10, 12, 7, 44, 5, 4]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 7, 5, 5, 9, 6, 7, 8, 22, 5, 7, 15, 3, 9, 6, 9, 5, 4, 8, 5, 8, 13, 8, 5, 5, 3, 3, 6, 18, 6, 10, 6, 4, 5, 5, 12, 12, 7, 5, 5, 10, 5, 7, 9, 5, 15, 8, 4, 6, 10, 10, 6, 5, 14, 4, 5]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [4, 3, 8, 4, 4, 6, 4, 6, 6, 11, 5, 4, 7, 26, 4, 3, 3, 4, 7, 117, 90, 29, 5, 6, 4, 6, 8, 8, 110, 5, 175, 13, 270, 182, 5, 4, 7, 8, 8, 6, 5, 78, 307, 8, 5, 5, 6, 10, 5, 4, 4, 7, 13, 5, 8, 8, 4, 7, 5, 7, 8, 6, 9]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [10, 3, 6, 3, 5, 9, 6, 5, 5, 11, 4, 20, 10, 4, 4, 6, 10, 6, 6, 7, 11, 10, 4, 6, 5, 6, 60, 5, 4, 3, 3, 8, 5, 5, 5, 6, 4, 16, 6, 6, 4, 5, 4, 11, 5, 7, 4, 11, 6, 479, 14, 4, 10, 8, 6]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [3, 3, 11, 17, 4, 14, 6, 12, 4, 4, 4, 13, 4, 4, 114, 9, 12, 47, 5, 4, 5, 5, 7, 8, 6, 7, 8, 8, 3, 8, 4, 9, 8, 67, 6, 5, 23, 9, 4, 9, 8, 4, 10, 11, 9, 144, 41, 7, 8, 5, 4, 4, 9]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [11, 6, 79, 4, 4, 308, 308, 302, 6, 4, 17, 3, 6, 3, 9, 4, 9, 7, 11, 5, 8, 24, 4, 7, 4, 5, 6, 3, 8, 4, 4, 4, 6, 7, 8, 6, 16, 5, 10, 5, 27, 7, 11, 14, 9, 7, 5, 4, 17, 6, 8, 7, 10, 6, 11, 5, 4, 7, 161]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [7, 5, 6, 4, 7, 4, 5, 12, 4, 132, 4, 6, 6, 3, 7, 4, 6, 4, 9, 4, 6, 8, 4, 8, 4, 4, 7, 4, 4, 4, 5, 4, 9, 4, 4, 10, 4, 4, 6, 4, 8, 9, 5, 7, 3, 5, 6, 14, 8, 306, 48, 5, 5, 6, 5, 3]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [4, 7, 6, 3, 7, 4, 242, 4, 11, 12, 3, 5, 4, 8, 4, 6, 5, 5, 3, 8, 8, 5, 8, 4, 6, 150, 3, 612, 4, 6, 3, 4, 3, 3, 5, 3, 6, 9, 6, 3, 3, 4, 16, 7, 12, 6, 15, 4, 15, 7, 4, 3, 4, 4, 3, 4, 4, 10]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [7, 7, 8, 4, 6, 13, 5, 12, 5, 9, 8, 9, 3, 4, 7, 8, 10, 9, 8, 7, 4, 6, 25, 10, 3, 9, 10, 4, 4, 11, 32, 12, 8, 8, 9, 4, 14, 4, 10, 8, 13, 5, 7, 7, 8, 4, 10, 8, 24, 4, 14, 9, 4, 8, 8, 18]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [15, 7, 8, 10, 10, 3, 7, 13, 7, 4, 2, 8, 11, 8, 3, 4, 3, 4, 4, 11, 6, 8, 9, 8, 6, 4, 10, 6, 7, 5, 4, 30, 9, 11, 11, 4, 7, 4, 6, 4, 18, 8, 4, 4, 8, 71, 39, 4, 10, 11, 9, 10, 15, 14, 17, 17, 8, 10, 11, 15, 6]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [7, 8, 6, 8, 7, 8, 3, 8, 9, 9, 8, 9, 8, 201, 6, 10, 11, 8, 6, 9, 4, 7, 4, 7, 12, 10, 6, 7, 10, 8, 5, 4, 9, 11, 8, 4, 9, 7, 7, 9, 9, 11, 10, 3, 12, 5, 10, 8, 8, 9, 8, 7, 8, 39, 8, 4, 11, 9, 7, 8, 7, 15, 39, 13, 10, 9, 7, 6, 10, 5, 7]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [4, 6, 6, 7, 6, 7, 8, 4, 9, 6, 20, 11, 630, 6, 8, 8, 7, 116, 8, 9, 7, 13, 9, 7, 10, 4, 6, 5, 171, 7, 11, 12, 7, 6, 8, 7, 21, 9, 8, 7, 5, 100, 13, 5, 3, 10, 11, 3, 6, 6, 6, 10, 7, 24, 5, 9, 6, 7, 8, 7, 3, 3, 14, 10, 11, 7, 10, 8, 10, 16, 8, 16, 14, 15, 7, 6, 8, 12, 10, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [15, 5, 8, 12, 4, 6, 8, 8, 6, 8, 4, 324, 8, 29, 5, 394, 10, 9, 38, 11, 3, 6, 7, 9, 4, 10, 7, 3, 6, 9, 3, 406, 9, 8, 6, 10, 49, 8, 13, 207, 16, 9, 191, 46, 6, 4, 10, 6, 9, 3, 4, 9, 112, 20, 7, 7, 8, 4, 7, 8, 14, 4, 5, 11, 4, 10, 10, 9, 5]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [7, 13, 3, 4, 3, 6, 6, 10, 6, 5, 6, 5, 6, 7, 5, 10, 7, 3, 9, 3, 4, 7, 4, 4, 345, 4, 6, 4, 12, 3, 8, 24, 4, 8, 22, 24, 5, 6, 6, 6, 4, 24, 7, 6, 7, 109, 9, 4, 195, 3, 89, 8, 9, 147, 4, 9, 3, 10, 5, 10, 5, 86, 9, 8, 6, 59, 6, 141, 11]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [8, 3, 7, 5, 3, 7, 8, 16, 8, 5, 4, 8, 10, 9, 32, 7, 8, 4, 8, 7, 6, 3, 10, 7, 35, 9, 5, 17, 4, 4, 6, 3, 8, 7, 5, 7, 11, 4, 13, 7, 8, 8, 5, 7, 8, 9, 4, 5, 2, 6, 6, 6, 3, 7, 4, 9, 10, 8, 5, 67, 7, 5, 5, 16, 7, 9, 10, 6, 8, 7, 12, 18, 4, 13, 7]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [5, 3, 67, 26, 4, 7, 18, 19, 16, 4, 6, 10, 9, 11, 9, 6, 6, 7, 6, 131, 4, 5, 9, 7, 10, 7, 7, 6, 8, 7, 6, 362, 8, 3, 4, 8, 6, 9, 10, 4, 4, 8, 6, 7, 12, 9, 10, 3, 7, 5, 119, 15, 258, 15, 8, 5, 10, 17, 17, 352, 202, 139, 12]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [4, 7, 7, 4, 6, 21, 22, 6, 7, 6, 9, 20, 20, 7, 6, 21, 20, 40, 7, 4, 5, 4, 8, 3, 6, 6, 16, 6, 4, 6, 8, 4, 37, 5, 6, 5, 6, 13, 95, 7, 4, 41, 8, 25, 5, 6, 10, 22, 22, 24, 9, 16, 7, 3, 6, 6, 8, 3, 5]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [21, 6, 6, 9, 4, 4, 4, 8, 4, 217, 6, 239, 7, 14, 15, 3, 3, 5, 7, 4, 6, 7, 285, 10, 49, 4, 4, 13, 4, 7, 4, 4, 13, 10, 8, 8, 6, 7, 15, 6, 11, 6, 7, 5, 5, 6, 13, 21, 5, 6, 9, 5, 18, 27, 20, 4, 4, 8, 16, 16, 10]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [9, 7, 108, 9, 4, 4, 3, 7, 6, 4, 12, 44, 11, 6, 6, 17, 4, 7, 6, 4, 7, 5, 6, 5, 8, 4, 9, 4, 6, 4, 4, 6, 5, 4, 4, 7, 9, 6, 5, 12, 8, 7, 13, 8, 6, 7, 5, 9, 6, 7, 7, 73, 5, 7, 5, 8, 85, 7, 7, 7, 7, 7, 5, 21, 8, 11]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [4, 3, 4, 8, 19, 11, 23, 4, 234, 4, 23, 3, 5, 3, 6, 57, 137, 18, 8, 6, 7, 4, 6, 182, 11, 6, 4, 3, 3, 12, 5, 6, 4, 10, 4, 13, 3, 5, 3, 6, 12, 7, 8, 10, 5, 7, 7, 13, 5, 64, 4, 8, 21, 11, 7, 16, 10, 5, 7, 18, 13, 8, 7, 3]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [8, 7, 7, 5, 3, 14, 8, 5, 15, 10, 8, 3, 119, 467, 8, 12, 4, 6, 4, 104, 10, 8, 4, 10, 6, 7, 5, 10, 8, 11, 5, 2, 14, 7, 4, 3, 9, 5, 8, 8, 3, 8, 6, 19, 4, 6, 5, 11, 8, 4, 15, 8, 7, 6, 14, 10, 4, 4, 6, 3, 4, 7, 10]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 5, 4, 4, 9, 8, 3, 6, 30, 6, 5, 7, 8, 6, 337, 3, 5, 4, 4, 16, 7, 13, 6, 8, 4, 7, 4, 19, 6, 6, 6, 7, 6, 4, 4, 7, 10, 178, 5, 7, 6, 135, 7, 8, 6, 6, 6, 3, 5, 8, 5, 6, 4, 8, 26, 5, 7, 3, 4, 7, 6, 7, 6, 6, 74, 3, 5, 8, 4, 5, 6]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [10, 9, 7, 8, 6, 11, 3, 6, 8, 9, 10, 8, 8, 7, 14, 10, 10, 6, 6, 12, 7, 9, 7, 9, 7, 8, 11, 12, 11, 2, 7, 4, 8, 9, 6, 11, 7, 4, 12, 10, 9, 8, 8, 3, 5, 3, 8, 8, 7, 9, 9, 10, 11, 12, 9, 3, 3, 5, 4, 6, 67, 9, 9, 9, 9, 8, 9, 17, 138, 8, 70, 10]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [10, 9, 4, 14, 11, 3, 10, 7, 8, 15, 6, 6, 7, 6, 12, 8, 7, 4, 6, 3, 9, 3, 6, 5, 3, 11, 10, 10, 5, 7, 5, 6, 11, 13, 10, 11, 13, 6, 10, 7, 94, 14, 7, 6, 4, 18, 10, 12, 9, 8, 7, 8, 6, 9, 219, 10, 8, 12, 5, 74, 9, 9, 15, 8, 8, 8, 10, 9, 14, 9, 10, 10, 6, 11, 8, 11, 11]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [12, 5, 7, 3, 9, 9, 6, 9, 7, 21, 12, 7, 9, 13, 7, 9, 13, 4, 8, 4, 12, 12, 5, 6, 9, 11, 6, 4, 3, 5, 7, 7, 6, 5, 9, 6, 10, 9, 6, 9, 5, 7, 23, 9, 8, 7, 11, 12, 6, 10, 7, 13, 5, 8, 249, 14, 7, 11, 8, 4, 11, 9, 6, 9, 7, 8, 10, 6, 7, 10, 6, 6, 6, 7, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [10, 4, 5, 6, 6, 7, 6, 7, 4, 7, 10, 6, 26, 4, 4, 28, 27, 6, 7, 9, 6, 6, 9, 198, 6, 13, 13, 10, 6, 9, 4, 7, 11, 7, 11, 10, 8, 10, 5, 9, 17, 7, 5, 6, 9, 9, 14, 10, 11, 9, 5, 9, 10, 13, 6, 41, 7, 10, 9, 6, 11, 129, 7, 6, 9, 7, 6, 7]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [5, 3, 5, 3, 5, 11, 10, 3, 7, 6, 6, 5, 8, 5, 203, 8, 4, 69, 14, 12, 9, 5, 11, 4, 6, 3, 7, 5, 5, 6, 14, 15, 7, 3, 16, 6, 3, 8, 7, 9, 11, 101, 7, 7, 6, 332, 3, 13, 6, 5, 10, 12, 7, 7, 6, 6, 3, 4, 191, 24]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [6, 11, 6, 4, 18, 11, 9, 4, 8, 4, 11, 4, 4, 17, 9, 4, 7, 6, 9, 7, 11, 5, 4, 10, 4, 7, 6, 11, 7, 7, 6, 5, 79, 9, 9, 6, 5, 14, 8, 81, 5, 8, 5, 3, 6, 7, 15, 4, 4, 5, 225, 5, 6, 102, 10, 6, 9, 10, 43]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [6, 9, 6, 4, 4, 4, 6, 3, 9, 11, 4, 5, 6, 6, 5, 15, 4, 2, 4, 4, 5, 3, 6, 6, 9, 6, 7, 10, 10, 6, 4, 26, 12, 10, 23, 4, 21, 125, 3, 4, 6, 8, 38, 7, 8, 10, 15, 4, 11, 4, 10, 24, 9, 6, 7, 9, 5]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [14, 5, 7, 7, 5, 3, 7, 12, 6, 4, 6, 6, 4, 11, 5, 8, 11, 4, 4, 6, 7, 18, 10, 11, 8, 7, 29, 7, 4, 6, 9, 4, 14, 14, 7, 13, 3, 8, 5, 9, 5, 6, 6, 11, 5, 7, 8, 9, 4, 5, 10, 5, 7, 12, 7, 11, 13, 137, 7, 6, 8, 4, 7]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [3, 3, 7, 7, 9, 6, 11, 3, 9, 9, 6, 16, 6, 7, 331, 8, 5, 39, 8, 12, 5, 9, 9, 7, 6, 5, 6, 3, 7, 7, 9, 6, 7, 19, 8, 7, 6, 123, 8, 6, 11, 4, 10, 9, 7, 5, 5, 91, 4, 8, 6, 7, 6, 19, 11, 8, 21, 6, 3, 8, 420, 7, 6, 11, 631, 9, 5, 11, 5, 5, 8]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [13, 7, 219, 8, 5, 13, 8, 10, 10, 6, 8, 4, 5, 8, 5, 6, 4, 233, 10, 6, 8, 5, 7, 6, 14, 8, 9, 7, 5, 7, 10, 57, 12, 7, 7, 9, 10, 7, 4, 6, 4, 4, 10, 13, 13, 5, 359, 8, 6, 8, 10, 476, 10, 14, 9, 7, 7, 15, 10, 10, 10, 9, 3, 11, 8, 537, 10, 5]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [8, 7, 6, 7, 8, 7, 4, 7, 11, 67, 6, 7, 8, 9, 142, 15, 512, 18, 6, 6, 6, 5, 57, 8, 5, 12, 6, 6, 6, 9, 13, 12, 12, 8, 6, 6, 6, 7, 6, 8, 5, 11, 7, 11, 6, 6, 9, 8, 9, 6, 10, 5, 8, 9, 8, 6, 5, 8, 7, 12, 7, 10]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [6, 8, 7, 15, 7, 6, 11, 11, 5, 11, 7, 9, 10, 13, 9, 24, 9, 7, 4, 3, 8, 5, 12, 4, 7, 6, 9, 12, 7, 6, 9, 15, 9, 6, 15, 7, 6, 4, 10, 11, 6, 8, 3, 6, 6, 5, 8, 13, 10, 6, 11, 58, 19, 177, 9, 4, 5, 6, 10, 6]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [4, 8, 8, 5, 10, 6, 6, 7, 7, 8, 19, 15, 7, 7, 11, 6, 4, 6, 6, 24, 9, 10, 6, 6, 7, 10, 355, 8, 5, 3, 3, 19, 6, 11, 9, 7, 6, 5, 9, 10, 6, 10, 61, 7, 9, 8, 7, 8, 5, 8, 5, 10, 5, 7, 6, 7, 10, 7, 15, 6, 3, 8, 7, 5, 448, 11, 7, 6]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [11, 6, 9, 12, 6, 9, 5, 20, 8, 14, 8, 16, 6, 11, 11, 12, 4, 6, 9, 7, 6, 6, 5, 4, 251, 3, 5, 10, 7, 10, 25, 4, 283, 9, 5, 5, 3, 4, 11, 6, 214, 6, 7, 5, 13, 5, 3, 11, 5, 8, 8, 4, 365, 13, 31, 16, 10, 9, 8, 11, 3, 18, 18, 12, 8]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [7, 3, 9, 9, 9, 9, 4, 11, 3, 11, 7, 334, 5, 8, 4, 7, 4, 16, 8, 5, 10, 4, 7, 7, 8, 3, 4, 310, 7, 6, 108, 9, 7, 9, 12, 5, 442, 9, 8, 5, 9, 11, 10, 14, 41, 5, 8, 4, 8, 44, 15, 13, 7, 8, 12, 7, 15, 11, 8, 4, 10, 6, 14, 36, 7, 6, 4]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [7, 10, 9, 7, 8, 10, 14, 7, 261, 76, 67, 13, 10, 8, 12, 8, 9, 9, 7, 7, 12, 6, 67, 12, 7, 9, 10, 9, 14, 8, 6, 13, 10, 7, 4, 11, 9, 10, 10, 5, 14, 9, 7, 6, 9, 9, 8, 7, 6, 14, 9, 9, 14, 8, 6, 9, 319, 6, 24, 20, 11, 9, 7, 14, 7, 11, 13, 9, 15, 13, 19]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [3, 8, 6, 4, 9, 8, 37, 42, 6, 6, 125, 39, 43, 4, 10, 42, 10, 32, 9, 5, 8, 13, 8, 7, 6, 5, 7, 6, 461, 16, 7, 8, 4, 4, 6, 4, 4, 8, 6, 15, 6, 7, 8, 12, 11, 10, 7, 4, 6, 7, 4, 14, 4, 8, 9, 3, 75, 6, 9, 4, 333, 15, 6, 6, 8, 120]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [7, 8, 8, 20, 3, 4, 10, 4, 4, 14, 4, 7, 9, 101, 4, 13, 4, 12, 6, 9, 11, 11, 6, 7, 9, 282, 7, 10, 5, 3, 3, 6, 6, 9, 9, 10, 22, 4, 4, 9, 4, 4, 10, 11, 7, 5, 10, 11, 5, 4, 8, 5, 44, 9, 4, 19, 5, 8, 5, 11, 12, 10, 4, 7, 5, 6, 10, 7, 56, 11]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 18, 7, 7, 7, 3, 8, 5, 3, 9, 10, 10, 6, 8, 3, 6, 3, 13, 6, 4, 7, 4, 7, 416, 12, 5, 9, 7, 9, 7, 6, 5, 53, 5, 6, 7, 12, 6, 5, 9, 9, 5, 6, 12, 5, 7, 4, 7, 209, 7, 8, 89, 8, 6, 8, 4, 7, 7, 8, 9, 9, 8, 4]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [4, 8, 6, 5, 9, 4, 7, 4, 6, 8, 4, 9, 5, 21, 6, 6, 7, 8, 6, 6, 8, 5, 220, 9, 17, 6, 4, 6, 8, 8, 6, 6, 3, 8, 3, 16, 9, 10, 5, 7, 6, 5, 6, 42, 9, 6, 8, 180, 5, 6, 8, 7, 6, 11, 5, 112, 3, 4, 7, 7, 9, 17, 7, 5]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [7, 11, 4, 16, 4, 5, 22, 8, 10, 9, 10, 24, 9, 7, 4, 7, 46, 31, 7, 8, 11, 5, 10, 7, 4, 6, 12, 11, 41, 6, 5, 11, 8, 7, 4, 13, 6, 8, 6, 9, 5, 7, 6, 6, 6, 10, 7, 6, 4, 6, 9, 8, 10, 8, 15, 11, 8, 4, 20, 5, 16, 7, 16, 21, 3, 9, 7, 21, 203, 6]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [10, 5, 7, 10, 6, 6, 3, 5, 5, 4, 8, 14, 12, 7, 7, 7, 9, 6, 10, 10, 5, 4, 5, 6, 7, 6, 9, 95, 9, 8, 4, 2, 5, 147, 8, 5, 4, 9, 4, 22, 10, 4, 6, 7, 80, 10, 7, 7, 9, 4, 4, 7, 12, 3, 8, 6, 7, 6, 11, 5, 4, 7, 8]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [12, 6, 7, 7, 6, 3, 6, 7, 7, 7, 7, 6, 6, 8, 12, 7, 9, 9, 5, 5, 17, 5, 11, 9, 5, 6, 11, 4, 7, 7, 4, 7, 10, 11, 7, 6, 8, 6, 8, 6, 8, 11, 7, 7, 10, 14, 9, 8, 6, 8, 8, 9, 4, 8, 130, 50, 11, 6, 9, 8, 155, 11, 7, 32, 8, 7, 8]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [15, 6, 4, 9, 4, 6, 9, 7, 9, 15, 10, 4, 88, 8, 9, 8, 4, 3, 18, 7, 8, 6, 9, 356, 5, 12, 7, 11, 182, 9, 15, 5, 9, 4, 9, 13, 7, 7, 6, 7, 7, 7, 7, 6, 9, 10, 7, 9, 8, 9, 8, 7, 8, 8, 4, 7, 7, 6, 10, 9, 7, 9, 6]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [13, 6, 9, 11, 8, 4, 10, 157, 6, 7, 7, 9, 7, 8, 8, 9, 4, 5, 9, 4, 12, 5, 43, 12, 209, 11, 7, 4, 10, 8, 8, 7, 21, 10, 7, 17, 9, 7, 10, 5, 7, 3, 6, 23, 8, 12, 11, 9, 7, 12, 15, 11, 5, 4, 420, 10, 12, 15, 9, 10, 8]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [7, 11, 6, 4, 5, 6, 7, 9, 5, 16, 12, 8, 15, 6, 5, 9, 6, 9, 8, 12, 13, 4, 6, 8, 9, 4, 9, 13, 508, 6, 5, 4, 11, 6, 10, 10, 17, 3, 11, 6, 6, 6, 11, 49, 8, 7, 11, 7, 6, 12, 14, 8, 178, 124, 16, 7, 9, 5, 8, 4, 8, 16, 9, 8, 10, 9, 18, 105]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [4, 3, 10, 6, 8, 9, 6, 8, 11, 8, 8, 8, 7, 9, 5, 9, 3, 8, 108, 10, 6, 4, 10, 10, 257, 4, 11, 5, 16, 8, 9, 9, 7, 8, 6, 8, 8, 4, 12, 8, 10, 7, 11, 5, 8, 9, 10, 6, 4, 96, 3, 8, 8, 6, 8, 7, 7, 4, 10, 8, 9, 11, 6, 6, 6, 34, 7, 10]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [16, 4, 6, 5, 10, 10, 11, 11, 9, 3, 7, 10, 4, 9, 9, 6, 7, 7, 9, 8, 6, 10, 7, 7, 9, 13, 15, 15, 7, 7, 10, 14, 5, 9, 9, 5, 11, 474, 3, 36, 4, 41, 8, 5, 10, 5, 10, 7, 4, 10, 8, 4, 3, 333, 4, 7, 4, 9, 7, 9, 7, 4, 6, 8, 9, 4, 8, 3, 60, 4, 8]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [11, 11, 7, 7, 4, 8, 9, 10, 6, 9, 6, 7, 3, 10, 7, 16, 15, 11, 8, 7, 4, 9, 10, 7, 7, 8, 7, 66, 13, 7, 8, 13, 8, 8, 7, 11, 10, 8, 9, 9, 8, 8, 7, 9, 8, 5, 7, 3, 17, 9, 9, 9, 16, 10, 8, 9, 6, 10, 11, 10, 6, 5, 12, 11, 21, 8, 15, 10, 23, 6, 7, 7, 7, 42]
length(C_list) = 74
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 12, 11, 5, 5, 9, 8, 11, 11, 10, 12, 8, 7, 11, 6, 9, 7, 9, 5, 8, 14, 13, 7, 160, 8, 9, 4, 12, 12, 6, 10, 9, 8, 6, 46, 6, 9, 8, 11, 10, 10, 4, 5, 105, 6, 9, 10, 13, 4, 12, 12, 5, 7, 6, 9, 8, 6, 4, 7, 8, 7, 19, 8]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [19, 8, 7, 9, 5, 7, 5, 22, 22, 11, 5, 5, 8, 10, 6, 7, 9, 10, 10, 12, 10, 6, 8, 8, 373, 9, 15, 7, 10, 10, 6, 12, 10, 144, 17, 4, 135, 5, 76, 12, 7, 9, 5, 5, 11, 6, 7, 23, 12, 10, 250, 11, 12, 5, 7, 12, 9, 9, 9, 12, 7, 8, 9, 19]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [22, 9, 7, 7, 14, 5, 8, 9, 13, 13, 6, 10, 4, 14, 10, 10, 5, 5, 7, 7, 10, 5, 10, 9, 9, 10, 3, 9, 13, 9, 3, 3, 14, 13, 18, 10, 10, 11, 9, 9, 14, 6, 6, 7, 8, 4, 12, 11, 10, 12, 11, 14, 16, 12, 12, 9, 12, 274, 8, 9, 5, 4, 8, 9]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [4, 10, 469, 9, 10, 7, 9, 7, 10, 11, 14, 14, 4, 9, 12, 5, 10, 11, 6, 4, 10, 7, 9, 6, 9, 551, 4, 11, 164, 9, 7, 5, 6, 13, 11, 6, 249, 7, 11, 8, 9, 6, 14, 12, 10, 10, 7, 10, 124, 11, 5, 7, 9, 5, 7, 10, 10, 9, 9, 6, 11, 8, 3, 10]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [4, 10, 9, 4, 4, 11, 11, 5, 4, 10, 9, 8, 12, 5, 9, 4, 5, 41, 9, 9, 7, 9, 6, 9, 11, 10, 8, 5, 9, 9, 6, 5, 21, 10, 7, 7, 8, 8, 9, 9, 7, 6, 9, 5, 7, 7, 12, 9, 5, 9, 10, 10, 7, 8, 91, 4, 9, 5, 9, 11, 11, 8, 4, 5, 10, 3, 9]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [8, 8, 6, 8, 5, 7, 9, 9, 10, 5, 8, 10, 8, 11, 8, 4, 7, 9, 7, 10, 4, 8, 157, 8, 10, 8, 6, 9, 9, 6, 11, 9, 8, 12, 7, 9, 8, 7, 9, 7, 9, 8, 12, 11, 7, 20, 7, 9, 7, 7, 14, 7, 8, 9, 24, 8, 7, 7, 10, 11, 16, 12, 9, 5, 6, 29, 12, 9, 9, 9]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [7, 10, 8, 4, 10, 5, 4, 10, 9, 9, 5, 11, 11, 5, 6, 7, 14, 7, 6, 9, 11, 6, 6, 5, 8, 9, 8, 2, 16, 8, 9, 9, 9, 7, 337, 8, 6, 217, 4, 7, 6, 5, 7, 7, 9, 11, 6, 17, 33, 4, 9, 8, 10, 9, 4, 5, 6, 7, 5, 9, 7, 20, 97]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [8, 7, 6, 8, 6, 6, 6, 9, 4, 7, 6, 13, 7, 7, 7, 12, 6, 6, 6, 16, 8, 9, 18, 9, 116, 7, 4, 10, 7, 12, 9, 7, 4, 9, 9, 32, 4, 4, 10, 9, 8, 10, 12, 10, 5, 10, 6, 8, 5, 8, 9, 4, 10, 10, 11, 4, 3, 10, 13, 6, 8, 5, 6, 11, 13, 10, 8, 9, 10]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [10, 9, 8, 12, 8, 8, 6, 13, 14, 15, 11, 10, 14, 8, 15, 10, 10, 10, 5, 7, 8, 9, 6, 10, 12, 8, 5, 5, 8, 6, 9, 221, 10, 8, 5, 10, 10, 10, 5, 9, 8, 6, 10, 10, 6, 9, 6, 11, 9, 10, 4, 7, 237, 8, 8, 7, 8, 9, 9, 12, 6, 12, 13, 8, 8, 4, 11, 7, 6, 8, 8, 7, 7]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [4, 7, 4, 3, 8, 7, 8, 9, 4, 5, 8, 11, 6, 12, 143, 4, 8, 5, 5, 6, 4, 8, 5, 7, 4, 8, 7, 6, 9, 9, 6, 5, 9, 10, 7, 8, 11, 10, 8, 7, 10, 4, 8, 3, 6, 6, 9, 10, 11, 10, 11, 8, 8, 10, 7, 4, 5, 4, 8, 19, 8, 5]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [6, 4, 5, 10, 11, 8, 7, 10, 8, 7, 6, 4, 7, 5, 11, 8, 8, 5, 296, 5, 5, 9, 6, 7, 8, 4, 8, 13, 7, 9, 5, 7, 8, 8, 9, 8, 10, 10, 5, 6, 4, 6, 4, 12, 7, 7, 8, 8, 7, 6, 9, 9, 4, 7, 9, 8, 6, 7, 5, 6, 7, 7, 5]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [4, 9, 4, 5, 7, 8, 6, 9, 14, 10, 13, 9, 14, 7, 12, 4, 4, 9, 5, 10, 8, 9, 5, 8, 4, 12, 6, 4, 8, 4, 4, 6, 7, 9, 7, 7, 5, 10, 9, 5, 6, 11, 7, 4, 6, 10, 12, 145, 9, 10, 20, 4, 8, 9, 4, 7, 9, 7, 9, 8, 6, 9, 4, 10, 10, 4, 7, 12, 8]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [4, 6, 13, 12, 8, 4, 4, 4, 6, 5, 9, 8, 12, 11, 12, 5, 6, 13, 12, 12, 7, 10, 10, 4, 8, 8, 266, 5, 4, 9, 4, 7, 8, 5, 12, 5, 4, 5, 8, 7, 6, 7, 185, 13, 5, 7, 8, 9, 8, 5, 10, 4]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = ┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
[4, 8, 3, 7, 8, 8, 4, 8, 7, 12, 4, 3, 7, 26, 7, 9, 6, 6, 4, 8, 5, 8, 7, 7, 9, 5, 6, 6, 5, 10, 10, 11, 7, 7, 16, 4, 5, 8, 10, 8, 7, 4, 11, 8, 9, 6, 7, 17, 6, 9, 4, 9, 10, 7, 10, 6, 9, 12, 7, 5, 8, 10, 7, 10, 7]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [13, 3, 6, 7, 6, 11, 11, 9, 8, 7, 7, 8, 8, 7, 10, 6, 7, 13, 6, 6, 9, 8, 7, 11, 6, 11, 11, 8, 9, 39, 7, 11, 10, 5, 4, 6, 4, 8, 107, 7, 12, 9, 7, 10, 8, 7, 11, 4, 10, 7, 10, 10, 16, 6, 20, 10, 6, 8, 7, 6, 10, 6, 8, 13, 7, 7, 10]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [4, 8, 7, 5, 9, 4, 6, 10, 5, 8, 6, 4, 7, 7, 10, 3, 10, 8, 11, 7, 8, 10, 6, 10, 4, 9, 7, 6, 9, 9, 6, 3, 6, 4, 5, 8, 3, 6, 9, 8, 9, 5, 8, 12, 9, 7, 13, 4, 16, 10, 9, 5, 6, 3, 8, 7, 12, 6, 13, 8, 17, 269, 13, 12, 9, 8]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [10, 7, 5, 10, 10, 9, 12, 11, 7, 7, 7, 6, 8, 5, 12, 9, 11, 10, 6, 7, 5, 7, 6, 4, 8, 13, 5, 8, 5, 5, 12, 8, 10, 5, 4, 5, 10, 8, 11, 8, 8, 6, 10, 10, 10, 6, 8, 28, 31, 15, 9, 9, 10, 6, 7, 7, 10, 9, 4, 9, 40, 9, 16, 9, 6, 9]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [5, 2, 6, 4, 3, 4, 4, 4, 3, 5, 3, 4, 6, 12, 5, 4, 5, 6, 8, 6, 6, 10, 6, 4, 4, 7, 5, 6, 108, 4, 6, 5, 4, 6, 5, 283, 5, 6, 6, 4, 4, 6, 6, 6, 5, 4, 7, 5, 5, 7, 8, 250, 16, 6, 14]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [4, 4, 7, 10, 11, 8, 4, 9, 12, 5, 4, 8, 9, 7, 5, 4, 3, 8, 4, 8, 10, 122, 13, 11, 7, 6, 7, 10, 8, 13, 9, 11, 9, 10, 6, 9, 6, 6, 4, 6, 6, 12, 16, 10, 11, 15, 5, 12, 10, 9, 6, 5, 8, 6, 7, 12, 8, 8, 9, 9, 6, 4, 7, 8, 8, 12, 6, 4, 6]
length(C_list) = 69
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [11, 12, 9, 5, 5, 7, 6, 3, 9, 6, 5, 11, 7, 6, 10, 6, 6, 7, 5, 7, 4, 7, 6, 6, 10, 9, 10, 417, 7, 10, 11, 8, 4, 3, 5, 4, 9, 11, 8, 7, 4, 10, 5, 6, 6, 24, 56, 8, 9, 5, 6, 373, 6, 6, 3, 6, 8, 7, 6, 8, 4, 4, 7, 9]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = [6, 7, 6, 5, 8, 8, 7, 7, 17, 9, 8, 9, 7, 10, 5, 133, 4, 6, 6, 10, 4, 6, 4, 4, 6, 11, 9, 4, 5, 11, 10, 7, 6, 10, 20, 5, 10, 8, 8, 12, 7, 4, 18, 6, 8, 6, 11, 8, 10, 8, 9, 6, 5, 4, 4, 4, 4, 20, 14, 6]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [24, 10, 14, 4, 16, 15, 6, 14, 6, 9, 9, 6, 17, 6, 18, 6, 7, 4, 18, 6, 7, 18, 16, 11, 5, 18, 7, 22, 18, 5, 9, 212, 5, 5, 8, 15, 5, 16, 6, 60, 16, 8, 16, 13, 5, 6, 115, 4, 16, 5, 16, 10, 16, 17, 6, 6, 18, 19, 18, 17, 15, 15, 18, 20]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 5, 147, 9, 7, 6, 8, 7, 6, 14, 39, 4, 4, 10, 8, 9, 7, 5, 6, 11, 7, 7, 79, 4, 6, 9, 5, 7, 8, 185, 136, 9, 10, 9, 5, 9, 400, 5, 7, 6, 6, 8, 10, 5, 4, 7, 7, 5, 6, 4, 7, 6, 4, 7, 82, 5, 7, 11, 4, 9]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [4, 4, 9, 10, 9, 10, 14, 4, 9, 14, 10, 21, 10, 8, 9, 16, 18, 10, 11, 5, 20, 5, 10, 12, 9, 10, 25, 7, 7, 17, 8, 5, 19, 25, 8, 7, 8, 17, 18, 552, 14, 9, 18, 17, 7, 23, 10, 8, 10, 9, 7, 9, 9, 9, 9, 10, 11, 7, 17, 12, 11, 19, 15, 151, 9, 16]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [6, 4, 7, 8, 7, 7, 9, 6, 10, 8, 6, 12, 9, 10, 8, 11, 9, 7, 7, 5, 7, 9, 30, 41, 7, 95, 7, 9, 7, 9, 16, 9, 10, 11, 7, 15, 9, 11, 4, 32, 9, 7, 10, 9, 8, 6, 10, 10, 7, 7, 37, 5, 11, 7, 9, 9, 9, 7, 20, 7, 11, 7]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [4, 16, 6, 12, 9, 5, 7, 5, 8, 4, 15, 8, 10, 8, 17, 3, 8, 5, 28, 11, 8, 7, 5, 19, 8, 7, 11, 159, 10, 11, 6, 6, 8, 16, 4, 6, 3, 5, 9, 5, 9, 14, 7, 9, 5, 3, 15, 7, 6, 76, 7, 17, 9, 8, 4, 5, 10, 8, 5, 23, 9]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [9, 16, 7, 8, 10, 8, 6, 10, 19, 3, 6, 8, 7, 23, 10, 11, 125, 9, 6, 4, 10, 11, 7, 5, 11, 12, 5, 6, 9, 8, 8, 8, 7, 10, 6, 9, 14, 7, 7, 8, 75, 9, 9, 4, 10, 4, 7, 8, 24, 8, 10, 9, 18, 21, 25, 19, 17, 14, 9]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [8, 3, 12, 4, 4, 5, 7, 6, 7, 14, 4, 9, 7, 4, 4, 11, 7, 9, 8, 7, 5, 4, 6, 8, 5, 9, 8, 4, 5, 7, 6, 8, 11, 10, 8, 4, 6, 8, 6, 15, 7, 6, 6, 9, 6, 4, 10, 9, 8, 7, 40, 7, 6, 7, 6, 8, 8, 7, 7, 22]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [12, 4, 9, 7, 8, 3, 32, 162, 4, 11, 6, 13, 10, 11, 6, 4, 5, 10, 4, 8, 9, 8, 5, 11, 3, 20, 5, 3, 2, 4, 261, 7, 5, 6, 6, 5, 7, 25, 7, 9, 7, 5, 6, 5, 11, 6, 6, 6, 10, 19, 5, 62, 9, 8, 5, 203, 3, 5, 6, 8, 7, 7, 7, 6, 83]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [3, 6, 8, 7, 9, 6, 4, 21, 7, 7, 8, 7, 5, 8, 8, 11, 19, 7, 9, 11, 10, 9, 5, 8, 7, 217, 9, 7, 18, 10, 6, 10, 4, 4, 7, 37, 7, 15, 7, 3, 11, 6, 24, 12, 9, 6, 14, 4, 10, 7, 15, 9, 4, 10, 11, 8, 7, 4]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [3, 11, 5, 6, 8, 7, 13, 11, 15, 14, 16, 17, 4, 13, 13, 4, 8, 9, 15, 14, 8, 7, 6, 7, 13, 7, 14, 7, 16, 5, 8, 13, 15, 14, 13, 5, 8, 8, 14, 18, 8, 6, 7, 17, 9, 16, 7, 16, 7, 8, 107, 14, 16]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [16, 7, 16, 8, 7, 6, 10, 10, 4, 7, 7, 8, 4, 6, 7, 5, 6, 10, 3, 8, 10, 7, 8, 4, 9, 8, 11, 7, 8, 11, 8, 12, 10, 4, 9, 6, 4, 4, 7, 6, 3, 4, 17, 5, 539, 17, 562, 8, 6, 10, 10, 8, 13, 6, 4, 8, 7, 12, 34, 6, 9, 7, 9]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [6, 7, 5, 4, 4, 3, 15, 5, 9, 8, 7, 11, 8, 4, 5, 5, 4, 8, 10, 7, 7, 6, 13, 10, 3, 4, 5, 7, 6, 4, 5, 8, 8, 8, 3, 7, 11, 7, 8, 10, 4, 8, 4, 223, 10, 9, 9, 11, 4, 7, 10, 8, 8, 7, 7, 4, 8]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [6, 4, 10, 6, 8, 8, 3, 8, 5, 9, 4, 9, 10, 15, 9, 6, 18, 7, 10, 6, 9, 8, 14, 10, 12, 7, 14, 6, 10, 12, 8, 10, 5, 4, 6, 6, 8, 8, 5, 4, 6, 10, 11, 7, 8, 6, 6, 6, 11, 7, 64, 6, 93, 99, 11, 446]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [2, 8, 11, 11, 9, 8, 10, 8, 7, 12, 10, 10, 7, 12, 8, 10, 5, 15, 12, 12, 15, 5, 6, 7, 10, 7, 39, 4, 5, 6, 8, 9, 6, 9, 10, 6, 7, 3, 11, 10, 11, 6, 12, 12, 8, 10, 5, 17, 9, 9, 6, 5, 10, 9, 10, 8, 13, 10, 13, 13, 11, 10, 11, 8, 10, 6, 13, 19]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [7, 8, 9, 9, 6, 8, 8, 9, 4, 9, 8, 7, 562, 10, 6, 11, 9, 7, 44, 10, 8, 12, 115, 4, 6, 10, 39, 16, 9, 7, 10, 12, 4, 10, 8, 7, 7, 11, 10, 16, 8, 9, 11, 13, 5, 5, 9, 20, 345, 6, 8, 8, 9, 5, 9, 11, 7, 12, 4, 7, 10, 9, 11]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [10, 5, 6, 4, 8, 8, 9, 7, 3, 8, 10, 9, 6, 9, 7, 9, 4, 5, 13, 9, 7, 6, 8, 9, 11, 3, 6, 6, 9, 6, 10, 10, 11, 9, 10, 11, 11, 7, 10, 9, 7, 6, 6, 8, 13, 13, 5, 7, 7, 8, 39, 8, 9, 11, 2, 6, 188, 6, 10, 156, 7, 6]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [13, 7, 11, 3, 5, 4, 4, 5, 4, 4, 3, 3, 3, 17, 4, 6, 5, 6, 5, 5, 6, 5, 11, 4, 9, 571, 5, 10, 13, 18, 7, 12, 13, 4, 3, 3, 4, 14, 4, 5, 12, 6, 35, 3, 7, 10, 8, 8, 15]
length(C_list) = 49
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [4, 7, 6, 146, 10, 6, 9, 12, 6, 7, 7, 9, 9, 12, 6, 8, 10, 10, 12, 9, 10, 6, 12, 7, 8, 8, 6, 7, 3, 4, 8, 4, 6, 7, 4, 3, 7, 7, 68, 26, 7, 7, 7, 7, 11, 10, 11, 135, 21, 12, 7, 8, 10, 10, 10, 8, 9, 8, 8, 7, 17, 10, 9, 16]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [4, 11, 9, 5, 10, 11, 10, 10, 9, 10, 15, 10, 4, 4, 10, 7, 15, 6, 10, 6, 7, 9, 7, 10, 10, 9, 9, 10, 9, 9, 9, 6, 9, 11, 11, 10, 8, 7, 8, 11, 14, 179, 10, 6, 7, 10, 9, 16, 4, 9, 48, 10, 12, 12, 6, 12, 8, 33, 14, 6, 11, 7, 12, 10, 5, 11, 14]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [6, 9, 9, 6, 8, 7, 4, 10, 4, 6, 9, 7, 9, 17, 13, 8, 7, 9, 9, 13, 10, 6, 6, 6, 9, 8, 7, 6, 8, 9, 9, 9, 8, 5, 9, 9, 10, 11, 11, 5, 6, 9, 10, 4, 4, 7, 8, 7, 6, 3, 459, 9, 4, 14, 7, 13, 591, 13, 10, 9, 8, 3, 9, 17, 11, 9, 9, 9]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [4, 8, 9, 5, 9, 10, 9, 7, 10, 5, 8, 9, 10, 8, 11, 8, 10, 9, 14, 10, 9, 10, 9, 12, 9, 10, 5, 5, 9, 6, 9, 38, 34, 9, 4, 10, 10, 8, 8, 9, 10, 10, 9, 10, 29, 19, 10, 10, 9, 9, 9, 11, 5, 17, 3, 10, 12, 8, 9, 9, 9, 3, 12, 13, 12, 10, 12]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [7, 8, 6, 12, 10, 9, 4, 6, 8, 6, 8, 10, 10, 145, 7, 4, 9, 9, 7, 9, 8, 9, 7, 13, 9, 8, 8, 8, 8, 9, 7, 7, 11, 28, 9, 29, 10, 6, 3, 9, 10, 8, 8, 199, 11, 7, 10, 6, 5, 10, 15, 10, 33, 9, 5, 5, 7, 5, 11, 152, 8, 10, 7, 6, 12, 8, 24]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [4, 18, 10, 16, 11, 6, 7, 5, 234, 7, 6, 7, 8, 3, 4, 6, 5, 3, 10, 9, 8, 9, 14, 193, 5, 6, 6, 8, 12, 5, 8, 6, 9, 8, 8, 7, 8, 9, 15, 8, 6, 11, 8, 7, 7, 5, 7, 3, 8, 8, 10, 8, 5, 13, 5, 10, 5, 13, 9, 9, 10, 33, 5, 5, 7]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [20, 7, 6, 13, 15, 6, 8, 52, 4, 8, 10, 7, 6, 5, 7, 6, 7, 7, 5, 7, 15, 7, 6, 9, 8, 5, 4, 11, 4, 6, 5, 12, 6, 10, 12, 7, 7, 4, 6, 11, 4, 9, 4, 8, 11, 11, 6, 6, 6, 4, 6, 7, 9, 31, 73, 8, 25, 6, 8, 165, 4, 10, 13, 6, 3, 445, 8, 7]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [4, 7, 5, 9, 8, 7, 20, 6, 16, 10, 8, 12, 12, 10, 8, 8, 8, 106, 4, 9, 9, 285, 57, 8, 17, 11, 4, 7, 4, 11, 8, 5, 129, 7, 9, 6, 6, 6, 5, 9, 7, 3, 7, 5, 40, 7, 7, 12, 15, 10, 10, 5, 12, 10, 10, 11, 8, 9, 7, 7, 11, 8, 9, 13, 9, 7, 8, 5]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [5, 7, 7, 20, 3, 9, 3, 6, 232, 9, 6, 8, 5, 10, 7, 4, 6, 6, 11, 4, 11, 6, 6, 8, 46, 7, 14, 13, 4, 9, 6, 11, 6, 11, 9, 6, 11, 49, 5, 5, 9, 6, 5, 7, 10, 5, 9, 6, 12, 4, 5, 5, 3, 5, 8, 9, 9, 5, 5, 9, 6, 3]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [5, 7, 22, 8, 5, 8, 7, 7, 7, 6, 7, 5, 4, 7, 6, 8, 3, 3, 11, 5, 4, 45, 8, 9, 6, 8, 5, 4, 5, 9, 8, 5, 4, 6, 5, 8, 5, 4, 8, 9, 3, 8, 7, 6, 6, 7, 7, 4, 4, 8, 7, 7, 7, 7, 6, 5, 6, 4, 5, 9, 9]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [5, 8, 10, 6, 7, 10, 8, 8, 10, 7, 7, 7, 10, 10, 131, 10, 4, 7, 7, 7, 6, 14, 9, 9, 10, 9, 5, 65, 6, 11, 6, 8, 8, 8, 9, 7, 12, 8, 9, 8, 8, 7, 7, 10, 8, 8, 5, 7, 9, 9, 5, 10, 9, 7, 4, 8, 8, 6, 7, 6, 9, 9, 5, 8, 9, 11, 8, 10, 11, 9]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [14, 6, 7, 4, 4, 6, 8, 7, 9, 5, 4, 6, 7, 6, 7, 4, 6, 18, 8, 6, 7, 8, 152, 158, 9, 204, 8, 8, 6, 6, 11, 8, 7, 5, 5, 10, 12, 6, 8, 9, 7, 8, 11, 9, 4, 9, 10, 11, 8, 6, 15, 8, 5, 10, 544, 11, 9]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [3, 5, 5, 5, 5, 6, 68, 9, 10, 7, 7, 6, 6, 9, 4, 7, 7, 126, 5, 20, 6, 7, 6, 10, 11, 7, 8, 12, 6, 5, 8, 10, 7, 6, 6, 6, 5, 8, 7, 4, 6, 5, 8, 6, 46, 12, 10, 6, 7, 6, 9, 10, 6, 7, 9, 173, 6, 11, 10, 11, 7]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [5, 7, 4, 3, 6, 6, 7, 5, 92, 4, 4, 3, 12, 12, 11, 10, 9, 6, 8, 11, 5, 4, 5, 3, 6, 7, 5, 8, 7, 16, 10, 4, 5, 6, 11, 14, 12, 229, 5, 5, 5, 5, 8, 7, 4, 9, 8, 8, 11, 6, 9]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [11, 11, 8, 4, 8, 4, 24, 9, 6, 18, 6, 6, 5, 22, 9, 8, 8, 9, 12, 16, 6, 14, 8, 7, 42, 4, 8, 7, 12, 7, 11, 9, 8, 9, 12, 200, 5, 8, 4, 10, 6, 8, 6, 11, 8, 6, 7, 10, 8, 9, 13, 197, 5, 5, 14, 51, 10]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [12, 6, 6, 9, 7, 8, 6, 7, 260, 122, 6, 9, 11, 6, 12, 4, 8, 5, 14, 3, 8, 8, 7, 6, 12, 10, 7, 6, 5, 6, 8, 8, 13, 4, 6, 10, 7, 7, 7, 9, 49, 6, 15, 8, 7, 11, 4, 7, 6, 8, 7, 8, 15, 4, 7, 384, 6, 7, 12, 8, 10, 9, 9]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [12, 8, 11, 7, 8, 8, 7, 8, 8, 6, 7, 9, 7, 11, 7, 10, 8, 6, 6, 9, 9, 4, 6, 10, 3, 9, 6, 6, 8, 10, 187, 10, 11, 7, 8, 7, 10, 7, 4, 9, 7, 8, 9, 7, 12, 7, 5, 6, 6, 5, 5, 7, 9, 350, 6, 9, 8, 10, 9, 9]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [5, 5, 11, 9, 13, 10, 7, 6, 7, 4, 9, 4, 8, 7, 7, 4, 6, 8, 9, 3, 7, 8, 6, 11, 9, 4, 3, 12, 6, 12, 7, 7, 12, 7, 5, 11, 8, 6, 7, 12, 6, 8, 7, 9, 6, 19, 9, 8, 8, 8, 11, 22, 9, 5, 13, 8, 10, 4, 8, 5, 7, 13, 8, 18]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [21, 8, 10, 5, 4, 8, 8, 5, 4, 7, 7, 11, 6, 10, 7, 9, 4, 5, 7, 6, 3, 5, 7, 7, 6, 10, 5, 9, 4, 9, 8, 6, 10, 20, 6, 7, 7, 5, 6, 8, 9, 5, 7, 7, 10, 10, 6, 456, 290, 14, 12, 185, 238, 8, 4, 10, 12, 8, 231, 9, 8]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [12, 8, 8, 6, 8, 5, 6, 4, 4, 11, 7, 7, 10, 21, 7, 6, 11, 7, 3, 9, 3, 9, 9, 7, 4, 6, 12, 7, 9, 5, 6, 5, 9, 4, 4, 7, 11, 9, 95, 165, 8, 6, 8, 4, 17, 9, 6, 10, 11, 7, 8, 4, 4, 10, 6, 5, 8, 14, 5, 9, 15, 11, 5, 9, 12, 9]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [7, 11, 7, 10, 4, 12, 9, 11, 6, 6, 8, 6, 8, 6, 16, 175, 4, 4, 11, 7, 13, 8, 3, 7, 9, 7, 12, 12, 13, 4, 6, 4, 7, 5, 8, 6, 6, 8, 6, 7, 6, 8, 3, 12, 6, 15, 15, 7, 4, 9, 4, 4, 11, 8, 5, 19, 11, 9]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [13, 6, 9, 5, 12, 6, 7, 12, 7, 389, 14, 6, 487, 5, 7, 8, 14, 8, 8, 12, 8, 5, 8, 7, 9, 10, 15, 9, 295, 5, 8, 9, 10, 7, 8, 10, 4, 12, 12, 5, 86, 6, 10, 4, 3, 6, 7, 176, 6, 6, 4, 11, 8, 3, 3, 6, 8, 11, 4, 8, 4, 8, 4, 7, 7, 7, 8, 9, 4, 10, 8, 9, 7, 7, 8]
length(C_list) = 75
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [10, 5, 26, 9, 43, 8, 4, 5, 8, 6, 11, 13, 4, 11, 8, 6, 6, 3, 9, 5, 9, 4, 7, 7, 8, 4, 447, 9, 4, 8, 5, 3, 8, 6, 6, 8, 10, 9, 7, 6, 9, 8, 9, 6, 8, 9, 8, 11, 12, 5, 8, 60, 66, 4, 79, 115, 9, 7, 7, 4, 6, 5, 8]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [5, 7, 6, 6, 4, 14, 8, 7, 6, 5, 7, 11, 13, 6, 13, 8, 7, 9, 6, 7, 3, 5, 3, 6, 144, 16, 7, 9, 5, 6, 13, 9, 12, 4, 13, 8, 5, 14, 6, 8, 8, 9, 12, 10, 5, 13, 6, 11, 7, 5, 4, 6, 12, 7, 8, 6, 8, 48, 9, 7, 5, 7, 6, 3, 10, 9]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [20, 9, 5, 4, 15, 5, 7, 7, 7, 12, 9, 9, 6, 11, 13, 5, 12, 8, 20, 6, 16, 17, 7, 8, 5, 8, 10, 10, 10, 10, 10, 17, 12, 5, 14, 15, 6, 10, 15, 15, 14, 7, 7, 14, 11, 29, 6, 5, 6, 14, 12, 15, 8, 9, 11, 80, 43, 13, 10, 14, 10, 7, 10, 15, 8]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [11, 8, 6, 8, 7, 7, 11, 10, 18, 7, 8, 6, 8, 11, 11, 9, 9, 4, 8, 3, 6, 3, 6, 4, 8, 10, 15, 11, 6, 6, 9, 3, 6, 3, 16, 7, 6, 7, 20, 9, 10, 8, 9, 7, 11, 9, 10, 9, 9, 4, 7, 7, 14, 9, 5, 9, 8, 12, 6, 8, 7, 7, 9, 9, 13, 4, 8, 7, 7, 10, 11]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [3, 6, 9, 12, 15, 7, 7, 8, 14, 9, 6, 11, 10, 9, 9, 13, 35, 8, 16, 6, 12, 8, 9, 10, 10, 12, 9, 7, 10, 390, 12, 7, 52, 10, 5, 18, 11, 11, 6, 5, 7, 4, 4, 7, 14, 12, 14, 8, 10, 9, 10, 9, 17, 6, 8, 7, 9, 9, 10, 9, 7, 8, 10, 8]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [7, 10, 7, 8, 11, 21, 5, 11, 6, 5, 11, 5, 12, 12, 8, 37, 10, 11, 8, 8, 11, 7, 3, 5, 7, 12, 5, 7, 10, 14, 4, 10, 10, 11, 13, 8, 11, 10, 13, 6, 7, 10, 11, 5, 7, 8, 10, 6, 8, 9, 6, 13, 9, 13, 9, 5, 8, 11, 10, 6, 5, 3, 9, 7, 10, 8, 10, 10, 12, 5, 10]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [13, 7, 5, 9, 12, 8, 7, 12, 10, 12, 9, 4, 8, 8, 12, 9, 7, 8, 6, 8, 8, 11, 8, 9, 5, 7, 12, 12, 9, 8, 8, 8, 14, 228, 7, 9, 9, 7, 10, 9, 7, 286, 7, 9, 9, 9, 10, 9, 8, 13, 5, 10, 7, 12, 12, 8, 7, 11, 7, 10, 10, 10, 7, 8, 24, 10, 5]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 10, 11, 9, 9, 13, 7, 5, 14, 9, 8, 8, 8, 10, 9, 7, 6, 10, 9, 11, 7, 7, 450, 9, 11, 4, 8, 7, 10, 11, 16, 6, 16, 6, 7, 10, 9, 7, 9, 232, 18, 7, 10, 7, 9, 14, 6, 7, 7, 9, 4, 15, 6, 7, 8, 15, 52, 4, 7, 6, 10, 9, 9, 11, 6]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [5, 11, 6, 4, 12, 7, 10, 10, 8, 5, 18, 9, 7, 9, 10, 10, 4, 10, 9, 7, 7, 8, 10, 5, 9, 8, 10, 11, 11, 4, 6, 11, 8, 10, 7, 5, 4, 10, 7, 10, 8, 8, 9, 7, 15, 10, 10, 10, 18, 9, 14, 11, 14, 8, 9, 9]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [16, 6, 5, 7, 6, 8, 7, 9, 10, 9, 13, 9, 9, 4, 11, 10, 11, 4, 4, 14, 9, 7, 8, 5, 7, 7, 10, 8, 12, 11, 11, 8, 4, 13, 10, 19, 5, 9, 10, 7, 7, 7, 14, 7, 7, 12, 4, 9, 12, 8, 219, 9, 5, 4, 11, 11, 6, 9, 10, 10, 9]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [4, 5, 9, 8, 10, 8, 10, 16, 5, 8, 7, 5, 15, 110, 7, 8, 9, 8, 8, 22, 9, 9, 8, 7, 10, 8, 3, 6, 6, 7, 185, 7, 8, 7, 10, 9, 11, 9, 16, 10, 7, 9, 9, 8, 8, 4, 8, 11, 9, 9, 8, 22, 10, 4, 11, 5, 7, 7, 15, 9, 9]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [9, 9, 5, 10, 4, 4, 9, 5, 10, 52, 3, 8, 7, 10, 10, 11, 8, 4, 10, 9, 10, 16, 7, 12, 10, 8, 5, 10, 13, 11, 3, 10, 5, 13, 7, 16, 8, 9, 6, 9, 9, 8, 8, 6, 7, 8, 10, 7, 8, 123, 9, 10, 8, 11, 11, 32, 10, 5, 4, 3, 7, 10, 6, 10, 8, 7, 5, 7]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [4, 15, 4, 13, 4, 8, 10, 10, 9, 9, 4, 4, 9, 9, 9, 7, 6, 7, 13, 9, 9, 10, 16, 7, 5, 7, 19, 9, 18, 9, 9, 9, 10, 17, 6, 3, 14, 5, 16, 4, 9, 6, 29, 8, 11, 10, 5, 9, 8, 7, 7, 12, 22, 8, 7, 8, 9, 9, 11, 9, 10, 9]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 6, 4, 3, 4, 8, 7, 3, 11, 6, 10, 4, 5, 11, 8, 6, 8, 6, 3, 6, 11, 5, 7, 5, 10, 5, 5, 4, 4, 8, 6, 4, 10, 12, 7, 4, 7, 8, 9, 3, 6, 3, 4, 11, 10, 11, 10, 7, 4, 4, 9, 5, 11, 6, 13, 12, 3, 5]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 9, 6, 7, 6, 8, 5, 8, 8, 7, 5, 4, 10, 9, 7, 8, 4, 5, 9, 9, 6, 6, 3, 7, 6, 4, 12, 62, 6, 5, 10, 10, 5, 4, 9, 178, 7, 4, 36, 4, 113, 9, 8, 19, 5, 8, 9, 4, 10, 9, 9, 10, 6, 4, 14, 3, 7, 10, 7, 8, 4, 8, 8, 8, 4, 5, 4, 5]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [5, 9, 17, 6, 11, 9, 12, 9, 9, 8, 9, 9, 7, 11, 10, 13, 10, 11, 7, 9, 12, 6, 9, 11, 11, 10, 7, 11, 8, 9, 12, 9, 6, 313, 11, 4, 12, 13, 5, 8, 10, 12, 4, 115, 6, 9, 8, 6, 7, 9, 7, 7, 10, 15, 4, 10, 6, 7, 10, 8, 10, 11, 7, 9]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [6, 8, 7, 7, 4, 8, 6, 11, 6, 10, 10, 8, 8, 7, 8, 6, 7, 6, 8, 4, 10, 7, 7, 7, 7, 8, 10, 11, 6, 9, 7, 8, 5, 16, 6, 8, 5, 6, 7, 7, 5, 7, 10, 7, 9, 8, 7, 4, 10, 6, 9, 13, 8, 7, 4, 6, 6, 8, 9, 7, 3, 7, 8, 7, 6, 5, 9]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [7, 7, 5, 9, 5, 9, 6, 8, 9, 8, 8, 4, 10, 8, 11, 12, 7, 11, 9, 4, 5, 5, 3, 9, 6, 6, 8, 11, 10, 8, 8, 4, 5, 7, 8, 9, 7, 9, 10, 9, 5, 9, 10, 9, 8, 7, 8, 11, 4, 9, 10, 7, 8, 8, 13, 7, 9, 10, 13, 6, 13, 6, 12]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [11, 11, 254, 4, 8, 7, 6, 4, 11, 7, 9, 9, 7, 8, 4, 9, 8, 4, 10, 12, 8, 5, 4, 9, 7, 4, 197, 661, 7, 13, 9, 9, 11, 11, 5, 10, 9, 11, 6, 13, 9, 9, 9, 7, 11, 12, 11, 13, 8, 9, 11, 12, 48, 13, 17, 8, 9, 4, 7, 9, 8, 13, 5, 11, 10, 8, 10, 10, 7, 6, 8]
length(C_list) = 71
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [14, 5, 6, 6, 9, 18, 11, 6, 7, 9, 6, 7, 6, 3, 6, 11, 4, 7, 5, 9, 24, 3, 8, 4, 8, 9, 10, 5, 493, 10, 9, 7, 11, 9, 8, 6, 6, 11, 10, 7, 7, 8, 9, 4, 5, 9, 8, 6, 5, 12, 5, 10, 15]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [4, 8, 7, 7, 6, 7, 9, 6, 7, 4, 6, 8, 10, 3, 9, 3, 16, 8, 7, 9, 4, 7, 8, 8, 9, 10, 2, 6, 6, 8, 4, 9, 11, 6, 18, 8, 4, 6, 4, 4, 9, 8, 8, 7, 234, 7, 8, 11, 6, 10, 7, 8, 6, 123, 7, 8, 10, 9, 6, 10, 6, 6, 8, 26, 11, 8]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [9, 6, 9, 8, 10, 8, 11, 7, 8, 7, 8, 4, 5, 9, 8, 11, 7, 8, 8, 6, 14, 16, 8, 10, 12, 8, 8, 9, 12, 12, 4, 11, 8, 22, 13, 6, 8, 5, 8, 9, 10, 8, 7, 9, 7, 8, 10, 9, 7, 7, 39, 7, 11, 12, 10, 12, 7, 11, 10, 12, 7, 21, 8, 8]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [7, 9, 10, 6, 8, 6, 7, 10, 9, 6, 4, 11, 7, 6, 4, 9, 6, 8, 11, 10, 15, 6, 8, 6, 10, 6, 14, 12, 57, 10, 6, 3, 4, 7, 5, 14, 8, 7, 9, 20, 8, 6, 10, 15, 7, 61, 7]
length(C_list) = 47
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [13, 15, 7, 6, 7, 4, 5, 4, 8, 89, 3, 8, 5, 6, 5, 10, 3, 9, 9, 14, 7, 173, 5, 3, 6, 15, 6, 14, 12, 10, 13, 7, 3, 6, 9, 10, 6, 4, 3, 7, 5, 13, 7, 9, 5, 6, 6, 7, 35, 9]
length(C_list) = 50
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [4, 11, 6, 5, 5, 5, 3, 5, 5, 7, 6, 5, 6, 5, 6, 7, 7, 7, 6, 7, 4, 9, 8, 8, 5, 5, 6, 6, 8, 7, 6, 6, 8, 7, 6, 4, 12, 8, 5, 6, 9, 4, 9, 8, 8, 6, 11, 8, 6, 6, 7, 7, 8, 5, 4, 6, 10, 4, 8, 5, 7, 3, 7, 87]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [7, 9, 12, 10, 3, 11, 4, 10, 8, 11, 12, 8, 11, 8, 10, 95, 9, 6, 11, 9, 4, 3, 230, 11, 8, 9, 11, 9, 177, 11, 10, 11, 13, 12, 9, 12, 6, 11, 10, 11, 10, 14, 53, 8, 8, 14, 9, 34, 3, 216, 32, 11, 9, 11, 144, 7, 10, 10, 9, 9, 10, 567, 12, 10, 6, 7]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [5, 7, 3, 9, 8, 4, 9, 15, 9, 32, 32, 7, 14, 8, 5, 13, 353, 11, 6, 6, 7, 8, 9, 8, 15, 3, 5, 8, 8, 4, 8, 10, 3, 9, 9, 18, 9, 9, 3, 8, 8, 8, 9, 7, 8, 4, 8, 8, 10, 8, 9, 9, 7, 8, 8, 7, 8, 6, 4, 5, 12, 10, 14, 4, 3, 8, 7, 7, 8, 8, 8, 9, 4]
length(C_list) = 73
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [6, 5, 7, 8, 3, 7, 11, 8, 4, 9, 8, 8, 8, 4, 7, 8, 10, 13, 8, 9, 8, 9, 7, 8, 3, 10, 5, 6, 7, 8, 9, 9, 9, 4, 10, 8, 7, 10, 6, 7, 6, 4, 10, 9, 9, 7, 13, 5, 4, 9, 6, 8, 9, 141, 514, 6, 9, 4, 8, 16, 10, 5, 9, 9, 9]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [4, 7, 9, 11, 8, 10, 9, 5, 7, 8, 10, 8, 13, 5, 5, 9, 5, 10, 12, 8, 8, 5, 14, 11, 9, 8, 8, 6, 10, 10, 8, 12, 4, 8, 8, 3, 8, 11, 12, 9, 8, 11, 4, 11, 5, 13, 11, 12, 5, 7, 5, 10, 4, 5, 4, 43, 11, 9, 8, 14, 5, 15, 3, 8, 4, 15, 10, 10, 13, 4]
length(C_list) = 70
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [4, 5, 6, 7, 5, 9, 10, 10, 8, 6, 8, 8, 3, 7, 9, 7, 7, 10, 8, 10, 269, 10, 7, 8, 8, 5, 7, 7, 6, 10, 6, 14, 6, 7, 5, 4, 15, 7, 14, 6, 16, 10, 10, 8, 7, 9, 6, 10, 43, 10, 8, 5, 9, 9, 10, 8, 22, 12, 7]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [6, 6, 6, 5, 7, 7, 12, 7, 10, 9, 10, 10, 11, 8, 7, 6, 4, 9, 5, 8, 5, 9, 3, 7, 6, 10, 6, 10, 7, 9, 7, 7, 10, 7, 6, 7, 6, 8, 7, 8, 134, 6, 10, 9, 10, 185, 6, 9, 5, 10, 6, 8, 7, 34, 4, 8, 9, 6, 7, 4, 4, 7, 7, 6, 4]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [7, 7, 5, 10, 6, 7, 7, 12, 10, 8, 10, 6, 7, 5, 10, 8, 9, 12, 10, 9, 10, 7, 9, 11, 152, 29, 6, 8, 7, 9, 9, 6, 9, 13, 9, 6, 8, 7, 8, 13, 7, 10, 10, 160, 9, 7, 11, 9, 10, 11, 4, 11, 13, 7, 11, 5, 6, 10, 8, 10, 19, 392, 4, 8, 7, 9, 10, 11, 7, 10, 12, 10]
length(C_list) = 72
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
[length(mis) for mis = unique(C_list)] = [4, 5, 5, 8, 12, 8, 4, 9, 6, 8, 13, 26, 4, 7, 9, 8, 18, 7, 7, 13, 423, 12, 5, 8, 577, 14, 10, 4, 9, 8, 10, 7, 8, 4, 14, 18, 6, 6, 4, 7, 7, 7, 29, 12, 5, 12, 3, 4, 10, 8, 11, 5, 11, 12, 10, 5, 235, 6, 24, 7, 10, 8, 7, 59, 13, 6]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 177
[length(mis) for mis = unique(C_list)] = [4, 7, 6, 53, 21, 9, 8, 8, 30, 4, 8, 10, 10, 4, 4, 7, 7, 8, 84, 7, 15, 5, 6, 8, 9, 6, 5, 10, 8, 24, 6, 8, 8, 9, 9, 6, 7, 21, 5, 6, 5, 17, 6, 12, 4, 8, 9, 7, 9, 10, 6, 8, 8, 8, 8, 13, 9, 9, 7, 10, 6, 8, 9, 36, 8, 19]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 178
[length(mis) for mis = unique(C_list)] = [2, 9, 5, 19, 9, 9, 8, 10, 5, 8, 15, 345, 9, 7, 10, 28, 7, 9, 11, 8, 6, 6, 7, 7, 6, 7, 11, 12, 10, 10, 9, 11, 8, 5, 9, 7, 13, 6, 10, 8, 5, 4, 5, 3, 6, 9, 7, 11, 8, 8, 7, 8, 12, 4, 17, 13, 8, 11, 5, 11, 11, 10, 5, 3, 4]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 179
[length(mis) for mis = unique(C_list)] = [2, 7, 4, 15, 3, 4, 8, 20, 9, 11, 8, 21, 12, 7, 6, 18, 8, 10, 5, 13, 4, 260, 11, 10, 4, 12, 6, 14, 13, 14, 4, 9, 15, 9, 8, 7, 8, 5, 20, 3, 10, 3, 10, 9, 8, 11, 11, 6, 13, 335, 14, 16, 8, 12, 14, 4, 14, 23, 7, 12, 14, 13, 16, 16, 19, 19, 4]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 180
[length(mis) for mis = unique(C_list)] = [2, 34, 6, 10, 18, 10, 8, 10, 9, 8, 12, 71, 9, 8, 27, 328, 10, 12, 8, 9, 9, 10, 6, 6, 12, 9, 9, 11, 11, 395, 9, 9, 8, 10, 12, 11, 7, 11, 15, 9, 10, 8, 10, 3, 9, 10, 7, 8, 10, 12, 10, 13, 18, 6, 8, 16, 8, 8, 9, 6, 8, 7, 12, 10]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 181
[length(mis) for mis = unique(C_list)] = [5, 6, 8, 7, 10, 11, 8, 9, 5, 10, 7, 6, 7, 10, 9, 7, 7, 8, 4, 5, 10, 9, 8, 10, 8, 7, 9, 8, 12, 10, 128, 13, 4, 7, 10, 9, 11, 12, 7, 6, 11, 14, 8, 12, 9, 10, 6, 6, 10, 10, 9, 8, 12, 7, 369, 9, 5, 9, 7, 3, 12, 14, 7, 7]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 182
[length(mis) for mis = unique(C_list)] = [6, 7, 9, 8, 9, 8, 6, 6, 6, 8, 47, 10, 12, 8, 7, 7, 8, 9, 9, 5, 4, 6, 4, 10, 3, 7, 537, 17, 6, 7, 3, 61, 4, 8, 12, 9, 6, 8, 5, 8, 10, 8, 7, 9, 12, 7, 8, 7, 8, 4, 8, 5, 8, 16, 8, 4, 12, 6, 6, 9, 6, 8, 5, 6, 8, 9, 4, 9]
length(C_list) = 68
termination_sub = MathOptInterface.INFEASIBLE
iter = 183
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 6, 8, 7, 8, 12, 6, 6, 15, 6, 88, 11, 5, 49, 9, 5, 7, 5, 7, 119, 6, 596, 4, 7, 190, 3, 10, 69, 4, 10, 474, 9, 5, 6, 11, 8, 12, 4, 4, 19, 6, 5, 9, 393, 6, 21, 5, 14, 19, 4, 6, 7, 80, 4]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 184
[length(mis) for mis = unique(C_list)] = [4, 6, 4, 4, 11, 5, 4, 4, 12, 7, 4, 20, 7, 5, 6, 29, 167, 7, 7, 13, 4, 3, 2, 10, 7, 10, 9, 4, 5, 7, 380, 84, 4, 12, 5, 12, 10, 10, 7, 9, 41, 8, 60, 3, 74, 7, 6]
length(C_list) = 47
termination_sub = MathOptInterface.INFEASIBLE
iter = 185
termination = MathOptInterface.INFEASIBLE
objective_value = 0.0
