┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iRC1080
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iRC1080
----------------------------------
number of metabolites : 1706
number of reactions : 2191
number of genes : 1086

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 88
max_cuts = 44
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 2191 flux variables and 4310 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 4, 3, 8, 3, 4, 4, 4, 8, 3, 6, 2, 7, 3, 5, 7, 4, 3, 4, 6, 16, 4, 4, 10, 9, 9, 6, 6, 3, 5, 110, 8, 7, 6, 9, 11, 5, 5, 4, 4, 4, 6, 3, 5, 3]
length(C_list) = 44
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [5, 2, 3, 3, 3, 3, 2, 3, 5, 9, 5, 4, 3, 8, 4, 27, 4, 7, 5, 4, 4, 8, 4, 7, 3, 8, 5, 3, 4, 4, 3, 28, 3, 5, 4, 29, 28, 4, 7, 8, 3, 4, 4]
length(C_list) = 43
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [3, 9, 7, 326, 3, 9, 8, 6, 7, 7, 7, 8, 5, 10, 8, 5, 9, 7, 4, 4, 8, 9, 4, 8, 8, 8, 4, 7, 8, 7, 6, 7, 5, 6, 7, 3, 8, 8, 3, 5, 4, 6, 7, 3, 8, 11]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [8, 6, 4, 3, 3, 8, 10, 3, 4, 7, 4, 3, 3, 3, 5, 9, 9, 10, 6, 5, 7, 3, 3, 134, 3, 4, 3, 3, 8, 44, 4, 7, 5, 3, 7, 3, 8, 5, 3, 7, 26, 68, 8, 7]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [8, 4, 7, 7, 5, 4, 3, 3, 3, 8, 3, 116, 48, 3, 4, 3, 3, 8, 5, 4, 8, 5, 47, 4, 89, 20, 3, 4, 16, 14, 3, 3, 3, 6, 8, 4, 5, 14, 4, 16]
length(C_list) = 40
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [3, 4, 3, 5, 3, 5, 4, 6, 4, 4, 3, 3, 4, 12, 7, 3, 4, 3, 4, 4, 7, 13, 148, 4, 4, 6, 9, 4, 5, 5, 4, 10, 6, 3, 3, 3, 10, 3, 8, 5, 5, 7, 4, 6, 5, 5, 7, 3, 3]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [7, 3, 4, 3, 3, 4, 4, 5, 3, 4, 8, 3, 8, 3, 4, 4, 4, 3, 4, 6, 3, 4, 4, 13, 8, 8, 6, 23, 6, 3, 9, 4, 4, 28, 5, 4, 4, 4, 11, 3, 8, 12, 4, 6, 4, 4, 5]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [14, 4, 8, 4, 6, 4, 10, 3, 10, 7, 8, 5, 3, 14, 4, 8, 4, 7, 8, 5, 11, 4, 13, 4, 8, 17, 3, 7, 3, 4, 5, 4, 8, 13, 4, 3, 4, 267, 6, 8, 6, 7, 4, 4, 4, 3, 4, 3, 10, 4, 5, 5]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [7, 4, 3, 5, 4, 3, 77, 3, 3, 4, 9, 5, 4, 3, 6, 13, 13, 6, 4, 5, 5, 13, 3, 4, 5, 18, 5, 7]
length(C_list) = 28
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [5, 5, 3, 5, 5, 7, 10, 6, 8, 3, 5, 7, 9, 73, 4, 10, 4, 14, 5, 10, 4, 7, 4, 9, 6, 4, 12, 7, 20, 5, 8, 9, 11, 10, 32, 3, 23, 5, 12, 10, 8, 10, 12, 9, 7, 8, 5, 26, 18]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [7, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 6, 12, 4, 4, 27, 15, 8, 4, 246, 4, 8, 5, 33, 29, 3, 4, 30, 3, 75, 7, 47, 48, 3, 8, 14, 4, 3, 5]
length(C_list) = 41
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [8, 34, 7, 11, 4, 4, 29, 4, 4, 8, 13, 222, 15, 4, 27, 8, 9, 39, 4, 27, 4, 34, 24, 7, 6, 25, 11, 59, 33, 10, 15, 14, 4, 39, 26, 28, 12, 32, 24, 32, 28, 10, 8]
length(C_list) = 43
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [2, 13, 3, 6, 4, 8, 6, 7, 7, 4, 8, 3, 7, 3, 4, 6, 3, 8, 222, 3, 10, 6, 6, 4, 20, 14, 22, 21, 8, 108, 19, 4, 13, 12, 21, 7, 7, 25, 3, 131, 8, 20, 19, 3, 7, 20, 8]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [3, 4, 6, 6, 7, 6, 4, 3, 148, 6, 6, 5, 3, 5, 27, 6, 4, 3, 4, 4, 22, 4, 6, 4, 5, 4, 7, 5, 6, 4, 20, 7, 5, 6, 99, 13, 12, 6, 3, 5, 14, 6, 11, 28, 5, 11, 5, 6, 25, 8, 29, 6, 5, 5, 4]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [7, 5, 5, 6, 15, 3, 10, 12, 4, 3, 8, 4, 5, 4, 4, 5, 3, 13, 6, 10, 14, 7, 6, 6, 23, 6, 13, 5, 13, 6, 4, 7, 5, 5, 8, 7, 5]
length(C_list) = 37
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [3, 41, 5, 5, 6, 35, 6, 25, 5, 5, 26, 30, 5, 5, 11, 3, 5, 7, 25, 4, 4, 25, 12, 4, 7, 12, 13, 8, 7, 6, 6, 24, 4, 24, 24, 25, 25, 27]
length(C_list) = 38
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [5, 12, 3, 4, 4, 3, 8, 6, 7, 9, 8, 8, 5, 3, 8, 8, 5, 5, 8, 5, 6, 6, 8, 7, 8, 6, 20, 9, 9, 7, 5, 8, 7, 81, 9, 11, 8, 8, 5, 10]
length(C_list) = 40
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [8, 4, 4, 5, 3, 82, 13, 3, 11, 8, 4, 67, 9, 8, 5, 7]
length(C_list) = 16
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [3, 5, 5, 49, 44, 5, 4, 76, 19]
length(C_list) = 9
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 4, 5, 11, 3, 3, 4, 8, 10, 3, 3, 10, 10, 3, 3, 10, 12, 9, 6, 3, 4, 6, 9, 9, 10, 18, 4]
length(C_list) = 29
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [5, 3, 4, 5, 4, 4, 6, 3, 7, 4, 5, 4, 5, 5, 4, 4, 5, 5, 6, 5, 5, 4, 4, 5, 4, 6, 4, 7, 6, 11, 8, 7, 5, 4, 10, 49, 5, 4, 5]
length(C_list) = 39
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [4, 6, 5, 5, 5, 4, 4, 3, 5, 4, 5, 5, 4, 5, 22, 5, 5, 5, 21, 28, 20, 4, 6, 5, 5, 5, 5, 20, 5, 5, 10, 5, 10, 18, 23, 10, 4, 24, 5, 23, 14, 5, 25, 5, 5]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [10, 8, 7, 7, 14, 7, 8, 75, 14, 9, 13, 7, 8, 10, 11, 7, 11, 8, 8, 14, 8, 13, 14, 8, 10, 14, 32, 14, 17, 12, 11, 20, 13, 9, 13, 13, 8]
length(C_list) = 37
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [30, 25, 356, 17, 23, 24, 21, 22, 24, 25, 23, 25, 24, 28, 24, 17, 28, 22, 18, 18, 24, 42, 19, 27, 25, 28, 24, 17, 24, 22, 30, 26, 22, 25, 24, 45, 230, 27, 23, 22, 32, 28, 23, 20, 26, 18, 19, 26, 22, 87, 28, 23, 30, 17, 92, 29, 22, 17, 39, 18, 18, 30, 29, 29, 22]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [7, 31, 7, 7, 31, 29, 23, 8, 24, 29, 8, 35, 28, 45, 4, 34, 21, 30, 38, 6, 23, 31, 28, 41, 9, 28, 32, 26, 22, 11, 11, 32, 34, 36, 29, 21, 23, 37, 26, 31, 23, 22, 213, 21, 8, 32, 28, 23, 29, 30, 24]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [8, 4, 9, 8, 4, 12, 10, 8, 10, 10, 8, 9, 23, 10, 11, 12, 36, 8, 4, 4, 4, 4, 4, 4, 8, 9, 4, 10, 8, 9, 15, 11, 5, 10, 8, 4, 6, 10, 12, 5, 10, 8, 11, 5, 9, 9, 5, 10, 10, 12, 10, 10, 10, 10, 8]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [9, 10, 10, 9, 13, 11, 11, 11, 14, 18, 11, 10, 12, 16, 11]
length(C_list) = 15
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [13, 3, 14, 13, 4, 12, 14, 16, 13, 14, 14, 14, 16, 14, 14, 14, 14, 15, 15, 25, 4, 14, 12, 16, 15, 6, 12, 14, 14, 14, 16, 12, 14, 15, 12, 15, 15, 14, 13, 17, 15, 14, 14, 228, 17, 14, 13, 14, 14, 15, 12, 19]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [37, 10, 8, 130, 6, 7, 42, 7, 30, 10, 7, 7, 7, 31, 15, 16, 21, 9, 7, 18, 29, 15, 8, 8, 9, 9, 9, 7, 9, 29, 9, 34, 15, 25, 9, 12, 30, 38, 10, 23, 22, 11, 15, 191, 31, 23, 27, 32, 34, 15]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [7, 4, 4, 4, 4, 3, 15, 7, 35, 5, 5, 5, 4, 13, 4, 6, 95, 7, 6, 8, 5, 7, 5, 22, 16]
length(C_list) = 25
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [10, 20, 3, 8, 10, 13, 9, 3, 12, 8, 4, 14, 42, 10, 15, 7, 3, 10, 50, 19, 10, 10, 15, 3, 9, 17, 9, 11, 48, 9, 11, 6, 47, 10, 48, 10, 150, 39, 37, 149, 40, 14, 7, 36, 40, 7, 12, 29, 38, 12, 4, 8]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [15, 5, 4, 4, 31, 92, 3, 12, 5, 5, 9, 3, 23, 34, 6, 6, 32, 32, 39, 9, 5, 32, 6, 15, 11, 4, 31, 5, 28, 5, 4, 268, 21, 5, 24, 26, 5, 31, 24, 6]
length(C_list) = 40
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [11, 13, 10, 9, 17, 18, 15, 8, 11, 30, 12, 16, 8, 17, 24, 8, 14, 8, 9, 16, 25, 19, 27, 17, 19, 19, 19, 10, 9, 17, 17, 19, 15, 11, 10, 10, 16, 16, 18, 17]
length(C_list) = 40
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [13, 3, 4, 4, 4, 13, 6, 12, 5, 4, 16, 21, 5, 22, 15, 26, 16, 23, 5, 16, 24, 5, 11, 23, 22, 13, 15, 13, 5, 5, 4, 13, 6, 15]
length(C_list) = 34
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [5, 6, 6, 6, 7, 6, 6, 7, 6, 111, 11, 231, 7, 99]
length(C_list) = 14
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [8, 4, 5, 9, 5, 30]
length(C_list) = 6
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [8, 3, 3, 9, 5, 4, 5, 6, 5, 9, 4, 7, 5]
length(C_list) = 13
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
MIS problem not feasible
termination_mis = MathOptInterface.INFEASIBLE
[length(mis) for mis = unique(C_list)] = Any[]
length(C_list) = 0
iter = 37
termination = MathOptInterface.OPTIMAL
objective_value = 0.0
thermo_feasible = true
