ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
RECON1
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

RECON1
----------------------------------
number of metabolites : 2766
number of reactions : 3741
number of genes : 1905

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 112
max_cuts = 75
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 3741 flux variables and 7052 variables in total
master problem solved
feasible = true
[length(mis) for mis = unique(C_list)] = [5, 2, 2, 2, 2, 2, 2, 46, 5, 5, 5, 2, 5, 6, 4, 4, 8, 5, 5, 5, 11, 7, 3, 6, 7, 4, 2, 6, 5, 6, 4, 211, 3, 9, 5, 4, 6, 7, 5, 5, 3, 3, 9, 5, 6, 7, 9, 5]
length(C_list) = 48
sub problem solved
iter = 1
[length(mis) for mis = unique(C_list)] = [6, 8, 6, 7, 4, 8, 4, 5, 5, 2, 2, 4, 6, 6, 5, 4, 6, 4, 6, 5, 6, 6, 9, 8, 4, 55, 2, 8, 6, 5, 6, 9, 14, 45, 7, 586, 424, 4, 160, 2, 8, 8, 4, 2, 44, 10, 8, 4, 64, 3, 4, 8, 23, 17, 10, 118, 5]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 2
[length(mis) for mis = unique(C_list)] = [10, 7, 3, 14, 4, 6, 4, 8, 4, 2, 4, 30, 11, 4, 4, 4, 3, 188, 5, 218, 8, 32, 9, 3, 6, 8, 9, 3, 7, 6, 3, 180, 4, 11, 10, 35, 6, 4, 5, 7, 6, 4, 11, 4, 6, 23, 303, 9, 5, 6, 7, 8, 4, 3, 11, 8, 28, 50, 13, 7]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 3
[length(mis) for mis = unique(C_list)] = [6, 4, 6, 6, 4, 6, 9, 6, 10, 7, 6, 9, 6, 6, 8, 5, 4, 4, 3, 4, 5, 4, 6, 5, 49, 4, 9, 3, 6, 15, 12, 114, 10, 6, 8, 7, 4, 29, 7, 4, 10, 13, 7, 6, 14, 8, 6, 44, 4, 7, 384, 10, 6, 4, 4, 7, 4, 9, 6, 5, 19, 105, 5, 6]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 4
[length(mis) for mis = unique(C_list)] = [7, 4, 7, 9, 4, 4, 4, 5, 63, 7, 7, 9, 5, 3, 443, 4, 7, 4, 8, 7, 7, 4, 8, 5, 3, 7, 10, 3, 148, 6, 2, 4, 27, 6, 17, 7, 10, 5, 4, 10, 4, 5, 6, 7, 3, 12, 5, 9, 109, 6, 6, 5, 6, 3, 5, 8, 8, 40, 130, 8, 7, 4, 3, 3]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 5
[length(mis) for mis = unique(C_list)] = [5, 5, 4, 5, 6, 6, 4, 5, 7, 7, 3, 7, 4, 8, 6, 286, 4, 6, 4, 22, 3, 66, 108, 9, 8, 5, 8, 6, 6, 8, 8, 2, 9, 6, 9, 5, 9, 6, 4, 84, 6, 8, 5, 8, 3, 3, 4, 6, 8, 4, 5, 9, 4, 10, 5, 6, 5, 18, 5, 10, 13, 49]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 6
[length(mis) for mis = unique(C_list)] = [3, 2, 11, 4, 227, 10, 7, 10, 7, 4, 6, 11, 5, 6, 3, 6, 8, 9, 4, 3, 369, 6, 6, 4, 6, 7, 5, 4, 4, 6, 5, 8, 6, 3, 3, 4, 6, 7, 8, 6, 7, 4, 6, 3, 6, 8, 3, 5, 8, 4, 5, 12, 273, 4, 4, 7, 7, 6, 4, 4, 5, 8]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 7
[length(mis) for mis = unique(C_list)] = [7, 4, 6, 5, 4, 6, 436, 3, 4, 4, 11, 8, 12, 5, 3, 8, 4, 8, 8, 7, 4, 5, 3, 89, 9, 6, 11, 9, 8, 4, 4, 10, 5, 8, 98, 4, 5, 10, 6, 3, 10, 8, 10, 13, 4, 6, 4, 12, 5, 4, 15, 7, 7, 4, 4, 6, 143, 34, 5, 96, 10]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 8
[length(mis) for mis = unique(C_list)] = [13, 8, 6, 6, 7, 5, 4, 12, 4, 7, 3, 6, 13, 23, 693, 7, 191, 8, 162, 31, 5, 4, 13, 11, 4, 7, 4, 7, 4, 228, 12, 6, 5, 7, 4, 8, 5, 8, 5, 5, 3, 3, 352, 4, 4, 6, 5, 8, 5, 4, 27, 9, 11, 7, 11, 7, 4, 4, 9, 5]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 9
[length(mis) for mis = unique(C_list)] = [4, 10, 3, 8, 4, 6, 6, 8, 4, 3, 3, 8, 7, 4, 188, 110, 5, 11, 4, 6, 6, 9, 107, 5, 4, 9, 4, 4, 30, 4, 8, 7, 7, 6, 214, 4, 8, 5, 5, 7, 8, 4, 6, 10, 6, 7, 11, 8, 4, 7, 8, 4, 9, 8, 8, 9, 53, 162, 11, 9, 50, 3]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 10
[length(mis) for mis = unique(C_list)] = [4, 9, 6, 6, 12, 2, 7, 5, 8, 6, 4, 12, 4, 4, 9, 6, 4, 151, 4, 3, 8, 4, 8, 207, 141, 26, 9, 5, 6, 6, 102, 6, 11, 4, 5, 59, 6, 8, 5, 10, 7, 117, 4, 8, 52, 47, 4, 329, 5, 9, 4, 11, 5, 8, 8, 7, 5, 129, 3, 5]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 11
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 7, 5, 7, 6, 5, 9, 5, 9, 4, 5, 7, 25, 35, 8, 6, 8, 4, 407, 7, 10, 6, 4, 3, 7, 5, 7, 15, 5, 6, 3, 10, 6, 4, 4, 92, 5, 4, 8, 4, 3, 4, 4, 8, 5, 5, 4, 479, 25, 6, 6, 3, 47, 129]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 12
[length(mis) for mis = unique(C_list)] = [12, 8, 4, 5, 5, 4, 6, 4, 4, 7, 5, 3, 5, 6, 100, 8, 5, 4, 4, 6, 8, 4, 7, 4, 398, 7, 4, 5, 14, 3, 8, 4, 7, 5, 42, 6, 8, 4, 7, 5, 4, 6, 8, 3, 144, 5, 6, 4, 5, 7, 4, 4, 357, 5, 9, 4, 3, 5, 5, 12, 5, 6, 4]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 13
[length(mis) for mis = unique(C_list)] = [6, 6, 7, 7, 7, 8, 6, 9, 4, 13, 6, 7, 8, 6, 5, 9, 9, 4, 5, 5, 5, 6, 8, 6, 13, 6, 4, 31, 10, 4, 7, 6, 5, 7, 5, 9, 43, 7, 8, 7, 6, 71, 4, 4, 5, 4, 4, 17, 6, 4, 93, 8, 6, 4, 9, 5, 6, 171, 7, 6, 7, 5]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 14
[length(mis) for mis = unique(C_list)] = [18, 5, 7, 4, 5, 8, 5, 4, 6, 7, 6, 8, 5, 6, 6, 4, 4, 5, 4, 7, 5, 4, 5, 3, 162, 5, 4, 4, 5, 5, 4, 10, 4, 23, 6, 15, 4, 14, 30, 16, 4, 6, 5, 4, 4, 6, 8, 5, 6, 17, 4, 9, 4, 7, 4, 8, 10, 4, 8, 7, 6, 5, 5]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 15
[length(mis) for mis = unique(C_list)] = [4, 8, 9, 13, 6, 4, 4, 4, 5, 9, 4, 10, 11, 6, 9, 258, 8, 6, 26, 7, 4, 8, 9, 3, 46, 8, 7, 187, 60, 4, 4, 14, 5, 7, 6, 4, 5, 10, 3, 60, 28, 4, 3, 6, 6, 337, 85, 10, 6, 303, 104, 4, 4, 4, 10, 5, 6, 5, 3, 7, 7, 10, 6, 7]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 16
[length(mis) for mis = unique(C_list)] = [10, 6, 4, 4, 4, 7, 4, 5, 4, 6, 408, 3, 115, 10, 7, 6, 4, 11, 22, 9, 4, 19, 4, 6, 7, 4, 213, 247, 8, 4, 5, 7, 7, 4, 3, 3, 47, 7, 103, 5, 8, 5, 16, 4, 5, 8, 4, 5, 3, 6, 8, 40, 9, 4, 6, 5, 6, 5]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 17
[length(mis) for mis = unique(C_list)] = [4, 8, 4, 4, 4, 9, 9, 14, 8, 8, 7, 4, 6, 5, 4, 10, 4, 9, 6, 4, 7, 3, 4, 6, 4, 8, 7, 11, 3, 10, 5, 6, 11, 4, 456, 6, 4, 4, 43, 103, 3, 40, 4, 280, 7, 4, 6, 6, 4, 5, 5, 10, 5, 9, 5, 9, 9, 4, 20, 9, 9]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 18
[length(mis) for mis = unique(C_list)] = [29, 4, 5, 6, 8, 7, 6, 4, 5, 78, 9, 7, 4, 72, 9, 4, 4, 6, 3, 4, 6, 4, 4, 5, 5, 4, 4, 10, 7, 8, 7, 7, 4, 3, 17, 7, 4, 4, 3, 4, 3, 3, 22, 6, 11, 8, 4, 8, 6, 6, 19, 5, 12, 8, 5, 3, 4, 8, 7, 4]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 19
[length(mis) for mis = unique(C_list)] = [4, 6, 9, 8, 5, 9, 10, 6, 11, 6, 6, 8, 8, 4, 6, 9, 8, 4, 5, 10, 239, 67, 463, 4, 8, 4, 11, 8, 4, 9, 287, 6, 6, 6, 5, 3, 9, 11, 4, 6, 145, 4, 3, 4, 6, 5, 4, 13, 4, 10, 4, 9, 10, 17, 5, 31, 8, 13, 7, 8, 5, 6, 7, 9, 5]
length(C_list) = 65
termination_sub = MathOptInterface.INFEASIBLE
iter = 20
[length(mis) for mis = unique(C_list)] = [8, 10, 6, 3, 6, 4, 5, 4, 5, 6, 10, 5, 5, 7, 10, 371, 25, 7, 3, 20, 4, 4, 25, 8, 9, 26, 4, 26, 122, 4, 5, 7, 72, 297, 21, 267, 6, 4, 6, 60, 24, 21, 8, 4, 6, 119, 6, 8, 6, 5, 8, 6, 55, 3, 6, 8, 303, 8]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 21
[length(mis) for mis = unique(C_list)] = [3, 6, 9, 4, 7, 4, 5, 5, 4, 7, 3, 8, 6, 9, 5, 5, 7, 4, 4, 5, 4, 3, 463, 8, 5, 8, 7, 4, 4, 7, 3, 4, 8, 16, 4, 5, 4, 34, 4, 121, 4, 75, 6, 10, 17, 7, 9, 4, 6, 7, 10, 8, 4, 7, 3, 13, 473, 7, 7]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 22
[length(mis) for mis = unique(C_list)] = [4, 7, 4, 9, 4, 10, 5, 4, 9, 4, 9, 4, 4, 5, 8, 10, 5, 153, 31, 11, 4, 6, 4, 6, 3, 195, 7, 17, 25, 196, 13, 5, 4, 4, 5, 5, 4, 109, 8, 4, 414, 7, 5, 10, 9, 4, 6, 3, 4, 5, 7, 5, 6, 4, 7, 5, 3, 3, 8, 7, 17]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 23
[length(mis) for mis = unique(C_list)] = [3, 6, 4, 3, 7, 8, 5, 6, 10, 9, 3, 8, 6, 5, 5, 7, 9, 9, 4, 6, 3, 7, 6, 11, 21, 11, 17, 3, 10, 11, 10, 10, 7, 24, 4, 17, 32, 16, 5, 5, 88, 4, 17, 7, 27, 11, 4, 4, 6, 150, 8, 167, 10, 8, 12, 6, 88, 4, 37, 6, 23, 3]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 24
[length(mis) for mis = unique(C_list)] = [16, 4, 4, 10, 9, 4, 4, 5, 4, 5, 4, 5, 6, 81, 5, 5, 6, 10, 4, 11, 6, 4, 4, 11, 7, 3, 17, 7, 6, 4, 47, 5, 4, 4, 16, 39, 5, 5, 5, 14, 4, 14, 4, 5, 7, 7, 14, 4, 7, 6, 18, 5, 5, 8, 19, 7, 518, 140]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 25
[length(mis) for mis = unique(C_list)] = [20, 6, 5, 5, 8, 8, 4, 11, 8, 9, 4, 11, 5, 5, 3, 7, 8, 2, 4, 4, 6, 413, 4, 10, 7, 463, 7, 117, 4, 4, 4, 4, 6, 4, 4, 3, 4, 4, 12, 296, 7, 6, 42, 10, 4, 16, 7, 3, 8, 6, 8, 5, 4, 8, 114]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 26
[length(mis) for mis = unique(C_list)] = [12, 3, 6, 13, 5, 10, 3, 7, 6, 11, 3, 6, 5, 11, 6, 4, 5, 4, 5, 71, 12, 6, 8, 4, 3, 9, 6, 4, 3, 6, 5, 8, 22, 8, 4, 4, 6, 6, 168, 4, 22, 21, 6, 3, 3, 12, 14, 6, 4, 3, 8, 5, 7, 7, 44, 10, 4, 10, 16, 488, 6, 7]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 27
[length(mis) for mis = unique(C_list)] = [10, 4, 6, 4, 4, 6, 3, 5, 9, 9, 11, 9, 355, 6, 8, 11, 152, 7, 5, 3, 504, 8, 4, 3, 8, 25, 6, 6, 8, 9, 7, 4, 30, 6, 4, 24, 4, 24, 12, 25, 6, 10, 5, 3, 4, 14, 9, 11, 5, 9, 13, 7, 19, 257, 7, 6, 11, 3]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 28
[length(mis) for mis = unique(C_list)] = [18, 5, 5, 8, 4, 4, 7, 8, 6, 11, 5, 5, 10, 25, 7, 4, 4, 38, 6, 39, 4, 26, 4, 41, 4, 42, 28, 6, 5, 4, 22, 3, 103, 6, 6, 40, 4, 41, 17, 41, 5, 46, 160, 4, 5, 8, 20, 4, 7, 28, 5, 18, 6, 226, 573, 5, 5, 4, 5, 11, 8]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 29
[length(mis) for mis = unique(C_list)] = [5, 7, 9, 6, 8, 9, 5, 10, 152, 4, 33, 5, 7, 8, 12, 6, 45, 4, 11, 491, 45, 4, 46, 22, 6, 8, 8, 27, 4, 8, 7, 4, 4, 4, 7, 25, 4, 177, 20, 6, 11, 4, 11, 4, 7, 7, 17, 102, 9, 5, 8, 20, 3, 7, 42]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 30
[length(mis) for mis = unique(C_list)] = [11, 4, 6, 5, 6, 7, 12, 6, 10, 55, 6, 9, 13, 11, 6, 203, 5, 7, 4, 8, 4, 13, 7, 5, 4, 4, 9, 20, 6, 4, 53, 3, 4, 26, 4, 6, 7, 21, 6, 22, 4, 9, 21, 6, 4, 11, 5, 6, 4, 6, 6, 18, 7, 7, 16, 9, 3, 4, 4, 20]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 31
[length(mis) for mis = unique(C_list)] = [10, 8, 8, 7, 5, 10, 4, 7, 15, 11, 7, 3, 7, 4, 4, 5, 9, 7, 10, 10, 7, 9, 10, 4, 10, 11, 127, 4, 4, 6, 4, 24, 60, 4, 51, 6, 11, 9, 6, 4, 6, 5, 5, 5, 6, 4, 6, 7, 4, 8, 8, 8, 5, 4, 6, 202, 4, 6, 45]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 32
[length(mis) for mis = unique(C_list)] = [15, 5, 10, 5, 9, 4, 8, 6, 7, 13, 9, 4, 117, 8, 7, 11, 120, 8, 12, 10, 139, 4, 4, 33, 8, 10, 4, 9, 7, 8, 10, 15, 42, 10, 12, 10, 5, 5, 16, 5, 7, 9, 11, 6, 6, 4, 6, 454, 8, 13, 4, 13, 6, 7, 7, 7, 8, 5, 10, 7, 4, 11]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 33
[length(mis) for mis = unique(C_list)] = [4, 5, 4, 4, 6, 5, 8, 4, 7, 5, 11, 9, 11, 8, 31, 9, 11, 33, 5, 3, 7, 33, 13, 4, 7, 5, 4, 5, 6, 6, 8, 6, 6, 6, 10, 4, 174, 5, 25, 5, 4, 10, 144, 4, 7, 17, 6, 11, 4, 4, 5, 8, 9, 5, 4, 10, 8, 11, 9, 12, 4]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 34
[length(mis) for mis = unique(C_list)] = [8, 6, 8, 4, 5, 9, 4, 4, 4, 10, 7, 12, 8, 8, 6, 6, 6, 6, 8, 20, 8, 4, 3, 9, 6, 4, 5, 4, 10, 5, 4, 11, 69, 7, 10, 7, 4, 10, 4, 10, 6, 54, 9, 4, 9, 6, 8, 4, 11, 8, 9, 9, 10, 7, 9, 8, 9, 247]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 35
[length(mis) for mis = unique(C_list)] = [5, 5, 3, 7, 4, 4, 7, 6, 9, 15, 4, 4, 5, 4, 4, 8, 6, 228, 4, 6, 206, 4, 4, 5, 4, 172, 5, 4, 3, 6, 5, 5, 8, 5, 4, 10, 4, 9, 4, 95, 7, 4, 5, 9, 28, 10, 4, 6, 5, 140, 4, 5, 4, 6, 5, 61, 33, 5, 6, 6, 4, 24]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 36
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 9, 7, 7, 6, 6, 4, 9, 6, 5, 20, 18, 6, 5, 5, 5, 5, 4, 6, 5, 4, 7, 216, 7, 7, 10, 8, 7, 5, 4, 9, 5, 7, 4, 7, 5, 4, 4, 56, 5, 5, 5, 27, 6, 5, 6, 7, 5, 7, 8, 8, 6, 6, 4, 8, 12, 10, 7, 13, 10]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 37
[length(mis) for mis = unique(C_list)] = [4, 3, 5, 6, 7, 4, 6, 6, 4, 4, 6, 340, 6, 2, 3, 4, 15, 6, 7, 6, 4, 3, 3, 6, 6, 5, 4, 5, 6, 6, 6, 6, 7, 8, 7, 7, 6, 5, 7, 10, 14, 142, 6, 27]
length(C_list) = 44
termination_sub = MathOptInterface.INFEASIBLE
iter = 38
[length(mis) for mis = unique(C_list)] = [3, 5, 7, 4, 5, 8, 5, 5, 7, 4, 4, 4, 5, 6, 4, 4, 6, 6, 4, 5, 6, 3, 4, 5, 4, 9, 4, 4, 4, 5, 6, 5, 5, 3, 6, 4, 5, 5, 5, 6, 3, 5, 5, 3, 6, 3, 4, 4, 6, 5, 5, 4, 4, 4]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 39
[length(mis) for mis = unique(C_list)] = [7, 7, 39, 13, 4, 6, 7, 4, 9, 4, 4, 230, 4, 12, 5, 67, 12, 6, 9, 4, 5, 11, 10, 6, 8, 22, 7, 8, 5, 6, 4, 5, 16, 17, 5, 7, 24, 5, 19, 7, 15, 5, 11, 4, 10, 6, 149, 7, 7, 11, 104, 5, 5, 9, 7, 6, 5, 11, 5, 5, 6, 4]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 40
[length(mis) for mis = unique(C_list)] = [10, 2, 5, 6, 6, 4, 6, 10, 51, 6, 6, 10, 9, 11, 4, 8, 21, 7, 3, 12, 14, 14, 9, 3, 645, 9, 15, 7, 4, 42, 4, 13, 7, 9, 8, 8, 14, 8, 20, 4, 12, 8, 8, 9, 233, 3, 11, 10, 12, 9, 117, 6, 248, 87, 4, 10, 8]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 41
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 4, 25, 6, 5, 5, 5, 3, 3, 78, 4, 3, 16, 4, 6, 6, 5, 6, 11, 11, 4, 5, 6, 6, 4, 12, 4, 6, 4, 4, 8, 4, 4, 4, 8, 9, 5, 6, 7, 4, 73, 13, 6, 4, 6, 6, 7, 4, 5]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 42
[length(mis) for mis = unique(C_list)] = [8, 4, 9, 5, 4, 6, 3, 8, 9, 9, 3, 8, 307, 7, 4, 7, 7, 6, 145, 10, 5, 9, 4, 10, 3, 401, 4, 4, 4, 6, 6, 7, 342, 4, 11, 7, 5, 460, 7, 4, 8, 63, 14, 8, 8, 4, 7, 8, 6, 8, 5, 8, 4, 14, 7]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 43
[length(mis) for mis = unique(C_list)] = [4, 4, 4, 3, 7, 2, 4, 6, 46, 4, 4, 3, 7, 4, 16, 5, 6, 7, 4, 3, 392, 4, 7, 8, 8, 8, 4, 10, 5, 10, 4, 4, 8, 3, 7, 11, 4, 4, 11, 4, 4, 7, 10, 11, 10, 8, 6, 9, 7, 7, 16, 7, 5]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 44
[length(mis) for mis = unique(C_list)] = [8, 5, 2, 2, 4, 6, 3, 4, 182, 4, 4, 6, 8, 6, 11, 5, 7, 4, 9, 4, 9, 7, 4, 8, 7, 5, 11, 9, 3, 9, 10, 5, 9, 9, 104, 5, 5, 5, 6, 5, 146, 12, 6, 10, 5, 4, 20, 4, 7, 9, 4, 8, 8, 9, 7, 6, 5, 4, 7, 15, 5]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 45
[length(mis) for mis = unique(C_list)] = [3, 5, 5, 6, 7, 4, 4, 9, 12, 10, 5, 8, 5, 5, 7, 5, 277, 5, 7, 3, 4, 8, 3, 4, 7, 5, 13, 6, 9, 403, 3, 6, 4, 5, 146, 41, 9, 4, 6, 4, 50, 23, 6, 6, 7, 7, 4, 4, 9, 6, 7, 8, 4, 12, 7, 8, 9, 7, 5, 9, 6]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 46
[length(mis) for mis = unique(C_list)] = [9, 3, 8, 9, 5, 4, 8, 6, 4, 8, 7, 5, 5, 5, 6, 5, 129, 4, 6, 6, 5, 5, 6, 7, 4, 10, 4, 5, 4, 4, 10, 57, 5, 8, 4, 5, 3, 5, 18, 8, 9, 9, 8, 5, 5, 6, 11, 4, 6, 5, 9, 147, 8, 5, 8, 8, 8, 86]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 47
[length(mis) for mis = unique(C_list)] = [3, 7, 7, 6, 6, 5, 8, 4, 4, 4, 4, 6, 6, 89, 8, 14, 18, 6, 8, 8, 240, 5, 78, 4, 5, 6, 9, 62, 4, 8, 13, 9, 6, 4, 8, 7, 5, 7, 9, 12, 29, 15, 7, 8, 6, 7, 4, 7, 9, 14, 6, 10, 10, 10, 5, 8, 5, 4, 4, 16, 10, 223, 62, 5]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 48
[length(mis) for mis = unique(C_list)] = [5, 5, 5, 8, 8, 4, 79, 5, 4, 4, 3, 6, 4, 9, 30, 7, 4, 5, 6, 4, 5, 5, 11, 8, 36, 4, 4, 5, 4, 5, 7, 9, 7, 37, 3, 6, 6, 6, 4, 11, 4, 4, 7, 8, 4, 84, 3, 49, 4, 13, 9, 5, 3, 8, 11, 8, 4, 565, 7, 4, 6, 4]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 49
[length(mis) for mis = unique(C_list)] = [17, 8, 8, 8, 5, 8, 7, 6, 4, 13, 5, 6, 5, 14, 6, 9, 13, 7, 6, 4, 3, 7, 4, 8, 5, 90, 9, 7, 107, 4, 4, 33, 3, 10, 5, 65, 7, 173, 7, 8, 10, 4, 8, 3, 6, 9, 6, 34, 6, 4, 11, 13, 11, 70, 7, 8, 71, 7, 9, 6, 5, 4]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 50
[length(mis) for mis = unique(C_list)] = [3, 4, 10, 12, 4, 6, 4, 9, 7, 7, 6, 8, 4, 9, 69, 14, 10, 7, 4, 7, 4, 428, 6, 7, 5, 4, 5, 3, 6, 8, 29, 4, 8, 10, 3, 5, 10, 6, 7, 4, 6, 9, 7, 7, 10, 10, 340, 6, 13, 6, 4, 7, 6, 8, 7, 6, 317, 10]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 51
[length(mis) for mis = unique(C_list)] = [4, 6, 8, 9, 7, 3, 7, 6, 5, 7, 6, 131, 5, 6, 8, 21, 8, 8, 9, 5, 12, 10, 5, 4, 6, 15, 6, 450, 10, 22, 3, 243, 11, 15, 10, 10, 19, 7, 14, 9, 15, 32, 15, 5, 10, 5, 8, 8, 5, 11, 12, 6, 15, 5, 6, 7, 7, 6, 9]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 52
[length(mis) for mis = unique(C_list)] = [9, 5, 2, 7, 5, 5, 4, 9, 3, 11, 8, 6, 4, 84, 4, 26, 8, 4, 9, 94, 6, 6, 4, 6, 11, 104, 4, 6, 97, 4, 8, 4, 8, 6, 4, 4, 6, 19, 54, 8, 5, 3, 5, 8, 7, 4, 8, 3, 5, 18, 4, 6, 6, 8, 5, 4, 8, 5, 4]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 53
[length(mis) for mis = unique(C_list)] = [13, 7, 4, 4, 15, 13, 8, 19, 8, 6, 8, 8, 11, 5, 8, 7, 8, 10, 7, 8, 4, 11, 10, 4, 5, 5, 3, 11, 4, 6, 11, 7, 8, 4, 9, 4, 7, 26, 247, 7, 7, 13, 11, 5, 4, 7, 4, 6, 10, 11, 11, 8, 9, 3, 10, 4, 13, 8, 6, 3, 5, 5, 7]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 54
[length(mis) for mis = unique(C_list)] = [13, 4, 4, 6, 6, 4, 5, 4, 4, 9, 6, 7, 4, 7, 5, 5, 4, 6, 5, 4, 5, 4, 11, 7, 4, 5, 6, 5, 609, 300, 670, 4, 4, 4, 3, 4, 9, 167, 5, 5, 7, 6, 6, 7, 6, 7, 7, 5, 6, 16, 293, 14, 26, 383, 4, 69]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 55
[length(mis) for mis = unique(C_list)] = [7, 6, 7, 3, 5, 4, 6, 5, 7, 8, 6, 4, 4, 4, 6, 4, 6, 4, 12, 10, 7, 4, 4, 6, 8, 4, 4, 5, 5, 6, 4, 4, 5, 6, 6, 4, 5, 63, 7, 5, 6, 5, 3, 4, 6, 11, 3, 6, 5, 9, 7, 72, 19, 6, 7, 7, 44, 58]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 56
[length(mis) for mis = unique(C_list)] = [7, 4, 7, 11, 3, 5, 6, 10, 4, 7, 5, 3, 8, 5, 125, 11, 6, 8, 10, 10, 6, 8, 6, 9, 6, 10, 7, 151, 7, 4, 4, 8, 9, 10, 10, 8, 6, 4, 9, 8, 4, 147, 8, 13, 8, 8, 7, 8, 22, 4, 161, 32, 6, 7, 19]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 57
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 4, 8, 157, 7, 11, 4, 7, 6, 4, 10, 6, 5, 9, 6, 329, 9, 10, 10, 5, 4, 4, 4, 5, 4, 4, 8, 18, 7, 7, 7, 6, 6, 32, 9, 7, 5, 6, 4, 6, 21, 3, 37, 8, 5, 7, 4, 5, 137, 4, 4, 8, 9, 7, 74, 6, 4, 8, 5, 10, 8, 5, 10, 4]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 58
[length(mis) for mis = unique(C_list)] = [14, 4, 5, 4, 8, 6, 5, 10, 10, 6, 3, 5, 9, 4, 5, 5, 4, 7, 3, 13, 4, 23, 4, 18, 7, 6, 13, 5, 12, 6, 5, 4, 4, 4, 4, 4, 7, 10, 13, 7, 6, 5, 4, 10, 9, 8, 12, 3, 10, 10, 3, 9, 12, 9, 7, 9, 187, 8]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 59
[length(mis) for mis = unique(C_list)] = [11, 3, 4, 6, 6, 5, 5, 5, 3, 8, 6, 8, 7, 12, 6, 6, 8, 3, 5, 8, 4, 4, 6, 4, 3, 6, 7, 11, 8, 4, 3, 6, 5, 8, 4, 6, 8, 10, 4, 10, 4, 5, 5, 8, 70, 3, 6, 4, 5, 12, 4, 8, 48, 8, 26]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 60
[length(mis) for mis = unique(C_list)] = [9, 8, 8, 8, 5, 6, 3, 7, 10, 10, 11, 4, 6, 9, 320, 393, 5, 13, 4, 5, 13, 4, 9, 5, 5, 6, 7, 4, 189, 19, 4, 6, 8, 4, 641, 8, 5, 4, 28, 64, 5, 6, 8, 17, 4, 4, 5, 11, 10, 10, 4, 5, 7, 6, 11]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 61
[length(mis) for mis = unique(C_list)] = [9, 8, 4, 12, 5, 7, 12, 8, 5, 9, 7, 4, 5, 6, 5, 7, 12, 4, 4, 5, 4, 8, 3, 4, 7, 12, 3, 5, 4, 5, 6, 5, 8, 8, 5, 6, 10, 120, 4, 4, 7, 4, 15, 71, 8, 13, 5, 7, 12, 7, 9, 6, 3, 6, 9, 5, 8, 5, 9, 6, 343, 4]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 62
[length(mis) for mis = unique(C_list)] = [11, 5, 7, 8, 7, 134, 5, 5, 7, 4, 5, 5, 6, 6, 5, 5, 41, 4, 6, 5, 3, 9, 9, 4, 4, 4, 9, 5, 4, 4, 8, 12, 10, 7, 7, 4, 17, 5, 418, 21, 5, 185, 4, 682, 584, 7, 4, 3, 79, 6, 6, 10, 78, 8, 3, 6, 9, 7, 4, 6]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 63
[length(mis) for mis = unique(C_list)] = [4, 7, 6, 7, 8, 4, 11, 3, 6, 8, 8, 7, 7, 6, 3, 7, 4, 7, 9, 5, 4, 7, 4, 10, 5, 6, 7, 8, 4, 5, 12, 9, 12, 4, 4, 10, 4, 8, 5, 4, 8, 5, 11, 4, 7, 26, 7, 8, 7, 6, 19]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 64
[length(mis) for mis = unique(C_list)] = [8, 7, 4, 4, 5, 4, 5, 8, 5, 9, 23, 5, 6, 8, 9, 6, 5, 6, 10, 5, 8, 234, 8, 10, 4, 10, 4, 4, 5, 4, 40, 8, 5, 10, 4, 99, 4, 30, 5, 11, 4, 7, 6, 4, 3, 4, 8, 6, 6, 5, 5, 7, 4]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 65
[length(mis) for mis = unique(C_list)] = [17, 7, 3, 9, 5, 10, 6, 4, 7, 4, 7, 24, 19, 360, 4, 10, 11, 8, 9, 11, 3, 8, 4, 262, 4, 7, 246, 4, 30, 9, 4, 9, 7, 7, 4, 8, 4, 134, 4, 8, 9, 7, 10, 9, 6, 543, 4, 4, 6, 13, 11, 6, 8, 5, 4, 10, 4, 163, 9]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 66
[length(mis) for mis = unique(C_list)] = [4, 4, 6, 9, 10, 9, 4, 4, 6, 7, 7, 7, 54, 5, 7, 15, 10, 11, 9, 26, 4, 9, 69, 4, 7, 4, 7, 9, 76, 5, 4, 6, 231, 174, 243, 9, 7, 9, 10, 10, 259, 6, 4, 6, 138, 8, 9, 7, 14, 7, 6, 8, 11, 6, 245, 4, 6, 11]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 67
[length(mis) for mis = unique(C_list)] = [9, 8, 7, 4, 14, 3, 8, 8, 8, 8, 4, 14, 6, 7, 13, 4, 9, 10, 9, 10, 10, 11, 9, 6, 6, 6, 14, 6, 9, 4, 10, 8, 9, 6, 7, 12, 9, 10, 10, 10, 4, 12, 8, 6, 59, 11, 9, 7, 5, 7, 6, 9, 11, 7, 9, 10, 15, 642, 8, 10, 8, 601, 9, 9]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 68
[length(mis) for mis = unique(C_list)] = [15, 5, 14, 4, 8, 10, 7, 8, 7, 8, 7, 5, 8, 11, 13, 9, 180, 9, 10, 6, 9, 7, 4, 9, 13, 8, 4, 9, 6, 10, 5, 7, 6, 5, 8, 9, 291, 4, 11, 9, 4, 5, 13, 9, 8, 6, 12, 3, 7, 7, 4, 14, 11, 14, 10, 7, 6, 5, 7]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 69
[length(mis) for mis = unique(C_list)] = [5, 5, 7, 4, 4, 8, 4, 3, 6, 3, 3, 7, 4, 6, 18, 4, 4, 8, 3, 6, 21, 4, 7, 10, 4, 447, 3, 4, 3, 238, 4, 21, 5, 4, 39, 8, 9, 4, 5, 6, 4, 6, 5, 6, 5, 4, 15, 7, 420, 7, 7]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 70
[length(mis) for mis = unique(C_list)] = [6, 8, 3, 8, 7, 8, 7, 4, 4, 8, 4, 5, 50, 16, 4, 116, 6, 5, 7, 5, 15, 8, 5, 4, 9, 119, 5, 8, 3, 4, 4, 4, 4, 7, 12, 8, 6, 9, 6, 9, 4, 4, 14, 11, 7, 4, 9, 9, 6, 9, 9, 8]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 71
[length(mis) for mis = unique(C_list)] = [4, 11, 8, 9, 4, 9, 6, 7, 8, 10, 11, 10, 6, 4, 6, 4, 10, 9, 64, 8, 10, 4, 4, 9, 9, 19, 12, 12, 11, 10, 9, 9, 528, 10, 53, 8, 10, 12, 6, 18, 8, 5, 6, 4, 5, 9, 11, 7, 20, 8, 13, 9, 44, 8, 4, 10]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 72
[length(mis) for mis = unique(C_list)] = [12, 3, 6, 3, 10, 10, 8, 11, 12, 14, 9, 12, 4, 4, 5, 8, 12, 7, 4, 7, 9, 8, 11, 3, 11, 35, 4, 10, 10, 4, 7, 9, 5, 12, 13, 4, 10, 4, 8, 7, 5, 7, 11, 5, 8, 6, 6, 8, 9, 9, 9, 116, 5, 9, 8, 5, 9]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 73
[length(mis) for mis = unique(C_list)] = [18, 6, 10, 7, 7, 15, 8, 5, 11, 4, 7, 5, 9, 5, 12, 5, 8, 10, 7, 3, 6, 9, 9, 7, 4, 3, 4, 6, 5, 9, 30, 5, 5, 11, 8, 4, 4, 11, 9, 5, 10, 4, 4, 5, 5, 7, 5, 11, 3, 9, 5]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 74
[length(mis) for mis = unique(C_list)] = [6, 4, 4, 4, 5, 4, 13, 3, 4, 6, 4, 9, 9, 4, 4, 3, 93, 9, 5, 4, 5, 4, 8, 15, 7, 6, 5, 4, 4, 4, 11, 7, 9, 15, 7, 7, 10, 7, 4, 10, 74, 208, 6, 8, 14, 6, 8, 5, 14, 4, 4, 9, 3, 4, 11, 5, 11, 3, 4]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 75
[length(mis) for mis = unique(C_list)] = [6, 12, 8, 3, 4, 4, 13, 6, 6, 8, 5, 8, 200, 5, 4, 4, 7, 5, 11, 4, 7, 9, 8, 15, 52, 7, 5, 12, 6, 9, 6, 3, 4, 260, 6, 9, 4, 7, 6, 6, 219, 8, 4, 4, 8, 5, 14, 10, 7, 10, 305, 6, 7, 4, 10, 13, 7, 4]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 76
[length(mis) for mis = unique(C_list)] = [4, 5, 7, 6, 6, 6, 8, 9, 5, 5, 6, 8, 6, 12, 5, 8, 355, 10, 8, 7, 6, 6, 4, 10, 7, 8, 13, 5, 8, 6, 35, 4, 8, 9, 5, 10, 5, 4, 15, 7, 4, 6, 59, 475, 8, 9, 568, 5, 15, 8, 7, 5, 6, 7, 8, 4, 6, 3, 6]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 77
[length(mis) for mis = unique(C_list)] = [10, 5, 10, 8, 8, 9, 5, 10, 7, 5, 7, 6, 8, 4, 5, 4, 10, 243, 8, 5, 5, 72, 8, 5, 5, 10, 6, 9, 7, 5, 11, 7, 3, 7, 8, 12, 7, 8, 5, 5, 5, 401, 7, 10, 15, 4, 11, 3, 8, 9, 10, 5, 8, 10, 5, 11, 4]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 78
[length(mis) for mis = unique(C_list)] = [7, 5, 9, 5, 3, 4, 4, 4, 8, 4, 5, 6, 12, 9, 5, 3, 4, 4, 6, 6, 8, 24, 3, 9, 8, 132, 4, 3, 4, 4, 4, 4, 3, 4, 5, 7, 4, 3, 4, 13, 6, 5, 7, 4, 19, 4, 6, 6, 5]
length(C_list) = 49
termination_sub = MathOptInterface.INFEASIBLE
iter = 79
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 8, 6, 4, 5, 6, 4, 4, 5, 46, 6, 10, 6, 4, 6, 8, 4, 4, 6, 133, 5, 6, 6, 581, 7, 50, 66, 8, 7, 4, 6, 15, 6, 10, 4, 451, 8, 4, 8, 4, 6, 5, 6, 5, 6, 6, 6, 4, 10, 7]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 80
[length(mis) for mis = unique(C_list)] = [6, 10, 6, 12, 10, 4, 8, 9, 7, 5, 6, 7, 7, 5, 8, 25, 6, 6, 13, 11, 7, 6, 4, 9, 4, 7, 8, 4, 5, 6, 12, 6, 6, 4, 5, 10, 4, 6, 8, 4, 5, 7, 6, 6, 7, 7, 8, 124, 7, 7, 6]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 81
[length(mis) for mis = unique(C_list)] = [4, 9, 11, 5, 6, 4, 10, 10, 9, 5, 5, 12, 6, 10, 8, 3, 9, 9, 10, 10, 9, 9, 11, 6, 10, 8, 6, 13, 7, 11, 11, 8, 14, 13, 7, 17, 9, 6, 11, 9, 11, 6, 8, 10, 9, 12, 19, 9, 10, 10, 6, 11, 8, 8, 11, 10, 6, 13, 6]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 82
[length(mis) for mis = unique(C_list)] = [4, 8, 12, 6, 4, 5, 9, 6, 12, 10, 8, 6, 10, 5, 4, 7, 9, 8, 4, 14, 10, 10, 13, 8, 12, 9, 8, 10, 13, 10, 12, 11, 14, 10, 11, 11, 9, 6, 4, 9, 10, 10, 474, 9, 11, 12, 8, 10, 9, 55, 13, 5, 8, 111, 10, 11, 9, 9, 12]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 83
[length(mis) for mis = unique(C_list)] = [16, 8, 9, 8, 7, 7, 11, 6, 8, 8, 3, 11, 8, 7, 9, 12, 5, 7, 9, 7, 4, 7, 6, 7, 7, 8, 7, 168, 6, 6, 7, 6, 6, 12, 7, 9, 10, 5, 226, 410, 7, 138, 98, 10, 9, 11, 7, 7, 4, 11, 15, 9, 5, 4, 8, 253, 10, 12, 7, 7]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 84
[length(mis) for mis = unique(C_list)] = [6, 4, 12, 9, 10, 4, 8, 13, 8, 5, 8, 13, 19, 9, 12, 16, 10, 13, 10, 4, 5, 15, 4, 9, 11, 4, 12, 11, 15, 10, 11, 12, 12, 29, 10, 15, 9, 4, 10, 9, 8, 9, 4, 8, 11, 10, 4, 5, 8, 11, 10, 12, 9]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 85
[length(mis) for mis = unique(C_list)] = [6, 4, 10, 7, 4, 7, 8, 9, 6, 7, 6, 10, 8, 13, 10, 6, 7, 4, 4, 13, 12, 6, 165, 6, 10, 7, 7, 8, 4, 10, 6, 4, 4, 8, 6, 10, 7, 8, 11, 10, 10, 7, 4, 7, 7, 10, 12, 5, 9, 4, 5, 14, 12, 76, 6, 7]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 86
[length(mis) for mis = unique(C_list)] = [5, 8, 9, 3, 4, 8, 5, 7, 7, 8, 3, 9, 14, 15, 10, 8, 5, 8, 6, 5, 7, 16, 310, 5, 4, 5, 10, 6, 6, 3, 3, 15, 8, 13, 7, 12, 6, 4, 5, 6, 9, 13, 10, 6, 5, 13, 12, 18, 16, 8, 6, 15, 9, 4, 8, 8, 5, 9, 7, 17]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 87
[length(mis) for mis = unique(C_list)] = [11, 7, 10, 5, 4, 7, 6, 10, 7, 5, 93, 13, 4, 10, 7, 8, 9, 7, 12, 16, 11, 9, 8, 7, 9, 2, 5, 5, 16, 6, 4, 28, 11, 5, 9, 8, 6, 8, 12, 11, 7, 8, 4, 4, 11, 5, 57, 12, 5, 12, 6, 11, 6, 5, 7, 4, 6, 8, 4]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 88
[length(mis) for mis = unique(C_list)] = [4, 8, 10, 5, 13, 10, 19, 4, 5, 3, 4, 7, 4, 10, 6, 13, 6, 4, 11, 10, 10, 9, 4, 4, 6, 9, 4, 13, 10, 11, 7, 6, 10, 14, 12, 5, 14, 10, 9, 4, 14, 8, 8, 4, 13, 10, 8, 7, 13, 5, 10, 11, 6, 12, 8, 14]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 89
[length(mis) for mis = unique(C_list)] = [6, 9, 2, 5, 6, 4, 169, 12, 10, 6, 5, 4, 5, 11, 2, 5, 5, 9, 8, 196, 10, 4, 3, 6, 4, 7, 4, 7, 10, 4, 5, 4, 6, 174, 5, 4, 6, 9, 5, 10, 7, 6, 7, 6, 4, 3, 5, 5, 7, 4, 6, 16, 9, 5]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 90
[length(mis) for mis = unique(C_list)] = [11, 4, 7, 4, 11, 10, 9, 4, 6, 12, 19, 10, 16, 5, 8, 12, 8, 2, 6, 8, 10, 8, 4, 5, 8, 10, 8, 9, 8, 10, 10, 11, 10, 5, 10, 5, 11, 8, 4, 9, 8, 47, 14, 9, 9, 14, 8, 9, 11, 9, 6, 4, 23, 5, 12, 9, 5, 6]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 91
[length(mis) for mis = unique(C_list)] = [6, 7, 7, 6, 6, 4, 3, 6, 7, 6, 9, 7, 6, 11, 5, 10, 7, 5, 4, 19, 12, 7, 6, 9, 7, 8, 7, 5, 5, 6, 11, 5, 3, 6, 7, 8, 5, 5, 11, 6, 5, 95, 6, 11, 6, 9, 15, 9, 18, 4, 8, 7, 6, 7, 4, 7, 7, 10, 6, 5, 4]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 92
[length(mis) for mis = unique(C_list)] = [20, 10, 4, 13, 5, 9, 7, 7, 10, 7, 9, 9, 6, 5, 9, 5, 5, 4, 203, 10, 3, 75, 5, 6, 9, 4, 8, 8, 5, 123, 9, 6, 11, 11, 4, 14, 9, 6, 8, 4, 8, 10, 7, 10, 5, 14, 7, 8, 9, 6, 15, 9, 6, 9, 11, 9, 21, 12, 227, 10, 5, 8]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 93
[length(mis) for mis = unique(C_list)] = [5, 7, 11, 11, 9, 8, 6, 9, 8, 11, 4, 12, 7, 17, 7, 7, 15, 6, 11, 9, 8, 11, 8, 11, 7, 9, 11, 7, 10, 11, 12, 10, 6, 7, 7, 4, 11, 8, 10, 11, 7, 8, 4, 6, 16, 8, 8, 4, 10, 38, 8, 8, 8, 13, 4, 11, 6, 5, 10, 9, 6, 11]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 94
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 56, 8, 10, 11, 9, 12, 4, 20, 9, 10, 11, 14, 8, 10, 5, 9, 11, 12, 5, 11, 4, 7, 10, 11, 13, 11, 7, 6, 10, 26, 9, 10, 61, 11, 4, 3, 13, 6, 9, 147, 5, 12, 12, 8, 8, 8, 11, 39, 7, 9, 12, 37, 7, 67, 105, 16, 5, 9, 7]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 95
[length(mis) for mis = unique(C_list)] = [4, 10, 4, 8, 10, 8, 4, 12, 13, 4, 12, 9, 8, 5, 5, 5, 11, 8, 10, 4, 4, 11, 9, 5, 95, 4, 5, 8, 4, 119, 9, 4, 3, 4, 121, 599, 15, 24, 65, 4, 142, 7, 12, 6, 4, 16, 9, 115, 11, 14, 10, 11, 9, 10, 14, 5, 4, 7, 10, 10, 9]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 96
[length(mis) for mis = unique(C_list)] = [4, 5, 6, 15, 4, 4, 3, 6, 6, 6, 6, 8, 6, 6, 7, 8, 7, 15, 10, 4, 5, 6, 3, 5, 593, 4, 6, 5, 4, 7, 4, 133, 6, 4, 4, 4, 426, 8, 4, 6, 4, 7, 4, 6, 464, 282, 4, 3, 6, 5, 27, 5, 6, 12, 4]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 97
[length(mis) for mis = unique(C_list)] = [4, 5, 9, 7, 7, 9, 4, 6, 14, 10, 18, 4, 4, 10, 9, 5, 8, 3, 4, 4, 4, 4, 8, 8, 7, 43, 453, 6, 4, 12, 5, 4, 6, 5, 8, 8, 8, 8, 8, 4, 9, 238, 10, 4, 14, 6, 11, 27, 11, 7, 10, 10, 9, 7, 8]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 98
[length(mis) for mis = unique(C_list)] = [14, 12, 4, 5, 5, 6, 6, 6, 42, 7, 45, 5, 9, 6, 6, 5, 4, 4, 7, 6, 6, 6, 6, 6, 4, 11, 6, 4, 5, 7, 9, 12, 11, 11, 6, 10, 7, 6, 11, 10, 4, 6, 26, 21, 4, 7, 13, 7, 19, 6, 20, 6, 7]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 99
[length(mis) for mis = unique(C_list)] = [8, 5, 4, 4, 8, 4, 12, 8, 3, 5, 10, 12, 11, 4, 5, 10, 8, 6, 11, 5, 9, 6, 4, 6, 13, 4, 7, 12, 5, 16, 13, 7, 8, 6, 10, 7, 6, 6, 4, 16, 6, 4, 6, 13, 7, 8, 4, 4, 69, 4, 18, 14, 5, 6, 13, 9, 8]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 100
[length(mis) for mis = unique(C_list)] = [5, 4, 7, 10, 7, 8, 7, 8, 9, 6, 5, 4, 10, 6, 7, 4, 6, 4, 10, 4, 4, 4, 6, 8, 9, 10, 7, 7, 8, 8, 8, 6, 11, 4, 4, 6, 4, 4, 4, 8, 5, 12, 13, 6, 4, 10, 8, 4, 6, 4, 11, 6, 4, 4, 8, 5]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 101
[length(mis) for mis = unique(C_list)] = [8, 8, 3, 11, 6, 5, 6, 8, 10, 8, 10, 6, 5, 5, 3, 7, 7, 4, 4, 12, 4, 3, 6, 400, 6, 7, 11, 4, 7, 90, 445, 6, 4, 10, 6, 13, 10, 7, 9, 6, 7, 9, 7, 6, 8, 6, 9, 9, 5, 6, 3, 8, 4, 3]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 102
[length(mis) for mis = unique(C_list)] = [4, 6, 11, 7, 4, 12, 4, 8, 6, 13, 9, 5, 5, 10, 315, 10, 8, 4, 58, 8, 6, 6, 9, 12, 5, 8, 9, 7, 4, 5, 382, 8, 9, 6, 4, 8, 5, 83, 256, 4, 4, 4, 5, 7, 4, 8, 6, 4, 7, 12, 6, 9, 10, 8, 4]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 103
[length(mis) for mis = unique(C_list)] = [4, 4, 10, 6, 7, 8, 4, 88, 3, 5, 10, 5, 5, 11, 6, 9, 11, 5, 96, 18, 659, 9, 9, 7, 5, 147, 6, 9, 59, 3, 12, 9, 12, 9, 10, 9, 401, 4, 6, 9, 10, 4, 9, 4, 7, 5]
length(C_list) = 46
termination_sub = MathOptInterface.INFEASIBLE
iter = 104
[length(mis) for mis = unique(C_list)] = ┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
┌ Warning: flux through non-zero reactions is thermo feasible
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:539
[4, 12, 9, 5, 4, 7, 7, 4, 5, 7, 6, 11, 13, 410, 7, 4, 4, 14, 11, 11, 65, 62, 4, 4, 12, 4, 8, 11, 6, 48, 392, 10, 7, 9, 4, 22, 6, 7, 6, 8, 7, 9, 5, 9, 9, 8, 6, 6, 8]
length(C_list) = 49
termination_sub = MathOptInterface.INFEASIBLE
iter = 105
[length(mis) for mis = unique(C_list)] = [4, 6, 7, 4, 7, 8, 9, 6, 8, 6, 6, 5, 4, 6, 7, 5, 8, 11, 41, 10, 6, 7, 7, 5, 8, 6, 6, 8, 7, 8, 10, 9, 5, 6, 4, 4, 5, 7, 8, 7, 6, 7, 7, 6, 8, 10, 11, 8, 12, 10, 10, 8, 7, 627, 6, 7, 11]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 106
[length(mis) for mis = unique(C_list)] = [6, 5, 7, 5, 8, 6, 15, 5, 9, 5, 9, 7, 5, 8, 9, 8, 8, 7, 8, 9, 6, 5, 9, 7, 10, 7, 7, 5, 3, 8, 6, 13, 7, 5, 6, 6, 11, 8, 9, 9, 9, 11, 6, 9, 14, 7, 8, 3, 6, 8, 9, 4, 8, 6, 8, 5, 11, 5]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 107
[length(mis) for mis = unique(C_list)] = [4, 4, 11, 4, 4, 4, 5, 10, 9, 4, 10, 4, 4, 4, 9, 6, 48, 4, 7, 14, 8, 10, 11, 8, 4, 10, 13, 13, 7, 4, 4, 12, 11, 9, 5, 15, 7, 9, 10, 9, 4, 4, 6, 5, 5, 36, 9, 6, 11, 10, 5, 6, 11, 13, 14, 11, 59]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 108
[length(mis) for mis = unique(C_list)] = [5, 3, 8, 5, 6, 4, 5, 7, 8, 6, 7, 9, 6, 11, 4, 212, 4, 76, 5, 6, 7, 5, 348, 4, 3, 9, 5, 4, 5, 4, 8, 423, 10, 8, 8, 51, 3, 8, 4, 5, 9, 4, 5, 10, 4, 5, 6, 9, 9, 5, 3, 7]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 109
[length(mis) for mis = unique(C_list)] = [4, 7, 12, 5, 7, 7, 7, 10, 6, 4, 8, 9, 5, 9, 10, 9, 8, 7, 8, 9, 10, 27, 13, 10, 7, 4, 9, 12, 9, 6, 10, 10, 4, 16, 13, 10, 10, 5, 4, 10, 7, 6, 11, 27, 9, 9, 7, 7, 10, 9, 7, 10, 18, 418, 9, 11, 7]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 110
[length(mis) for mis = unique(C_list)] = [5, 4, 5, 8, 7, 6, 4, 7, 7, 5, 8, 4, 4, 5, 7, 8, 6, 6, 4, 6, 8, 7, 7, 7, 12, 8, 5, 5, 4, 7, 5, 4, 5, 7, 6, 7, 9, 10, 6, 4, 5, 8, 6, 8, 18, 7, 461, 6, 7, 4, 7, 7, 7, 6]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 111
[length(mis) for mis = unique(C_list)] = [13, 11, 9, 9, 11, 8, 10, 12, 5, 4, 9, 11, 15, 390, 4, 9, 10, 9, 8, 8, 4, 9, 19, 8, 8, 8, 10, 4, 9, 10, 11, 12, 10, 7, 6, 9, 9, 45, 8, 6, 7, 498, 9, 6, 9, 13, 11, 14, 5, 10, 168, 10, 8, 6, 7, 7, 8, 7, 7, 7, 6, 10]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 112
[length(mis) for mis = unique(C_list)] = [4, 5, 9, 6, 4, 9, 16, 9, 7, 31, 12, 12, 4, 6, 15, 4, 82, 7, 9, 14, 4, 10, 8, 10, 5, 7, 4, 7, 9, 17, 6, 11, 7, 300, 6, 8, 8, 6, 7, 6, 6, 10, 11, 8, 10, 10, 5, 9, 8, 6, 11, 5]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 113
[length(mis) for mis = unique(C_list)] = [5, 8, 8, 5, 9, 5, 4, 8, 8, 9, 9, 38, 10, 9, 6, 5, 12, 26, 8, 9, 7, 30, 4, 7, 8, 8, 6, 4, 4, 7, 4, 10, 6, 5, 6, 11, 7, 5, 4, 18, 12, 8, 8, 9, 5, 6, 4, 8, 7, 12, 8, 6, 5, 373, 10, 6]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 114
[length(mis) for mis = unique(C_list)] = [3, 5, 7, 33, 6, 5, 11, 8, 9, 3, 8, 6, 7, 14, 5, 7, 4, 5, 4, 16, 7, 5, 11, 6, 9, 4, 6, 4, 4, 8, 4, 10, 6, 6, 5, 90, 5, 131, 4, 8, 4, 4, 19, 7, 6, 6, 9, 8, 7]
length(C_list) = 49
termination_sub = MathOptInterface.INFEASIBLE
iter = 115
[length(mis) for mis = unique(C_list)] = [10, 8, 6, 4, 8, 9, 6, 9, 9, 4, 6, 10, 5, 7, 10, 7, 10, 6, 7, 10, 9, 8, 9, 7, 7, 8, 5, 6, 8, 5, 10, 7, 10, 6, 4, 6, 7, 12, 6, 7, 5, 8, 6, 8, 8, 13, 7, 6, 9, 6, 8, 16, 6, 11, 8, 5, 11, 8, 9, 5, 4, 7]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 116
[length(mis) for mis = unique(C_list)] = [12, 5, 5, 10, 10, 10, 11, 9, 12, 4, 8, 6, 9, 7, 9, 10, 6, 12, 9, 5, 9, 7, 9, 12, 10, 8, 4, 5, 14, 7, 8, 8, 4, 6, 9, 8, 11, 4, 7, 4, 15, 9, 9, 10, 4, 10, 5, 4, 6, 78, 46, 10, 9, 8, 9, 12, 10, 4]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 117
[length(mis) for mis = unique(C_list)] = [11, 7, 10, 8, 4, 4, 9, 10, 7, 9, 10, 10, 10, 7, 7, 21, 5, 9, 9, 10, 8, 9, 8, 9, 5, 8, 5, 8, 5, 8, 9, 9, 8, 8, 10, 23, 4, 13, 11, 9, 10, 4, 9, 4, 8, 9, 10, 4, 10, 4, 4, 9, 8, 10, 9, 8, 6, 13, 6, 10]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 118
[length(mis) for mis = unique(C_list)] = [8, 11, 10, 7, 10, 7, 7, 10, 8, 14, 6, 9, 9, 14, 9, 12, 7, 13, 7, 9, 6, 5, 8, 5, 9, 9, 11, 9, 5, 4, 11, 8, 35, 11, 8, 8, 6, 4, 12, 5, 10, 5, 5, 10, 7, 11, 8, 12, 22, 6, 141, 10]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 119
[length(mis) for mis = unique(C_list)] = [16, 9, 8, 4, 9, 7, 6, 6, 6, 6, 99, 8, 4, 6, 10, 9, 7, 5, 3, 7, 6, 6, 6, 6, 8, 7, 10, 6, 7, 8, 4, 7, 7, 5, 8, 35, 4, 8, 8, 345, 3, 4, 4, 6, 7, 7, 10, 8, 11, 6, 30, 8, 9]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 120
[length(mis) for mis = unique(C_list)] = [7, 8, 4, 10, 4, 6, 12, 4, 4, 4, 3, 11, 12, 146, 292, 16, 5, 4, 4, 10, 6, 416, 4, 300, 6, 44, 7, 12, 7, 45, 4, 7, 6, 7, 11, 6, 23, 8, 4, 7, 5, 8, 5, 5, 5, 6, 4, 28, 8, 6, 5, 9, 6, 8, 10, 6, 3, 3, 9]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 121
[length(mis) for mis = unique(C_list)] = [4, 9, 9, 5, 9, 13, 9, 8, 7, 10, 4, 5, 9, 10, 6, 7, 18, 15, 18, 9, 7, 10, 10, 8, 9, 13, 8, 3, 9, 7, 4, 9, 8, 11, 13, 19, 12, 9, 7, 7, 8, 13, 10, 15, 13, 9, 10, 10, 5, 8, 10, 81, 167]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 122
[length(mis) for mis = unique(C_list)] = [12, 6, 4, 11, 13, 5, 4, 12, 4, 5, 174, 14, 9, 7, 13, 4, 11, 14, 3, 4, 13, 16, 20, 8, 5, 3, 10, 6, 5, 33, 7, 13, 10, 10, 6, 6, 8, 8, 16, 4, 12, 9, 18, 11, 8, 6, 6, 14, 14, 8, 5, 8, 5, 10, 10, 10, 9, 17, 6, 13, 28, 12]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 123
[length(mis) for mis = unique(C_list)] = [7, 5, 8, 13, 9, 12, 11, 10, 13, 10, 12, 9, 8, 32, 11, 10, 8, 5, 10, 13, 10, 7, 11, 8, 7, 12, 5, 4, 19, 14, 8, 12, 11, 5, 7, 13, 12, 8, 116, 4, 12, 10, 141, 10, 14, 8, 13, 10, 12, 7, 6, 94, 11, 9, 11, 15]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 124
[length(mis) for mis = unique(C_list)] = [5, 8, 11, 4, 9, 6, 26, 6, 5, 9, 9, 8, 4, 395, 17, 9, 8, 11, 13, 5, 7, 5, 6, 19, 11, 9, 32, 7, 21, 5, 8, 7, 5, 4, 11, 8, 7, 6, 12, 8, 7, 44, 12, 5, 12, 7, 8, 7, 12, 4, 9, 5, 13, 6, 3, 7, 13, 7]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 125
[length(mis) for mis = unique(C_list)] = [8, 6, 4, 8, 8, 9, 8, 8, 9, 8, 8, 10, 8, 9, 8, 4, 5, 6, 6, 9, 8, 6, 9, 12, 9, 8, 10, 7, 9, 9, 10, 7, 9, 9, 7, 7, 7, 9, 11, 7, 13, 3, 6, 11, 5, 10, 9, 235, 4, 8, 10, 10, 7, 9, 10]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 126
[length(mis) for mis = unique(C_list)] = [16, 4, 16, 7, 3, 7, 5, 4, 5, 6, 5, 4, 8, 3, 8, 5, 4, 6, 4, 6, 6, 6, 7, 9, 6, 6, 4, 5, 3, 8, 5, 5, 6, 8, 4, 6, 309, 7, 136, 10, 9, 11, 10, 5, 4, 8, 164, 4, 4, 10]
length(C_list) = 50
termination_sub = MathOptInterface.INFEASIBLE
iter = 127
[length(mis) for mis = unique(C_list)] = [3, 9, 12, 4, 10, 9, 16, 17, 9, 9, 14, 9, 13, 12, 17, 6, 17, 11, 9, 10, 6, 9, 8, 15, 11, 4, 12, 7, 7, 12, 8, 5, 9, 19, 6, 9, 9, 11, 18, 9, 7, 20, 11, 10, 8, 14, 14, 7, 11, 9, 15, 12, 16, 10]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 128
[length(mis) for mis = unique(C_list)] = [15, 6, 5, 8, 7, 5, 6, 7, 9, 5, 4, 8, 11, 6, 7, 7, 52, 4, 8, 4, 8, 8, 7, 3, 11, 6, 6, 4, 6, 7, 9, 9, 9, 11, 4, 6, 12, 7, 8, 9, 6, 13, 8, 6, 8, 5, 4, 6, 8, 4, 9, 8, 6, 7, 6, 12, 10, 17]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 129
[length(mis) for mis = unique(C_list)] = [9, 7, 11, 10, 3, 4, 8, 4, 14, 11, 12, 10, 10, 7, 7, 3, 5, 6, 8, 8, 10, 3, 16, 9, 10, 7, 6, 8, 6, 10, 5, 107, 8, 12, 6, 8, 11, 7, 12, 8, 14, 15, 6, 4, 10, 7, 4, 4, 15, 13, 4, 12, 12, 12, 10, 13, 249, 11, 15, 15, 14]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 130
[length(mis) for mis = unique(C_list)] = [9, 8, 7, 13, 9, 6, 8, 6, 8, 13, 9, 13, 93, 4, 325, 8, 19, 19, 12, 7, 19, 14, 18, 8, 10, 23, 9, 10, 8, 8, 8, 9, 15, 13, 9, 226, 13, 9, 10, 17, 6, 9, 519, 9, 11, 10, 8, 9, 8, 54, 5, 9, 10, 9, 9, 8, 8, 7, 10, 5, 12]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 131
[length(mis) for mis = unique(C_list)] = [15, 11, 13, 13, 12, 12, 14, 11, 14, 11, 4, 12, 11, 12, 56, 10, 13, 7, 12, 244, 9, 11, 13, 13, 6, 408, 13, 10, 161, 7, 15, 14, 121, 13, 11, 13, 15, 10, 12, 7, 11, 12, 10, 12, 11, 17, 7, 10, 9, 13, 10, 6, 14, 14, 9, 12, 11, 420, 14, 12]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 132
[length(mis) for mis = unique(C_list)] = [3, 16, 8, 11, 9, 15, 8, 13, 10, 8, 13, 19, 11, 11, 9, 5, 8, 480, 11, 4, 4, 13, 11, 4, 12, 6, 5, 9, 13, 9, 15, 14, 8, 10, 13, 10, 8, 14, 9, 8, 170, 12, 8, 13, 16, 12, 10, 8, 12, 5, 11, 18, 16, 9, 308, 8, 11, 175, 15, 11]
length(C_list) = 60
termination_sub = MathOptInterface.INFEASIBLE
iter = 133
[length(mis) for mis = unique(C_list)] = [8, 13, 8, 6, 5, 10, 24, 11, 9, 4, 8, 325, 15, 6, 12, 118, 10, 350, 5, 5, 7, 10, 11, 73, 6, 10, 11, 13, 5, 19, 7, 14, 9, 12, 5, 12, 14, 17, 11, 6, 4, 7, 425, 15, 13, 12, 12, 9, 55, 10, 14, 12, 10, 391, 11, 11, 365, 6, 5]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 134
[length(mis) for mis = unique(C_list)] = [8, 9, 4, 9, 7, 12, 4, 15, 5, 12, 4, 212, 562, 9, 9, 120, 4, 5, 7, 4, 4, 3, 9, 3, 4, 9, 9, 4, 6, 5, 8, 5, 9, 9, 48, 6, 12, 7, 5, 10, 32, 34, 5, 4, 4, 18, 7, 10, 6, 8, 5]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 135
[length(mis) for mis = unique(C_list)] = [4, 15, 4, 4, 4, 4, 8, 4, 5, 7, 3, 6, 7, 12, 7, 4, 6, 4, 6, 6, 8, 8, 9, 11, 12, 2, 4, 12, 7, 7, 6, 8, 7, 11, 4, 21, 11, 7, 4, 10, 164, 19, 16, 72, 8, 12, 9, 12, 6, 4, 10, 15, 6, 8]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 136
[length(mis) for mis = unique(C_list)] = [24, 5, 11, 12, 6, 9, 9, 10, 11, 9, 6, 9, 7, 8, 11, 5, 8, 15, 8, 8, 7, 11, 9, 9, 4, 10, 4, 10, 10, 12, 6, 144, 9, 16, 6, 13, 9, 9, 10, 15, 8, 6, 9, 7, 15, 6, 10, 15, 10, 12, 7, 8, 8, 10, 7, 295, 15, 8, 4, 6, 3]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 137
[length(mis) for mis = unique(C_list)] = [10, 11, 13, 4, 46, 9, 9, 6, 10, 15, 3, 12, 4, 4, 7, 10, 8, 4, 6, 11, 9, 10, 6, 6, 5, 11, 8, 9, 4, 11, 294, 5, 12, 10, 10, 4, 7, 14, 16, 8, 7, 9, 7, 389, 11, 9, 10, 17]
length(C_list) = 48
termination_sub = MathOptInterface.INFEASIBLE
iter = 138
[length(mis) for mis = unique(C_list)] = [3, 6, 8, 8, 6, 9, 6, 7, 9, 8, 7, 11, 6, 9, 4, 10, 8, 6, 4, 6, 308, 6, 8, 10, 8, 9, 8, 13, 7, 8, 11, 10, 6, 16, 18, 15, 5, 8, 9, 9, 9, 11, 9, 10, 6, 4, 16, 10, 6, 10, 8, 6, 8, 9, 9, 10, 8, 4]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 139
[length(mis) for mis = unique(C_list)] = [7, 7, 10, 8, 10, 6, 6, 10, 6, 7, 7, 12, 6, 4, 6, 4, 10, 11, 8, 10, 33, 5, 4, 4, 17, 6, 8, 12, 5, 9, 8, 12, 5, 8, 9, 12, 5, 10, 13, 12, 9, 6, 11, 10, 4, 7, 11, 10, 7, 7, 4, 44, 8, 9, 8, 4, 8, 10, 13, 5, 13, 5, 11]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 140
[length(mis) for mis = unique(C_list)] = [6, 16, 10, 16, 15, 19, 5, 14, 14, 12, 4, 16, 16, 25, 15, 11, 376, 21, 16, 14, 14, 16, 19, 25, 14, 15, 16, 18, 15, 14, 17, 20, 4, 17, 20, 19, 15, 18, 17, 13, 6, 315, 18, 11, 16, 16, 14, 13, 19, 18, 19, 29, 19, 12, 4, 10, 14, 13, 12, 15, 16, 16]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 141
[length(mis) for mis = unique(C_list)] = [14, 12, 9, 8, 11, 18, 9, 11, 5, 15, 9, 8, 7, 4, 4, 12, 9, 13, 12, 14, 6, 10, 8, 10, 8, 9, 11, 195, 7, 9, 10, 239, 10, 12, 7, 14, 8, 7, 10, 26, 9, 20, 12, 12, 4, 11, 10, 10, 4, 6, 12, 6, 8, 9, 12, 26, 9, 389, 4, 11, 4, 15, 6, 4]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 142
[length(mis) for mis = unique(C_list)] = [6, 9, 4, 11, 6, 56, 7, 11, 4, 9, 4, 19, 5, 18, 4, 30, 9, 5, 5, 7, 4, 11, 4, 11, 9, 9, 8, 460, 7, 5, 8, 10, 9, 5, 15, 10, 4, 58, 9, 9, 8, 5, 7, 8, 8, 9, 9, 4, 10, 9, 12, 11, 9, 10]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 143
[length(mis) for mis = unique(C_list)] = [13, 9, 7, 15, 9, 13, 16, 9, 10, 7, 8, 10, 15, 167, 6, 39, 9, 13, 11, 10, 9, 11, 12, 13, 9, 9, 13, 11, 7, 8, 6, 15, 10, 18, 9, 92, 13, 13, 11, 6, 12, 9, 7, 6, 13, 9, 5, 12, 4, 8, 109, 8, 7, 8, 6, 8, 13, 9, 17, 10, 7]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 144
[length(mis) for mis = unique(C_list)] = [22, 5, 6, 8, 4, 4, 7, 8, 15, 7, 4, 7, 4, 10, 6, 4, 7, 5, 4, 5, 7, 11, 6, 11, 4, 8, 15, 7, 7, 396, 7, 7, 3, 3, 396, 471, 6, 17, 7, 5, 197, 504, 6, 87, 3, 6, 11, 9, 357, 3, 8, 8, 3, 53, 9, 7, 10, 247, 5, 32, 7]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 145
[length(mis) for mis = unique(C_list)] = [13, 12, 11, 5, 4, 21, 11, 6, 11, 8, 14, 6, 6, 12, 37, 6, 6, 39, 6, 7, 9, 5, 8, 18, 7, 12, 11, 15, 7, 8, 5, 7, 6, 9, 13, 7, 4, 4, 11, 6, 6, 12, 7, 5, 10, 16, 11, 5, 11, 5, 7, 7, 28, 11, 10, 26, 12]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 146
[length(mis) for mis = unique(C_list)] = [7, 11, 9, 8, 4, 6, 5, 6, 6, 7, 4, 11, 23, 4, 4, 8, 22, 126, 8, 5, 14, 6, 10, 6, 6, 21, 15, 10, 9, 4, 7, 9, 298, 11, 36, 4, 6, 18, 7, 9, 18, 9, 9, 10, 6, 6, 7, 6, 8, 10, 7, 6, 58, 7, 12, 6, 26]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 147
[length(mis) for mis = unique(C_list)] = [18, 7, 14, 12, 12, 11, 8, 5, 8, 11, 11, 7, 9, 8, 10, 9, 11, 8, 12, 10, 8, 4, 9, 7, 16, 10, 83, 4, 15, 341, 10, 13, 13, 7, 6, 10, 8, 14, 6, 63, 8, 152, 457, 8, 13, 9, 10, 6, 5, 8, 12, 9, 4, 11, 9, 6, 11, 5, 11, 10, 8, 10, 5, 11]
length(C_list) = 64
termination_sub = MathOptInterface.INFEASIBLE
iter = 148
[length(mis) for mis = unique(C_list)] = [3, 9, 4, 13, 13, 10, 8, 4, 11, 7, 12, 11, 11, 13, 5, 10, 9, 11, 11, 7, 9, 10, 4, 10, 5, 7, 12, 6, 3, 11, 16, 9, 7, 12, 10, 7, 10, 10, 3, 13, 11, 8, 12, 11, 11, 5, 6, 6, 9, 14, 7, 9, 26, 6, 17]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 149
[length(mis) for mis = unique(C_list)] = [5, 4, 10, 6, 11, 6, 8, 4, 5, 7, 5, 8, 4, 8, 5, 5, 8, 3, 11, 8, 9, 4, 5, 5, 4, 6, 6, 4, 7, 5, 4, 4, 5, 3, 4, 5, 5, 8, 7, 71, 4, 6, 5, 5, 4, 5, 4, 6, 4, 8, 10, 6, 4, 4, 10, 6]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 150
[length(mis) for mis = unique(C_list)] = [8, 8, 8, 7, 9, 5, 11, 14, 9, 8, 10, 14, 11, 7, 7, 9, 8, 8, 11, 5, 4, 4, 6, 6, 12, 12, 9, 6, 5, 10, 7, 12, 11, 10, 14, 11, 9, 9, 8, 6, 13, 4, 12, 8, 8, 7, 17, 13, 11, 8, 51, 7, 14, 12, 224, 12, 9, 8, 9, 10, 10]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 151
[length(mis) for mis = unique(C_list)] = [5, 12, 4, 9, 8, 9, 7, 17, 8, 10, 10, 11, 11, 13, 8, 12, 7, 8, 12, 5, 12, 11, 4, 12, 9, 4, 10, 56, 10, 10, 5, 11, 12, 10, 9, 13, 10, 16, 8, 9, 4, 13, 42, 11, 10, 3, 10, 13, 9, 4, 11, 8, 4, 5, 12, 9, 11, 8, 11, 7, 7, 11, 11, 8, 5, 13, 8]
length(C_list) = 67
termination_sub = MathOptInterface.INFEASIBLE
iter = 152
[length(mis) for mis = unique(C_list)] = [10, 6, 6, 9, 11, 12, 14, 17, 4, 9, 14, 4, 7, 10, 9, 4, 12, 21, 12, 14, 5, 12, 10, 12, 12, 13, 16, 250, 11, 10, 12, 9, 4, 14, 4, 9, 5, 5, 12, 14, 276, 9, 4, 10, 11, 4, 4, 11, 13, 11, 7, 10, 8, 55, 11, 11, 11, 9]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 153
[length(mis) for mis = unique(C_list)] = [3, 12, 4, 6, 10, 7, 11, 4, 6, 12, 11, 11, 6, 7, 4, 10, 11, 122, 23, 6, 9, 6, 9, 4, 4, 12, 10, 5, 6, 7, 15, 8, 14, 6, 10, 6, 5, 7, 7, 7, 9, 9, 5, 7, 9, 4, 67, 4, 4, 5, 9, 9, 8, 4, 11, 8, 18, 4, 4, 4, 7]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 154
[length(mis) for mis = unique(C_list)] = [4, 12, 10, 7, 11, 6, 7, 3, 4, 6, 8, 5, 4, 9, 5, 7, 6, 4, 6, 6, 8, 4, 4, 6, 4, 9, 6, 10, 4, 7, 7, 11, 8, 4, 10, 9, 9, 8, 8, 6, 6, 7, 549, 6, 6, 4, 12, 4, 12, 3, 6, 8, 8, 8, 4, 8, 478, 10, 12, 9, 11]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 155
[length(mis) for mis = unique(C_list)] = [8, 4, 6, 17, 5, 7, 5, 8, 8, 4, 10, 5, 10, 5, 4, 6, 5, 3, 10, 25, 7, 4, 8, 4, 8, 4, 4, 9, 4, 8, 5, 11, 3, 5, 9, 6, 6, 4, 12, 6, 9, 7, 5, 6, 6, 17, 8, 8, 3, 7, 5, 14, 7, 10, 9, 10]
length(C_list) = 56
termination_sub = MathOptInterface.INFEASIBLE
iter = 156
[length(mis) for mis = unique(C_list)] = [34, 12, 4, 7, 8, 6, 7, 16, 8, 6, 15, 7, 3, 35, 5, 8, 11, 7, 10, 7, 9, 11, 10, 7, 8, 16, 6, 4, 25, 12, 8, 5, 14, 11, 5, 5, 6, 11, 9, 16, 7, 10, 7, 134, 6, 6, 4, 5, 14, 7, 8, 10, 11, 8, 10, 18, 9, 11]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 157
[length(mis) for mis = unique(C_list)] = [4, 10, 5, 6, 6, 7, 6, 8, 9, 6, 8, 9, 6, 6, 7, 7, 3, 7, 10, 6, 10, 9, 8, 10, 8, 7, 7, 11, 8, 8, 9, 4, 12, 6, 7, 10, 7, 7, 16, 7, 11, 7, 6, 8, 4, 6, 8, 13, 8, 8, 8, 9]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 158
[length(mis) for mis = unique(C_list)] = [15, 8, 6, 4, 8, 4, 7, 6, 11, 9, 7, 5, 6, 12, 8, 7, 9, 5, 10, 8, 7, 8, 11, 11, 7, 6, 7, 112, 10, 6, 8, 10, 6, 5, 11, 7, 4, 6, 7, 13, 6, 15, 13, 7, 472, 7, 12, 6, 23, 5]
length(C_list) = 50
termination_sub = MathOptInterface.INFEASIBLE
iter = 159
[length(mis) for mis = unique(C_list)] = [6, 12, 11, 12, 10, 12, 11, 14, 9, 15, 13, 12, 13, 10, 8, 8, 11, 11, 19, 11, 14, 11, 3, 13, 11, 6, 8, 3, 11, 8, 8, 11, 14, 11, 4, 9, 7, 5, 7, 10, 15, 11, 5, 11, 31, 12, 11, 12, 10, 5, 9, 10, 14, 9, 11, 10, 11, 18, 10, 19, 9, 7, 10]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 160
[length(mis) for mis = unique(C_list)] = [7, 10, 10, 9, 10, 9, 6, 12, 9, 5, 11, 10, 10, 12, 11, 12, 14, 11, 10, 6, 7, 136, 615, 7, 8, 9, 10, 7, 10, 8, 14, 13, 8, 10, 6, 12, 9, 12, 13, 9, 7, 8, 58, 9, 10, 13, 10, 13, 13, 8, 10, 7, 10, 11, 10, 12, 7, 13, 7, 8, 6, 10]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 161
[length(mis) for mis = unique(C_list)] = [3, 8, 8, 6, 7, 4, 3, 8, 12, 8, 6, 7, 6, 2, 9, 5, 7, 9, 7, 7, 6, 11, 9, 6, 9, 7, 9, 9, 11, 9, 18, 9, 9, 8, 7, 9, 5, 7, 5, 8, 18, 8, 7, 11, 12, 10, 85, 9, 7, 8, 8, 8, 10, 8, 11, 88, 7, 8, 9, 8, 7, 11]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 162
[length(mis) for mis = unique(C_list)] = [3, 6, 11, 5, 4, 10, 4, 10, 11, 6, 4, 4, 8, 10, 4, 6, 11, 6, 4, 9, 32, 11, 10, 8, 6, 14, 12, 11, 7, 13, 8, 9, 10, 8, 4, 12, 13, 11, 3, 10, 12, 11, 13, 7, 10, 10, 8, 5, 178, 11, 11]
length(C_list) = 51
termination_sub = MathOptInterface.INFEASIBLE
iter = 163
[length(mis) for mis = unique(C_list)] = [9, 4, 5, 7, 9, 10, 9, 6, 12, 6, 7, 6, 92, 4, 5, 9, 11, 9, 6, 12, 15, 8, 7, 12, 18, 8, 6, 7, 5, 6, 8, 8, 10, 7, 5, 11, 19, 6, 6, 49, 10, 9, 5, 12, 30, 10, 100, 4, 9, 10, 11, 4, 299, 12, 7, 11, 13]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 164
[length(mis) for mis = unique(C_list)] = [11, 4, 8, 11, 16, 7, 6, 12, 4, 5, 7, 9, 8, 9, 5, 14, 11, 19, 13, 10, 13, 7, 4, 7, 6, 9, 8, 35, 160, 13, 8, 3, 11, 7, 4, 13, 5, 8, 16, 13, 8, 6, 8, 3, 11, 6, 11, 6, 8, 10, 7, 4, 11, 7, 6, 8, 6, 22, 4]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 165
[length(mis) for mis = unique(C_list)] = [12, 9, 10, 7, 10, 11, 6, 8, 11, 14, 6, 11, 10, 12, 9, 6, 10, 6, 11, 9, 12, 8, 12, 7, 7, 10, 14, 10, 10, 10, 10, 2, 10, 10, 8, 15, 12, 6, 11, 7, 9, 6, 7, 9, 13, 32, 9, 9, 8, 8, 8, 6, 12, 10, 5, 7, 10, 11, 4, 9, 6, 230, 10, 6, 7, 9]
length(C_list) = 66
termination_sub = MathOptInterface.INFEASIBLE
iter = 166
[length(mis) for mis = unique(C_list)] = [6, 6, 10, 4, 10, 12, 10, 4, 10, 10, 7, 6, 10, 9, 6, 9, 95, 9, 11, 12, 8, 11, 7, 34, 12, 8, 7, 10, 11, 10, 10, 10, 80, 15, 8, 10, 8, 11, 10, 12, 10, 7, 10, 20, 11, 8, 4, 13, 12, 16, 11, 7, 14, 10, 11, 9, 11, 9, 10, 11, 12, 21]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 167
[length(mis) for mis = unique(C_list)] = [7, 8, 11, 12, 10, 9, 6, 7, 9, 8, 8, 6, 10, 8, 4, 7, 6, 8, 13, 11, 9, 8, 10, 10, 11, 8, 21, 6, 11, 9, 8, 2, 13, 10, 9, 11, 10, 9, 9, 10, 10, 10, 7, 13, 11, 12, 8, 10, 10, 16, 7, 9, 8, 10, 11]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 168
[length(mis) for mis = unique(C_list)] = [4, 7, 9, 9, 7, 11, 14, 5, 10, 6, 9, 11, 9, 143, 5, 7, 10, 18, 4, 5, 6, 7, 7, 9, 9, 8, 7, 8, 12, 12, 8, 10, 9, 5, 7, 7, 9, 10, 11, 11, 14, 6, 6, 7, 6, 9, 6, 8, 7, 7, 8, 6, 6, 7, 9, 256, 9, 12, 11]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 169
[length(mis) for mis = unique(C_list)] = [13, 10, 6, 9, 7, 9, 10, 4, 10, 6, 10, 11, 8, 6, 8, 10, 12, 7, 4, 10, 6, 6, 4, 6, 9, 5, 8, 10, 8, 12, 8, 6, 4, 8, 8, 8, 9, 6, 11, 6, 10, 10, 4, 6, 10, 16, 8, 10, 12, 7, 11, 7, 9, 10, 9, 4, 9, 10, 9, 37, 8]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 170
[length(mis) for mis = unique(C_list)] = [3, 8, 4, 3, 6, 6, 8, 4, 23, 4, 6, 4, 24, 13, 6, 8, 6, 7, 4, 4, 7, 7, 10, 8, 4, 8, 6, 10, 6, 4, 11, 6, 5, 7, 6, 136, 6, 9, 5, 26, 4, 6, 7, 5, 5, 5]
length(C_list) = 46
termination_sub = MathOptInterface.INFEASIBLE
iter = 171
[length(mis) for mis = unique(C_list)] = [7, 8, 7, 8, 9, 9, 6, 9, 11, 10, 11, 6, 8, 9, 8, 8, 7, 6, 11, 8, 3, 11, 6, 10, 8, 8, 10, 10, 8, 7, 6, 10, 10, 244, 3, 6, 11, 8, 6, 8, 98, 10, 10, 11, 6, 9, 6, 6, 6, 4, 10, 6, 10, 42, 6, 78, 10, 6]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 172
[length(mis) for mis = unique(C_list)] = [12, 11, 12, 8, 11, 11, 10, 10, 11, 11, 9, 13, 11, 12, 11, 7, 9, 9, 10, 14, 8, 3, 10, 11, 8, 4, 10, 5, 10, 8, 10, 7, 8, 9, 10, 9, 11, 9, 11, 8, 8, 7, 3, 8, 12, 11, 14, 11, 12, 13, 14, 10, 13, 11, 15, 10, 4, 188, 10, 12, 8, 13]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 173
[length(mis) for mis = unique(C_list)] = [11, 9, 10, 10, 10, 10, 8, 11, 4, 11, 11, 28, 10, 13, 11, 8, 11, 17, 13, 13, 10, 10, 6, 9, 6, 12, 8, 11, 11, 9, 9, 7, 230, 10, 9, 11, 12, 12, 11, 9, 7, 12, 10, 10, 12, 13, 10, 11, 7, 11, 11, 15, 10, 10, 10, 8, 9, 26, 22, 135, 10, 9]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 174
[length(mis) for mis = unique(C_list)] = [3, 7, 13, 13, 12, 8, 8, 5, 8, 11, 9, 14, 10, 9, 10, 7, 6, 10, 12, 12, 7, 10, 8, 7, 10, 11, 9, 12, 9, 7, 9, 12, 13, 22, 9, 9, 4, 12, 11, 16, 10, 8, 11, 9, 9, 8, 14, 9, 10, 9, 8, 14, 10, 9, 15, 14, 12, 7, 11, 10, 5, 8]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 175
[length(mis) for mis = unique(C_list)] = [10, 6, 8, 13, 7, 8, 7, 5, 6, 9, 7, 11, 12, 8, 4, 5, 9, 6, 4, 7, 9, 5, 7, 7, 11, 9, 7, 5, 4, 5, 5, 7, 7, 8, 7, 4, 10, 10, 11, 9, 14, 9, 4, 5, 4, 80, 10, 9, 8, 10, 9, 8, 7, 4, 5, 9, 10, 5, 6, 7, 11, 4, 8]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 176
[length(mis) for mis = unique(C_list)] = [6, 9, 10, 10, 6, 8, 12, 9, 6, 12, 12, 11, 7, 12, 5, 19, 15, 10, 6, 15, 12, 6, 9, 8, 7, 15, 10, 15, 13, 4, 7, 14, 4, 13, 9, 9, 8, 304, 7, 8, 161, 4, 9, 13, 8, 15, 8, 6, 10, 11, 316, 7, 9, 12, 9, 12, 12, 5, 12, 6, 11, 13, 7]
length(C_list) = 63
termination_sub = MathOptInterface.INFEASIBLE
iter = 177
[length(mis) for mis = unique(C_list)] = [10, 8, 4, 7, 8, 4, 9, 9, 4, 4, 14, 4, 12, 139, 9, 11, 8, 11, 12, 5, 4, 15, 6, 4, 9, 9, 13, 81, 6, 8, 10, 6, 4, 7, 11, 13, 14, 144, 6, 14, 11, 6, 51, 8, 9, 5, 10, 23, 138, 8, 9, 12, 7, 11]
length(C_list) = 54
termination_sub = MathOptInterface.INFEASIBLE
iter = 178
[length(mis) for mis = unique(C_list)] = [10, 9, 5, 12, 5, 14, 12, 14, 3, 12, 12, 12, 9, 7, 11, 235, 10, 10, 8, 13, 4, 7, 11, 5, 11, 10, 13, 11, 12, 8, 10, 6, 9, 13, 15, 10, 14, 4, 8, 11, 11, 8, 10, 7, 12, 9, 12, 11, 10, 10, 12, 7, 7, 5, 13, 8, 6, 10, 13]
length(C_list) = 59
termination_sub = MathOptInterface.INFEASIBLE
iter = 179
[length(mis) for mis = unique(C_list)] = [8, 7, 6, 7, 4, 7, 8, 14, 6, 7, 9, 6, 7, 11, 8, 8, 7, 9, 9, 4, 8, 7, 9, 7, 9, 9, 10, 4, 8, 8, 10, 13, 9, 25, 8, 9, 20, 5, 11, 11, 7, 8, 7, 5, 196, 5, 11, 9, 10, 7, 8, 8, 7, 13, 12, 9, 9, 5]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 180
[length(mis) for mis = unique(C_list)] = [3, 9, 10, 6, 9, 8, 12, 11, 12, 8, 7, 12, 21, 15, 8, 7, 11, 4, 6, 4, 12, 4, 11, 10, 12, 12, 8, 10, 10, 12, 10, 4, 16, 16, 9, 8, 12, 6, 6, 13, 6, 10, 7, 15, 10, 4, 12, 10, 251, 11, 11, 5, 26, 13, 7, 125, 10]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 181
[length(mis) for mis = unique(C_list)] = [6, 12, 5, 10, 7, 12, 6, 7, 5, 11, 10, 5, 5, 4, 6, 7, 7, 10, 4, 2, 4, 66, 10, 10, 5, 8, 6, 5, 9, 8, 11, 12, 9, 8, 6, 13, 11, 11, 6, 3, 9, 7, 10, 8, 6, 9, 8, 7, 12]
length(C_list) = 49
termination_sub = MathOptInterface.INFEASIBLE
iter = 182
[length(mis) for mis = unique(C_list)] = [8, 11, 59, 9, 10, 11, 11, 10, 9, 8, 4, 4, 438, 9, 8, 7, 4, 10, 3, 548, 10, 10, 10, 7, 16, 10, 8, 13, 7, 10, 12, 9, 11, 8, 10, 11, 3, 9, 10, 8, 12, 8, 9, 6, 7, 10, 10, 7, 9, 10, 7, 8, 12, 10, 4, 9, 10, 9, 7, 7, 8, 7]
length(C_list) = 62
termination_sub = MathOptInterface.INFEASIBLE
iter = 183
[length(mis) for mis = unique(C_list)] = [7, 5, 8, 7, 3, 7, 6, 8, 4, 6, 3, 8, 24, 8, 5, 9, 7, 5, 6, 7, 9, 7, 8, 3, 8, 6, 14, 4, 15, 8, 10, 10, 10, 8, 8, 4, 12, 18, 47, 434, 4, 6, 11, 8, 8, 7, 5, 7, 9, 7, 7, 23, 8, 4, 8, 448, 8, 7, 23, 9, 7]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 184
[length(mis) for mis = unique(C_list)] = [15, 10, 9, 6, 13, 11, 11, 11, 13, 10, 12, 115, 13, 11, 10, 10, 13, 11, 11, 41, 11, 15, 4, 5, 11, 5, 10, 8, 11, 11, 7, 10, 260, 15, 12, 9, 12, 10, 11, 10, 10, 10, 8, 13, 5, 11, 8, 13, 10, 11, 10, 288, 10, 3, 9, 9, 41, 10]
length(C_list) = 58
termination_sub = MathOptInterface.INFEASIBLE
iter = 185
[length(mis) for mis = unique(C_list)] = [3, 7, 9, 5, 10, 6, 13, 5, 9, 4, 9, 7, 196, 9, 8, 10, 7, 4, 13, 81, 6, 8, 9, 8, 8, 7, 8, 11, 7, 10, 9, 9, 431, 6, 6, 8, 12, 13, 9, 8, 11, 9, 12, 5, 8, 5, 3, 9, 13, 13, 7, 9, 5, 11, 10]
length(C_list) = 55
termination_sub = MathOptInterface.INFEASIBLE
iter = 186
[length(mis) for mis = unique(C_list)] = [9, 3, 6, 12, 8, 8, 11, 11, 10, 8, 8, 8, 8, 8, 13, 429, 13, 13, 9, 8, 5, 8, 9, 79, 7, 12, 11, 9, 7, 14, 5, 8, 5, 8, 8, 29, 13, 8, 35, 9, 9, 10, 6, 9, 7, 9, 8, 12, 10, 7, 6, 8, 12, 8, 320, 11, 8]
length(C_list) = 57
termination_sub = MathOptInterface.INFEASIBLE
iter = 187
[length(mis) for mis = unique(C_list)] = [8, 7, 8, 10, 5, 8, 9, 11, 8, 7, 10, 9, 10, 8, 10, 11, 5, 11, 8, 4, 36, 7, 11, 7, 5, 8, 7, 8, 6, 5, 10, 79, 7, 4, 244, 7, 12, 7, 9, 8, 12, 11, 10, 11, 6, 7, 8, 14, 9, 12, 12, 11, 9, 8, 12, 7, 5, 6, 9, 5, 5]
length(C_list) = 61
termination_sub = MathOptInterface.INFEASIBLE
iter = 188
[length(mis) for mis = unique(C_list)] = [6, 11, 4, 5, 8, 4, 12, 8, 4, 20, 3, 12, 7, 4, 8, 8, 8, 8, 10, 4, 4, 8, 11, 4, 7, 9, 11, 11, 8, 8, 7, 4, 5, 8, 19, 10, 7, 7, 10, 9, 9, 5, 8, 9, 6, 7, 7, 12, 10, 7, 3, 7]
length(C_list) = 52
termination_sub = MathOptInterface.INFEASIBLE
iter = 189
[length(mis) for mis = unique(C_list)] = [7, 8, 12, 6, 6, 3, 9, 3, 5, 5, 6, 5, 6, 4, 8, 5, 6, 4, 9, 6, 10, 4, 3, 9, 4, 9, 9, 6, 5, 8, 6, 12, 280, 7, 3, 8, 8, 7, 8, 12, 56, 7, 5, 8, 2, 7, 7, 9, 9, 8, 106, 7, 9]
length(C_list) = 53
termination_sub = MathOptInterface.INFEASIBLE
iter = 190
termination = MathOptInterface.INFEASIBLE
objective_value = 0.0
