┌ Warning: master problem cannot be solved
└ @ Main ~/git/Loopless_Fluxes_with_Mixed_Integer_Optimization/src/cuts_decomposition.jl:486
ENV["GRB_LICENSE_FILE"] = "/home/htc/htroppen/gurobi.lic"
iCHOv1
(time_limit, fast, json, yeast) = (1800, true, true, false)
fast = true

iCHOv1
----------------------------------
number of metabolites : 4456
number of reactions : 6663
number of genes : 1766

MOI.get(master_problem, MOI.RawOptimizerAttribute("numerics/feastol")) = 1.0e-6
multiple_mis = 133
(indicator, big_m) = (true, false)
INDICATOR ADDED
model with 6663 flux variables and 12684 variables in total
master problem solved
feasible = false
[length(mis) for mis = unique(C_list)] = [8, 3, 209, 4, 5, 6, 3, 4, 10, 4, 4, 3, 7, 7, 2, 11, 3, 5, 8, 4, 3, 6, 3, 110, 103, 116, 4, 16, 6, 8, 9, 4, 4, 12, 3, 4, 4, 4, 216, 15, 5, 16, 4, 12, 242, 4, 6, 4, 13, 3, 8, 12, 4, 21]
length(C_list) = 39
sub problem solved
iter = 1
termination_master = MathOptInterface.TIME_LIMIT
BoundsError((missing, Any[0.03236897160192772], Any[0.03236897160192772], missing, missing, missing, missing, missing, 1800.0759801864624, MathOptInterface.INFEASIBLE, 1, Any[(Any[255, 2094, 2100, 4582, 4584], Any[246, 2095, 4576], 8), (Any[329], Any[331, 2533], 3), (Any[1903, 2209, 2211], Any[4653], 4), (Any[977, 3027], Any[978, 2938, 4701], 5), (Any[733, 1118, 2249, 3103], Any[3102, 4866], 6), (Any[2648], Any[2846, 4701], 3), (Any[5118], Any[5035, 5112, 5117], 4), (Any[10, 1964, 2648, 3139, 4723], Any[331, 551, 972, 2544, 4701], 10), (Any[430, 5938, 6018], Any[6017], 4), (Any[71, 520, 4908], Any[76], 4), (Any[2935, 3085], Any[5985], 3), (Any[430, 1861, 4723, 6012], Any[1852, 2306, 4449], 7), (Any[1728, 1873, 2479, 2648], Any[2846, 3538, 4701], 7), (Any[338, 2211], Any[], 2), (Any[933], Any[2571, 4854], 3), (Any[272, 496, 520, 4908], Any[277], 5), (Any[670, 2648, 3022, 4723], Any[295, 2037, 2846, 4701], 8), (Any[6010, 6020], Any[6008, 6019], 4), (Any[31, 5621], Any[3047], 3), (Any[329, 1741, 1872, 4596], Any[331, 2533], 6), (Any[977], Any[978, 2533], 3), (Any[977, 3027], Any[978, 4701], 4), (Any[329, 4547, 4779], Any[331, 4544, 4778], 6), (Any[2673, 4153, 4506, 5935, 6011], Any[636, 2678, 6017], 8), (Any[775, 1168, 1578, 1821, 2648, 4434, 5759], Any[2846, 4701], 9), (Any[733, 1046], Any[4765, 4866], 4), (Any[61, 2163, 5126], Any[62], 4), (Any[70, 2854], Any[2853], 3), (Any[967, 4723], Any[959, 4701], 4), (Any[329, 961], Any[331, 956], 4), (Any[733, 3103], Any[3102, 4866], 4), (Any[80, 423, 2209, 2211], Any[85], 5), (Any[80, 3066], Any[85, 3064], 4), (Any[6016], Any[636, 2306, 2678], 4), (Any[430, 5937, 5938], Any[636, 6008, 6019], 6), (Any[1964, 4722], Any[1972, 4719], 4), (Any[1132], Any[317, 2487], 3), (Any[977, 1089, 1291, 4547, 5738], Any[978, 3058, 4537], 8), (Any[329, 1872], Any[331, 2533], 4)], Any[563.9791400432587, 1800.022901058197], Any[0.05532407760620117], Any[15.355365991592407]), 16)
